package models

// see http://hl7.org/fhir/json.html#schema for information about the FHIR Json Schemas
// Schema: http://json-schema.org/draft-06/schema#
import (
	"encoding/json"
	"regexp"
)

const (
	FHIRVersion = "4.0"
)

type Resource interface {
	ResourceType() string
}
type Validater interface {
	Validate() bool
}

// MedicinalProductUndesirableEffect is Describe the undesirable effects of the medicinal product.
type MedicinalProductUndesirableEffect struct {
	// The symptom, condition or undesirable effect.
	SymptomConditionEffect *CodeableConcept `json:"symptomConditionEffect"`
	// The frequency of occurrence of the effect.
	FrequencyOfOccurrence *CodeableConcept `json:"frequencyOfOccurrence"`
	// The population group to which this applies.
	Population []*Population `json:"population"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Classification of the effect.
	Classification *CodeableConcept `json:"classification"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The medication for which this is an indication.
	Subject []*Reference `json:"subject"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
}

func (t *MedicinalProductUndesirableEffect) ResourceType() string {
	return "MedicinalProductUndesirableEffect"
}
func (t *MedicinalProductUndesirableEffect) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MedicinalProductUndesirableEffect
		ResourceType string `json:"resourceType"`
	}{
		MedicinalProductUndesirableEffect: *t,
		ResourceType:                      t.ResourceType(),
	})
}

// MessageHeader is The header for a message exchange that is either requesting or responding to an
// action.  The reference(s) that are the subject of the action as well as other
// information related to the action are typically transmitted in a bundle in which the
// MessageHeader resource instance is the first resource in the bundle.
type MessageHeader struct {
	// Information about the message that this message is a response to.  Only present if
	// this message is a response.
	Response *MessageHeader_Response `json:"response"`
	// The actual data of the message - a reference to the root/focus class of the event.
	Focus []*Reference `json:"focus"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Identifies the sending system to allow the use of a trust relationship.
	Sender *Reference `json:"sender"`
	// The person or device that performed the data entry leading to this message. When
	// there is more than one candidate, pick the most proximal to the message. Can provide
	// other enterers in extensions.
	Enterer *Reference `json:"enterer"`
	// The person or organization that accepts overall responsibility for the contents of
	// the message. The implication is that the message event happened under the policies
	// of the responsible party.
	Responsible *Reference `json:"responsible"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for eventUri
	EventUri_ext *Element `json:"_eventUri"`
	// Code that identifies the event this message represents and connects it with its
	// definition. Events defined as part of the FHIR specification have the system value
	// "http://terminology.hl7.org/CodeSystem/message-events".  Alternatively uri to the
	// EventDefinition.
	EventCoding *Coding `json:"eventCoding"`
	// Code that identifies the event this message represents and connects it with its
	// definition. Events defined as part of the FHIR specification have the system value
	// "http://terminology.hl7.org/CodeSystem/message-events".  Alternatively uri to the
	// EventDefinition.
	// pattern ^\S*$
	EventUri string `json:"eventUri"`
	// The logical author of the message - the person or device that decided the described
	// event should happen. When there is more than one candidate, pick the most proximal
	// to the MessageHeader. Can provide other authors in extensions.
	Author *Reference `json:"author"`
	// Coded indication of the cause for the event - indicates  a reason for the occurrence
	// of the event that is a focus of this message.
	Reason *CodeableConcept `json:"reason"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The destination application which the message is intended for.
	Destination []*MessageHeader_Destination `json:"destination"`
	// The source application from which this message originated.
	Source *MessageHeader_Source `json:"source,omitempty"`
	// Permanent link to the MessageDefinition for this message.
	Definition string `json:"definition"`
}

func (t *MessageHeader) ResourceType() string {
	return "MessageHeader"
}
func (t *MessageHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MessageHeader
		ResourceType string `json:"resourceType"`
	}{
		MessageHeader: *t,
		ResourceType:  t.ResourceType(),
	})
}

// Questionnaire is A structured set of questions intended to guide the collection of answers from
// end-users. Questionnaires provide detailed control over order, presentation,
// phraseology and grouping to allow coherent, consistent data collection.
type Questionnaire struct {
	// Extensions for approvalDate
	ApprovalDate_ext *Element `json:"_approvalDate"`
	// The types of subjects that can be the subject of responses created for the
	// questionnaire.
	SubjectType []string `json:"subjectType"`
	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate string `json:"lastReviewDate"`
	// A copyright statement relating to the questionnaire and/or its contents. Copyright
	// statements are generally legal restrictions on the use and publishing of the
	// questionnaire.
	Copyright string `json:"copyright"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// A short, descriptive, user-friendly title for the questionnaire.
	Title string `json:"title"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for subjectType
	SubjectType_ext []*Element `json:"_subjectType"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate questionnaire instances.
	UseContext []*UsageContext `json:"useContext"`
	// A legal or geographic region in which the questionnaire is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// A natural language name identifying the questionnaire. This name should be usable as
	// an identifier for the module by machine processing applications such as code
	// generation.
	Name string `json:"name"`
	// Extensions for lastReviewDate
	LastReviewDate_ext *Element `json:"_lastReviewDate"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// The date on which the resource content was approved by the publisher. Approval
	// happens once when the content is officially approved for usage.
	ApprovalDate string `json:"approvalDate"`
	// A particular question, question grouping or display text that is part of the
	// questionnaire.
	Item []*Questionnaire_Item `json:"item"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// The URL of a Questionnaire that this Questionnaire is based on.
	DerivedFrom []string `json:"derivedFrom"`
	// An identifier for this question or group of questions in a particular terminology
	// such as LOINC.
	Code []*Coding `json:"code"`
	// An absolute URI that is used to identify this questionnaire when it is referenced in
	// a specification, model, design or an instance; also called its canonical identifier.
	// This SHOULD be globally unique and SHOULD be a literal address at which at which an
	// authoritative instance of this questionnaire is (or will be) published. This URL can
	// be the target of a canonical reference. It SHALL remain the same when the
	// questionnaire is stored on different servers.
	Url string `json:"url"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A formal identifier that is used to identify this questionnaire when it is
	// represented in other formats, or referenced in a specification, model, design or an
	// instance.
	Identifier []*Identifier `json:"identifier"`
	// A Boolean value to indicate that this questionnaire is authored for testing purposes
	// (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Experimental bool `json:"experimental"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Explanation of why this questionnaire is needed and why it has been designed as it
	// has.
	Purpose string `json:"purpose"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The identifier that is used to identify this version of the questionnaire when it is
	// referenced in a specification, model, design or instance. This is an arbitrary value
	// managed by the questionnaire author and is not expected to be globally unique. For
	// example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not
	// available. There is also no expectation that versions can be placed in a
	// lexicographical sequence.
	Version string `json:"version"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// The name of the organization or individual that published the questionnaire.
	Publisher string `json:"publisher"`
	// A free text natural language description of the questionnaire from a consumer's
	// perspective.
	Description string `json:"description"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The status of this questionnaire. Enables tracking the life-cycle of the content.
	Status QuestionnaireStatus `json:"status"`
	// The date  (and optionally time) when the questionnaire was published. The date must
	// change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the
	// questionnaire changes.
	Date string `json:"date"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// The period during which the questionnaire content was or is planned to be in active
	// use.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
}

func (t *Questionnaire) ResourceType() string {
	return "Questionnaire"
}
func (t *Questionnaire) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Questionnaire
		ResourceType string `json:"resourceType"`
	}{
		Questionnaire: *t,
		ResourceType:  t.ResourceType(),
	})
}

type QuestionnaireStatus string

const (
	QuestionnaireStatusDraft   QuestionnaireStatus = "draft"
	QuestionnaireStatusActive  QuestionnaireStatus = "active"
	QuestionnaireStatusRetired QuestionnaireStatus = "retired"
	QuestionnaireStatusUnknown QuestionnaireStatus = "unknown"
)

// RequestGroup is A group of related requests that can be used to capture intended activities that
// have inter-dependencies such as "give this medication after that one".
type RequestGroup struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Indicates the level of authority/intentionality associated with the request and
	// where the request fits into the workflow chain.
	Intent string `json:"intent"`
	// Extensions for intent
	Intent_ext *Element `json:"_intent"`
	// Describes the context of the request group, if any.
	Encounter *Reference `json:"encounter"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The current state of the request. For request groups, the status reflects the status
	// of all the requests in the group.
	Status string `json:"status"`
	// Extensions for instantiatesCanonical
	InstantiatesCanonical_ext []*Element `json:"_instantiatesCanonical"`
	// The subject for which the request group was created.
	Subject *Reference `json:"subject"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A canonical URL referencing a FHIR-defined protocol, guideline, orderset or other
	// definition that is adhered to in whole or in part by this request.
	InstantiatesCanonical []string `json:"instantiatesCanonical"`
	// A plan, proposal or order that is fulfilled in whole or in part by this request.
	BasedOn []*Reference `json:"basedOn"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Indicates when the request group was created.
	AuthoredOn string `json:"authoredOn"`
	// Completed or terminated request(s) whose function is taken by this new request.
	Replaces []*Reference `json:"replaces"`
	// A shared identifier common to all requests that were authorized more or less
	// simultaneously by a single author, representing the identifier of the requisition,
	// prescription or similar form.
	GroupIdentifier *Identifier `json:"groupIdentifier"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for instantiatesUri
	InstantiatesUri_ext []*Element `json:"_instantiatesUri"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Allows a service to provide a unique, business identifier for the request.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for priority
	Priority_ext *Element `json:"_priority"`
	// Describes the reason for the request group in coded or textual form.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Provides a mechanism to communicate additional information about the response.
	Note []*Annotation `json:"note"`
	// Indicates how quickly the request should be addressed with respect to other requests.
	Priority string `json:"priority"`
	// A code that identifies what the overall request group is.
	Code *CodeableConcept `json:"code"`
	// Extensions for authoredOn
	AuthoredOn_ext *Element `json:"_authoredOn"`
	// Provides a reference to the author of the request group.
	Author *Reference `json:"author"`
	// Indicates another resource whose existence justifies this request group.
	ReasonReference []*Reference `json:"reasonReference"`
	// The actions, if any, produced by the evaluation of the artifact.
	Action []*RequestGroup_Action `json:"action"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A URL referencing an externally defined protocol, guideline, orderset or other
	// definition that is adhered to in whole or in part by this request.
	InstantiatesUri []string `json:"instantiatesUri"`
}

func (t *RequestGroup) ResourceType() string {
	return "RequestGroup"
}
func (t *RequestGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		RequestGroup
		ResourceType string `json:"resourceType"`
	}{
		RequestGroup: *t,
		ResourceType: t.ResourceType(),
	})
}

// ResearchStudy is A process where a researcher or organization plans and then executes a series of
// steps intended to increase the field of healthcare-related knowledge.  This includes
// studies of safety, efficacy, comparative effectiveness and other information about
// medications, devices, therapies and other interventional and investigative
// techniques.  A ResearchStudy involves the gathering of information about human or
// animal subjects.
type ResearchStudy struct {
	// The set of steps expected to be performed as part of the execution of the study.
	Protocol []*Reference `json:"protocol"`
	// The type of study based upon the intent of the study's activities. A classification
	// of the intent of the study.
	PrimaryPurposeType *CodeableConcept `json:"primaryPurposeType"`
	// The stage in the progression of a therapy from initial experimental use in humans in
	// clinical trials to post-market evaluation.
	Phase *CodeableConcept `json:"phase"`
	// Key terms to aid in searching for or filtering the study.
	Keyword []*CodeableConcept `json:"keyword"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Reference to a Group that defines the criteria for and quantity of subjects
	// participating in the study.  E.g. " 200 female Europeans between the ages of 20 and
	// 45 with early onset diabetes".
	Enrollment []*Reference `json:"enrollment"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A short, descriptive user-friendly label for the study.
	Title string `json:"title"`
	// The condition that is the focus of the study.  For example, In a study to examine
	// risk factors for Lupus, might have as an inclusion criterion "healthy volunteer",
	// but the target condition code would be a Lupus SNOMED code.
	Condition []*CodeableConcept `json:"condition"`
	// Describes an expected sequence of events for one of the participants of a study.
	// E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
	Arm []*ResearchStudy_Arm `json:"arm"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A description and/or code explaining the premature termination of the study.
	ReasonStopped *CodeableConcept `json:"reasonStopped"`
	// Indicates a country, state or other region where the study is taking place.
	Location []*CodeableConcept `json:"location"`
	// Citations, references and other related documents.
	RelatedArtifact []*RelatedArtifact `json:"relatedArtifact"`
	// A full description of how the study is being conducted.
	Description string `json:"description"`
	// Identifies the start date and the expected (or actual, depending on status) end date
	// for the study.
	Period *Period `json:"period"`
	// An organization that initiates the investigation and is legally responsible for the
	// study.
	Sponsor *Reference `json:"sponsor"`
	// A larger research study of which this particular study is a component or step.
	PartOf []*Reference `json:"partOf"`
	// Codes categorizing the type of study such as investigational vs. observational, type
	// of blinding, type of randomization, safety vs. efficacy, etc.
	Category []*CodeableConcept `json:"category"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// A researcher in a study who oversees multiple aspects of the study, such as concept
	// development, protocol writing, protocol submission for IRB approval, participant
	// recruitment, informed consent, data collection, analysis, interpretation and
	// presentation.
	PrincipalInvestigator *Reference `json:"principalInvestigator"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Contact details to assist a user in learning more about or engaging with the study.
	Contact []*ContactDetail `json:"contact"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The current state of the study.
	Status ResearchStudyStatus `json:"status"`
	// The medication(s), food(s), therapy(ies), device(s) or other concerns or
	// interventions that the study is seeking to gain more information about.
	Focus []*CodeableConcept `json:"focus"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// A facility in which study activities are conducted.
	Site []*Reference `json:"site"`
	// Comments made about the study by the performer, subject or other participants.
	Note []*Annotation `json:"note"`
	// A goal that the study is aiming to achieve in terms of a scientific question to be
	// answered by the analysis of data collected during the study.
	Objective []*ResearchStudy_Objective `json:"objective"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifiers assigned to this research study by the sponsor or other systems.
	Identifier []*Identifier `json:"identifier"`
}

func (t *ResearchStudy) ResourceType() string {
	return "ResearchStudy"
}
func (t *ResearchStudy) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ResearchStudy
		ResourceType string `json:"resourceType"`
	}{
		ResearchStudy: *t,
		ResourceType:  t.ResourceType(),
	})
}

type ResearchStudyStatus string

const (
	ResearchStudyStatusActive                                    ResearchStudyStatus = "active"
	ResearchStudyStatusAdministrativelyCompleted                 ResearchStudyStatus = "administratively-completed"
	ResearchStudyStatusApproved                                  ResearchStudyStatus = "approved"
	ResearchStudyStatusClosedToAccrual                           ResearchStudyStatus = "closed-to-accrual"
	ResearchStudyStatusClosedToAccrualAndIntervention            ResearchStudyStatus = "closed-to-accrual-and-intervention"
	ResearchStudyStatusCompleted                                 ResearchStudyStatus = "completed"
	ResearchStudyStatusDisapproved                               ResearchStudyStatus = "disapproved"
	ResearchStudyStatusInReview                                  ResearchStudyStatus = "in-review"
	ResearchStudyStatusTemporarilyClosedToAccrual                ResearchStudyStatus = "temporarily-closed-to-accrual"
	ResearchStudyStatusTemporarilyClosedToAccrualAndIntervention ResearchStudyStatus = "temporarily-closed-to-accrual-and-intervention"
	ResearchStudyStatusWithdrawn                                 ResearchStudyStatus = "withdrawn"
)

// CoverageEligibilityResponse is This resource provides eligibility and plan details from the processing of an
// CoverageEligibilityRequest resource.
type CoverageEligibilityResponse struct {
	// Financial instruments for reimbursement for the health care products and services.
	Insurance []*CoverageEligibilityResponse_Insurance `json:"insurance"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// A human readable description of the status of the adjudication.
	Disposition string `json:"disposition"`
	// The status of the resource instance.
	Status string `json:"status"`
	// Code to specify whether requesting: prior authorization requirements for some
	// service categories or billing codes; benefits for coverages specified or discovered;
	// discovery and return of coverages for the patient; and/or validation that the
	// specified coverage is in-force at the date/period specified or 'now' if not
	// specified.
	Purpose []CoverageEligibilityResponsePurpose `json:"purpose"`
	// The date this resource was created.
	Created string `json:"created"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The date or dates when the enclosed suite of services were performed or completed.
	ServicedPeriod *Period `json:"servicedPeriod"`
	// The provider which is responsible for the request.
	Requestor *Reference `json:"requestor"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for preAuthRef
	PreAuthRef_ext *Element `json:"_preAuthRef"`
	// A code for the form to be used for printing the content.
	Form *CodeableConcept `json:"form"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The date or dates when the enclosed suite of services were performed or completed.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	ServicedDate string `json:"servicedDate"`
	// A unique identifier assigned to this coverage eligiblity request.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for purpose
	Purpose_ext []*Element `json:"_purpose"`
	// A reference from the Insurer to which these services pertain to be used on further
	// communication and as proof that the request occurred.
	PreAuthRef string `json:"preAuthRef"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The party who is the beneficiary of the supplied coverage and for whom eligibility
	// is sought.
	Patient *Reference `json:"patient,omitempty"`
	// Extensions for outcome
	Outcome_ext *Element `json:"_outcome"`
	// Extensions for disposition
	Disposition_ext *Element `json:"_disposition"`
	// The Insurer who issued the coverage in question and is the author of the response.
	Insurer *Reference `json:"insurer,omitempty"`
	// The outcome of the request processing.
	Outcome CoverageEligibilityResponseOutcome `json:"outcome"`
	// Errors encountered during the processing of the request.
	Error []*CoverageEligibilityResponse_Error `json:"error"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for servicedDate
	ServicedDate_ext *Element `json:"_servicedDate"`
	// Extensions for created
	Created_ext *Element `json:"_created"`
	// Reference to the original request resource.
	Request *Reference `json:"request,omitempty"`
}

func (t *CoverageEligibilityResponse) ResourceType() string {
	return "CoverageEligibilityResponse"
}
func (t *CoverageEligibilityResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		CoverageEligibilityResponse
		ResourceType string `json:"resourceType"`
	}{
		CoverageEligibilityResponse: *t,
		ResourceType:                t.ResourceType(),
	})
}

type CoverageEligibilityResponsePurpose string
type CoverageEligibilityResponseOutcome string

const (
	CoverageEligibilityResponseOutcomeQueued   CoverageEligibilityResponseOutcome = "queued"
	CoverageEligibilityResponseOutcomeComplete CoverageEligibilityResponseOutcome = "complete"
	CoverageEligibilityResponseOutcomeError    CoverageEligibilityResponseOutcome = "error"
	CoverageEligibilityResponseOutcomePartial  CoverageEligibilityResponseOutcome = "partial"
)

// Location is Details and position information for a physical place where services are provided
// and resources and participants may be stored, found, contained, or accommodated.
type Location struct {
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The status property covers the general availability of the resource, not the current
	// value which may be covered by the operationStatus, or by a schedule/slots if they
	// are configured for the location.
	Status LocationStatus `json:"status"`
	// Physical form of the location, e.g. building, room, vehicle, road.
	PhysicalType *CodeableConcept `json:"physicalType"`
	// Another Location of which this Location is physically a part of.
	PartOf *Reference `json:"partOf"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Indicates whether a resource instance represents a specific location or a class of
	// locations.
	Mode LocationMode `json:"mode"`
	// The contact details of communication devices available at the location. This can
	// include phone numbers, fax numbers, mobile numbers, email addresses and web sites.
	Telecom []*ContactPoint `json:"telecom"`
	// The organization responsible for the provisioning and upkeep of the location.
	ManagingOrganization *Reference `json:"managingOrganization"`
	// Extensions for availabilityExceptions
	AvailabilityExceptions_ext *Element `json:"_availabilityExceptions"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A list of alternate names that the location is known as, or was known as, in the
	// past.
	Alias []string `json:"alias"`
	// Description of the Location, which helps in finding or referencing the place.
	Description string `json:"description"`
	// Extensions for mode
	Mode_ext *Element `json:"_mode"`
	// The operational status covers operation values most relevant to beds (but can also
	// apply to rooms/units/chairs/etc. such as an isolation unit/dialysis chair). This
	// typically covers concepts such as contamination, housekeeping, and other activities
	// like maintenance.
	OperationalStatus *Coding `json:"operationalStatus"`
	// Name of the location as used by humans. Does not need to be unique.
	Name string `json:"name"`
	// Unique code or number identifying the location to its users.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Indicates the type of function performed at the location.
	Type []*CodeableConcept `json:"type"`
	// The absolute geographic location of the Location, expressed using the WGS84 datum
	// (This is the same co-ordinate system used in KML).
	Position *Location_Position `json:"position"`
	// What days/times during a week is this location usually open.
	HoursOfOperation []*Location_HoursOfOperation `json:"hoursOfOperation"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for alias
	Alias_ext []*Element `json:"_alias"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Physical location.
	Address *Address `json:"address"`
	// A description of when the locations opening ours are different to normal, e.g.
	// public holiday availability. Succinctly describing all possible exceptions to normal
	// site availability as detailed in the opening hours Times.
	AvailabilityExceptions string `json:"availabilityExceptions"`
	// Technical endpoints providing access to services operated for the location.
	Endpoint []*Reference `json:"endpoint"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
}

func (t *Location) ResourceType() string {
	return "Location"
}
func (t *Location) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Location
		ResourceType string `json:"resourceType"`
	}{
		Location:     *t,
		ResourceType: t.ResourceType(),
	})
}

type LocationStatus string
type LocationMode string

const (
	LocationStatusActive    LocationStatus = "active"
	LocationStatusSuspended LocationStatus = "suspended"
	LocationStatusInactive  LocationStatus = "inactive"
	LocationModeInstance    LocationMode   = "instance"
	LocationModeKind        LocationMode   = "kind"
)

// MedicinalProductIndication is Indication for the Medicinal Product.
type MedicinalProductIndication struct {
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The disease, symptom or procedure that is the indication for treatment.
	DiseaseSymptomProcedure *CodeableConcept `json:"diseaseSymptomProcedure"`
	// The intended effect, aim or strategy to be achieved by the indication.
	IntendedEffect *CodeableConcept `json:"intendedEffect"`
	// Describe the undesirable effects of the medicinal product.
	UndesirableEffect []*Reference `json:"undesirableEffect"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Comorbidity (concurrent condition) or co-infection as part of the indication.
	Comorbidity []*CodeableConcept `json:"comorbidity"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Timing or duration information as part of the indication.
	Duration *Quantity `json:"duration"`
	// Information about the use of the medicinal product in relation to other therapies
	// described as part of the indication.
	OtherTherapy []*MedicinalProductIndication_OtherTherapy `json:"otherTherapy"`
	// The population group to which this applies.
	Population []*Population `json:"population"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The medication for which this is an indication.
	Subject []*Reference `json:"subject"`
	// The status of the disease or symptom for which the indication applies.
	DiseaseStatus *CodeableConcept `json:"diseaseStatus"`
}

func (t *MedicinalProductIndication) ResourceType() string {
	return "MedicinalProductIndication"
}
func (t *MedicinalProductIndication) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MedicinalProductIndication
		ResourceType string `json:"resourceType"`
	}{
		MedicinalProductIndication: *t,
		ResourceType:               t.ResourceType(),
	})
}

// MessageDefinition is Defines the characteristics of a message that can be shared between systems,
// including the type of event that initiates the message, the content to be
// transmitted and what response(s), if any, are permitted.
type MessageDefinition struct {
	// A free text natural language description of the message definition from a consumer's
	// perspective.
	Description string `json:"description"`
	// A copyright statement relating to the message definition and/or its contents.
	// Copyright statements are generally legal restrictions on the use and publishing of
	// the message definition.
	Copyright string `json:"copyright"`
	// The MessageDefinition that is the basis for the contents of this resource.
	Base string `json:"base"`
	// Identifies the resource (or resources) that are being addressed by the event.  For
	// example, the Encounter for an admit message or two Account records for a merge.
	Focus []*MessageDefinition_Focus `json:"focus"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A natural language name identifying the message definition. This name should be
	// usable as an identifier for the module by machine processing applications such as
	// code generation.
	Name string `json:"name"`
	// A Boolean value to indicate that this message definition is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used for
	// genuine usage.
	Experimental bool `json:"experimental"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Indicates what types of messages may be sent as an application-level response to
	// this message.
	AllowedResponse []*MessageDefinition_AllowedResponse `json:"allowedResponse"`
	// Explanation of why this message definition is needed and why it has been designed as
	// it has.
	Purpose string `json:"purpose"`
	// Identifies a protocol or workflow that this MessageDefinition represents a step in.
	Parent []string `json:"parent"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The status of this message definition. Enables tracking the life-cycle of the
	// content.
	Status MessageDefinitionStatus `json:"status"`
	// The date  (and optionally time) when the message definition was published. The date
	// must change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the message
	// definition changes.
	Date string `json:"date"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate message definition instances.
	UseContext []*UsageContext `json:"useContext"`
	// Declare at a message definition level whether a response is required or only upon
	// error or success, or never.
	ResponseRequired MessageDefinitionResponseRequired `json:"responseRequired"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// A short, descriptive, user-friendly title for the message definition.
	Title string `json:"title"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The name of the organization or individual that published the message definition.
	Publisher string `json:"publisher"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A formal identifier that is used to identify this message definition when it is
	// represented in other formats, or referenced in a specification, model, design or an
	// instance.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Extensions for eventUri
	EventUri_ext *Element `json:"_eventUri"`
	// Extensions for responseRequired
	ResponseRequired_ext *Element `json:"_responseRequired"`
	// The identifier that is used to identify this version of the message definition when
	// it is referenced in a specification, model, design or instance. This is an arbitrary
	// value managed by the message definition author and is not expected to be globally
	// unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is
	// not available. There is also no expectation that versions can be placed in a
	// lexicographical sequence.
	Version string `json:"version"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The business identifier that is used to reference the MessageDefinition and *is*
	// expected to be consistent from server to server.
	Url string `json:"url"`
	// Event code or link to the EventDefinition.
	// pattern ^\S*$
	EventUri string `json:"eventUri"`
	// The impact of the content of the message.
	Category MessageDefinitionCategory `json:"category"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// Event code or link to the EventDefinition.
	EventCoding *Coding `json:"eventCoding"`
	// Canonical reference to a GraphDefinition. If a URL is provided, it is the canonical
	// reference to a [[[GraphDefinition]]] that it controls what resources are to be added
	// to the bundle when building the document. The GraphDefinition can also specify
	// profiles that apply to the various resources.
	Graph []string `json:"graph"`
	// Extensions for category
	Category_ext *Element `json:"_category"`
	// A MessageDefinition that is superseded by this definition.
	Replaces []string `json:"replaces"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// A legal or geographic region in which the message definition is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
}

func (t *MessageDefinition) ResourceType() string {
	return "MessageDefinition"
}
func (t *MessageDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MessageDefinition
		ResourceType string `json:"resourceType"`
	}{
		MessageDefinition: *t,
		ResourceType:      t.ResourceType(),
	})
}

type MessageDefinitionCategory string
type MessageDefinitionStatus string
type MessageDefinitionResponseRequired string

const (
	MessageDefinitionCategoryConsequence       MessageDefinitionCategory         = "consequence"
	MessageDefinitionCategoryCurrency          MessageDefinitionCategory         = "currency"
	MessageDefinitionCategoryNotification      MessageDefinitionCategory         = "notification"
	MessageDefinitionStatusDraft               MessageDefinitionStatus           = "draft"
	MessageDefinitionStatusActive              MessageDefinitionStatus           = "active"
	MessageDefinitionStatusRetired             MessageDefinitionStatus           = "retired"
	MessageDefinitionStatusUnknown             MessageDefinitionStatus           = "unknown"
	MessageDefinitionResponseRequiredAlways    MessageDefinitionResponseRequired = "always"
	MessageDefinitionResponseRequiredOnError   MessageDefinitionResponseRequired = "on-error"
	MessageDefinitionResponseRequiredNever     MessageDefinitionResponseRequired = "never"
	MessageDefinitionResponseRequiredOnSuccess MessageDefinitionResponseRequired = "on-success"
)

// SearchParameter is A search parameter that defines a named search item that can be used to
// search/filter on a resource.
type SearchParameter struct {
	// Extensions for multipleOr
	MultipleOr_ext *Element `json:"_multipleOr"`
	// Used to define the parts of a composite search parameter.
	Component []*SearchParameter_Component `json:"component"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Extensions for expression
	Expression_ext *Element `json:"_expression"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// A natural language name identifying the search parameter. This name should be usable
	// as an identifier for the module by machine processing applications such as code
	// generation.
	Name string `json:"name"`
	// The status of this search parameter. Enables tracking the life-cycle of the content.
	Status SearchParameterStatus `json:"status"`
	// The name of the organization or individual that published the search parameter.
	Publisher string `json:"publisher"`
	// The code used in the URL or the parameter name in a parameters resource for this
	// search parameter.
	Code string `json:"code"`
	// Extensions for xpath
	Xpath_ext *Element `json:"_xpath"`
	// How the search parameter relates to the set of elements returned by evaluating the
	// xpath query.
	XpathUsage SearchParameterXpathUsage `json:"xpathUsage"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Whether multiple values are allowed for each time the parameter exists. Values are
	// separated by commas, and the parameter matches if any of the values match.
	MultipleOr bool `json:"multipleOr"`
	// Whether multiple parameters are allowed - e.g. more than one parameter with the same
	// name. The search matches if all the parameters match.
	MultipleAnd bool `json:"multipleAnd"`
	// A legal or geographic region in which the search parameter is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// The type of value that a search parameter may contain, and how the content is
	// interpreted.
	Type SearchParameterType `json:"type"`
	// A FHIRPath expression that returns a set of elements for the search parameter.
	Expression string `json:"expression"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Extensions for chain
	Chain_ext []*Element `json:"_chain"`
	// A Boolean value to indicate that this search parameter is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used for
	// genuine usage.
	Experimental bool `json:"experimental"`
	// And how it used.
	Description string `json:"description"`
	// Contains the names of any search parameters which may be chained to the containing
	// search parameter. Chained parameters may be added to search parameters of type
	// reference and specify that resources will only be returned if they contain a
	// reference to a resource which matches the chained parameter value. Values for this
	// field should be drawn from SearchParameter.code for a parameter on the target
	// resource type.
	Chain []string `json:"chain"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// Extensions for modifier
	Modifier_ext []*Element `json:"_modifier"`
	// Extensions for comparator
	Comparator_ext []*Element `json:"_comparator"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Extensions for target
	Target_ext []*Element `json:"_target"`
	// Comparators supported for the search parameter.
	Comparator []SearchParameterComparator `json:"comparator"`
	// The identifier that is used to identify this version of the search parameter when it
	// is referenced in a specification, model, design or instance. This is an arbitrary
	// value managed by the search parameter author and is not expected to be globally
	// unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is
	// not available. There is also no expectation that versions can be placed in a
	// lexicographical sequence.
	Version string `json:"version"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// Extensions for multipleAnd
	MultipleAnd_ext *Element `json:"_multipleAnd"`
	// A modifier supported for the search parameter.
	Modifier []SearchParameterModifier `json:"modifier"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The base resource type(s) that this search parameter can be used against.
	Base []string `json:"base"`
	// An XPath expression that returns a set of elements for the search parameter.
	Xpath string `json:"xpath"`
	// Extensions for xpathUsage
	XpathUsage_ext *Element `json:"_xpathUsage"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate search parameter instances.
	UseContext []*UsageContext `json:"useContext"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// An absolute URI that is used to identify this search parameter when it is referenced
	// in a specification, model, design or an instance; also called its canonical
	// identifier. This SHOULD be globally unique and SHOULD be a literal address at which
	// at which an authoritative instance of this search parameter is (or will be)
	// published. This URL can be the target of a canonical reference. It SHALL remain the
	// same when the search parameter is stored on different servers.
	Url string `json:"url"`
	// The date  (and optionally time) when the search parameter was published. The date
	// must change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the search
	// parameter changes.
	Date string `json:"date"`
	// Extensions for base
	Base_ext []*Element `json:"_base"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Where this search parameter is originally defined. If a derivedFrom is provided,
	// then the details in the search parameter must be consistent with the definition from
	// which it is defined. i.e. the parameter should have the same meaning, and (usually)
	// the functionality should be a proper subset of the underlying search parameter.
	DerivedFrom string `json:"derivedFrom"`
	// Types of resource (if a resource is referenced).
	Target []string `json:"target"`
	// Explanation of why this search parameter is needed and why it has been designed as
	// it has.
	Purpose string `json:"purpose"`
}

func (t *SearchParameter) ResourceType() string {
	return "SearchParameter"
}
func (t *SearchParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		SearchParameter
		ResourceType string `json:"resourceType"`
	}{
		SearchParameter: *t,
		ResourceType:    t.ResourceType(),
	})
}

type SearchParameterComparator string
type SearchParameterModifier string
type SearchParameterStatus string
type SearchParameterXpathUsage string
type SearchParameterType string

const (
	SearchParameterStatusDraft        SearchParameterStatus     = "draft"
	SearchParameterStatusActive       SearchParameterStatus     = "active"
	SearchParameterStatusRetired      SearchParameterStatus     = "retired"
	SearchParameterStatusUnknown      SearchParameterStatus     = "unknown"
	SearchParameterXpathUsageNormal   SearchParameterXpathUsage = "normal"
	SearchParameterXpathUsagePhonetic SearchParameterXpathUsage = "phonetic"
	SearchParameterXpathUsageNearby   SearchParameterXpathUsage = "nearby"
	SearchParameterXpathUsageDistance SearchParameterXpathUsage = "distance"
	SearchParameterXpathUsageOther    SearchParameterXpathUsage = "other"
	SearchParameterTypeNumber         SearchParameterType       = "number"
	SearchParameterTypeDate           SearchParameterType       = "date"
	SearchParameterTypeString         SearchParameterType       = "string"
	SearchParameterTypeToken          SearchParameterType       = "token"
	SearchParameterTypeReference      SearchParameterType       = "reference"
	SearchParameterTypeComposite      SearchParameterType       = "composite"
	SearchParameterTypeQuantity       SearchParameterType       = "quantity"
	SearchParameterTypeUri            SearchParameterType       = "uri"
	SearchParameterTypeSpecial        SearchParameterType       = "special"
)

// SupplyRequest is A record of a request for a medication, substance or device used in the healthcare
// setting.
type SupplyRequest struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Category of supply, e.g.  central, non-stock, etc. This is used to support work
	// flows associated with the supply process.
	Category *CodeableConcept `json:"category"`
	// The amount that is being ordered of the indicated item.
	Quantity *Quantity `json:"quantity,omitempty"`
	// Extensions for occurrenceDateTime
	OccurrenceDateTime_ext *Element `json:"_occurrenceDateTime"`
	// Where the supply is expected to come from.
	DeliverFrom *Reference `json:"deliverFrom"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Indicates how quickly this SupplyRequest should be addressed with respect to other
	// requests.
	Priority string `json:"priority"`
	// The item that is requested to be supplied. This is either a link to a resource
	// representing the details of the item or a code that identifies the item from a known
	// list.
	ItemCodeableConcept *CodeableConcept `json:"itemCodeableConcept"`
	// When the request should be fulfilled.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	OccurrenceDateTime string `json:"occurrenceDateTime"`
	// The reason why the supply item was requested.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// When the request should be fulfilled.
	OccurrencePeriod *Period `json:"occurrencePeriod"`
	// When the request was made.
	AuthoredOn string `json:"authoredOn"`
	// Who is intended to fulfill the request.
	Supplier []*Reference `json:"supplier"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The item that is requested to be supplied. This is either a link to a resource
	// representing the details of the item or a code that identifies the item from a known
	// list.
	ItemReference *Reference `json:"itemReference"`
	// Specific parameters for the ordered item.  For example, the size of the indicated
	// item.
	Parameter []*SupplyRequest_Parameter `json:"parameter"`
	// When the request should be fulfilled.
	OccurrenceTiming *Timing `json:"occurrenceTiming"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Status of the supply request.
	Status SupplyRequestStatus `json:"status"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The device, practitioner, etc. who initiated the request.
	Requester *Reference `json:"requester"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for priority
	Priority_ext *Element `json:"_priority"`
	// Where the supply is destined to go.
	DeliverTo *Reference `json:"deliverTo"`
	// Business identifiers assigned to this SupplyRequest by the author and/or other
	// systems. These identifiers remain constant as the resource is updated and propagates
	// from server to server.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for authoredOn
	AuthoredOn_ext *Element `json:"_authoredOn"`
	// The reason why the supply item was requested.
	ReasonReference []*Reference `json:"reasonReference"`
}

func (t *SupplyRequest) ResourceType() string {
	return "SupplyRequest"
}
func (t *SupplyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		SupplyRequest
		ResourceType string `json:"resourceType"`
	}{
		SupplyRequest: *t,
		ResourceType:  t.ResourceType(),
	})
}

type SupplyRequestStatus string

const (
	SupplyRequestStatusDraft          SupplyRequestStatus = "draft"
	SupplyRequestStatusActive         SupplyRequestStatus = "active"
	SupplyRequestStatusSuspended      SupplyRequestStatus = "suspended"
	SupplyRequestStatusCancelled      SupplyRequestStatus = "cancelled"
	SupplyRequestStatusCompleted      SupplyRequestStatus = "completed"
	SupplyRequestStatusEnteredInError SupplyRequestStatus = "entered-in-error"
	SupplyRequestStatusUnknown        SupplyRequestStatus = "unknown"
)

// RiskEvidenceSynthesis is The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a
// population plus exposure state where the risk estimate is derived from a combination
// of research studies.
type RiskEvidenceSynthesis struct {
	// The date  (and optionally time) when the risk evidence synthesis was published. The
	// date must change when the business version changes and it must change if the status
	// code changes. In addition, it should change when the substantive content of the risk
	// evidence synthesis changes.
	Date string `json:"date"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for lastReviewDate
	LastReviewDate_ext *Element `json:"_lastReviewDate"`
	// An individual or organization responsible for officially endorsing the content for
	// use in some setting.
	Endorser []*ContactDetail `json:"endorser"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for approvalDate
	ApprovalDate_ext *Element `json:"_approvalDate"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The status of this risk evidence synthesis. Enables tracking the life-cycle of the
	// content.
	Status RiskEvidenceSynthesisStatus `json:"status"`
	// The period during which the risk evidence synthesis content was or is planned to be
	// in active use.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate risk evidence synthesis instances.
	UseContext []*UsageContext `json:"useContext"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// A formal identifier that is used to identify this risk evidence synthesis when it is
	// represented in other formats, or referenced in a specification, model, design or an
	// instance.
	Identifier []*Identifier `json:"identifier"`
	// The identifier that is used to identify this version of the risk evidence synthesis
	// when it is referenced in a specification, model, design or instance. This is an
	// arbitrary value managed by the risk evidence synthesis author and is not expected to
	// be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
	// managed version is not available. There is also no expectation that versions can be
	// placed in a lexicographical sequence.
	Version string `json:"version"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// The date on which the resource content was approved by the publisher. Approval
	// happens once when the content is officially approved for usage.
	ApprovalDate string `json:"approvalDate"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// A reference to a EvidenceVariable resource that defines the exposure for the
	// research.
	Exposure *Reference `json:"exposure"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The name of the organization or individual that published the risk evidence
	// synthesis.
	Publisher string `json:"publisher"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// Related artifacts such as additional documentation, justification, or bibliographic
	// references.
	RelatedArtifact []*RelatedArtifact `json:"relatedArtifact"`
	// A reference to a EvidenceVariable resource that defines the population for the
	// research.
	Population *Reference `json:"population,omitempty"`
	// A description of the size of the sample involved in the synthesis.
	SampleSize *RiskEvidenceSynthesis_SampleSize `json:"sampleSize"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate string `json:"lastReviewDate"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A short, descriptive, user-friendly title for the risk evidence synthesis.
	Title string `json:"title"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// A copyright statement relating to the risk evidence synthesis and/or its contents.
	// Copyright statements are generally legal restrictions on the use and publishing of
	// the risk evidence synthesis.
	Copyright string `json:"copyright"`
	// Descriptive topics related to the content of the RiskEvidenceSynthesis. Topics
	// provide a high-level categorization grouping types of EffectEvidenceSynthesiss that
	// can be useful for filtering and searching.
	Topic []*CodeableConcept `json:"topic"`
	// An individiual or organization primarily involved in the creation and maintenance of
	// the content.
	Author []*ContactDetail `json:"author"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A legal or geographic region in which the risk evidence synthesis is intended to be
	// used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// An individual or organization primarily responsible for review of some aspect of the
	// content.
	Reviewer []*ContactDetail `json:"reviewer"`
	// An absolute URI that is used to identify this risk evidence synthesis when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal address
	// at which at which an authoritative instance of this risk evidence synthesis is (or
	// will be) published. This URL can be the target of a canonical reference. It SHALL
	// remain the same when the risk evidence synthesis is stored on different servers.
	Url string `json:"url"`
	// A human-readable string to clarify or explain concepts about the resource.
	Note []*Annotation `json:"note"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A free text natural language description of the risk evidence synthesis from a
	// consumer's perspective.
	Description string `json:"description"`
	// A reference to a EvidenceVariable resomece that defines the outcome for the research.
	Outcome *Reference `json:"outcome,omitempty"`
	// Type of study eg randomized trial.
	StudyType *CodeableConcept `json:"studyType"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// An individual or organization primarily responsible for internal coherence of the
	// content.
	Editor []*ContactDetail `json:"editor"`
	// Type of synthesis eg meta-analysis.
	SynthesisType *CodeableConcept `json:"synthesisType"`
	// A natural language name identifying the risk evidence synthesis. This name should be
	// usable as an identifier for the module by machine processing applications such as
	// code generation.
	Name string `json:"name"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The estimated risk of the outcome.
	RiskEstimate *RiskEvidenceSynthesis_RiskEstimate `json:"riskEstimate"`
	// A description of the certainty of the risk estimate.
	Certainty []*RiskEvidenceSynthesis_Certainty `json:"certainty"`
}

func (t *RiskEvidenceSynthesis) ResourceType() string {
	return "RiskEvidenceSynthesis"
}
func (t *RiskEvidenceSynthesis) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		RiskEvidenceSynthesis
		ResourceType string `json:"resourceType"`
	}{
		RiskEvidenceSynthesis: *t,
		ResourceType:          t.ResourceType(),
	})
}

type RiskEvidenceSynthesisStatus string

const (
	RiskEvidenceSynthesisStatusDraft   RiskEvidenceSynthesisStatus = "draft"
	RiskEvidenceSynthesisStatusActive  RiskEvidenceSynthesisStatus = "active"
	RiskEvidenceSynthesisStatusRetired RiskEvidenceSynthesisStatus = "retired"
	RiskEvidenceSynthesisStatusUnknown RiskEvidenceSynthesisStatus = "unknown"
)

// SpecimenDefinition is A kind of specimen with associated set of requirements.
type SpecimenDefinition struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for timeAspect
	TimeAspect_ext *Element `json:"_timeAspect"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The kind of material to be collected.
	TypeCollected *CodeableConcept `json:"typeCollected"`
	// The action to be performed for collecting the specimen.
	Collection []*CodeableConcept `json:"collection"`
	// Specimen conditioned in a container as expected by the testing laboratory.
	TypeTested []*SpecimenDefinition_TypeTested `json:"typeTested"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Time aspect of specimen collection (duration or offset).
	TimeAspect string `json:"timeAspect"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A business identifier associated with the kind of specimen.
	Identifier *Identifier `json:"identifier"`
	// Preparation of the patient for specimen collection.
	PatientPreparation []*CodeableConcept `json:"patientPreparation"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
}

func (t *SpecimenDefinition) ResourceType() string {
	return "SpecimenDefinition"
}
func (t *SpecimenDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		SpecimenDefinition
		ResourceType string `json:"resourceType"`
	}{
		SpecimenDefinition: *t,
		ResourceType:       t.ResourceType(),
	})
}

// TerminologyCapabilities is A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a
// FHIR Terminology Server that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type TerminologyCapabilities struct {
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// A natural language name identifying the terminology capabilities. This name should
	// be usable as an identifier for the module by machine processing applications such as
	// code generation.
	Name string `json:"name"`
	// A free text natural language description of the terminology capabilities from a
	// consumer's perspective. Typically, this is used when the capability statement
	// describes a desired rather than an actual solution, for example as a formal
	// expression of requirements as part of an RFP.
	Description string `json:"description"`
	// Identifies a code system that is supported by the server. If there is a no code
	// system URL, then this declares the general assumptions a client can make about
	// support for any CodeSystem resource.
	CodeSystem []*TerminologyCapabilities_CodeSystem `json:"codeSystem"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// A legal or geographic region in which the terminology capabilities is intended to be
	// used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// Explanation of why this terminology capabilities is needed and why it has been
	// designed as it has.
	Purpose string `json:"purpose"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An absolute URI that is used to identify this terminology capabilities when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal address
	// at which at which an authoritative instance of this terminology capabilities is (or
	// will be) published. This URL can be the target of a canonical reference. It SHALL
	// remain the same when the terminology capabilities is stored on different servers.
	Url string `json:"url"`
	// A Boolean value to indicate that this terminology capabilities is authored for
	// testing purposes (or education/evaluation/marketing) and is not intended to be used
	// for genuine usage.
	Experimental bool `json:"experimental"`
	// Information about the
	// [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
	ValidateCode *TerminologyCapabilities_ValidateCode `json:"validateCode"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The date  (and optionally time) when the terminology capabilities was published. The
	// date must change when the business version changes and it must change if the status
	// code changes. In addition, it should change when the substantive content of the
	// terminology capabilities changes.
	Date string `json:"date"`
	// Extensions for kind
	Kind_ext *Element `json:"_kind"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// A copyright statement relating to the terminology capabilities and/or its contents.
	// Copyright statements are generally legal restrictions on the use and publishing of
	// the terminology capabilities.
	Copyright string `json:"copyright"`
	// The way that this statement is intended to be used, to describe an actual running
	// instance of software, a particular product (kind, not instance of software) or a
	// class of implementation (e.g. a desired purchase).
	Kind string `json:"kind"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The identifier that is used to identify this version of the terminology capabilities
	// when it is referenced in a specification, model, design or instance. This is an
	// arbitrary value managed by the terminology capabilities author and is not expected
	// to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
	// managed version is not available. There is also no expectation that versions can be
	// placed in a lexicographical sequence.
	Version string `json:"version"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Software that is covered by this terminology capability statement.  It is used when
	// the statement describes the capabilities of a particular software version,
	// independent of an installation.
	Software *TerminologyCapabilities_Software `json:"software"`
	// Whether the server supports lockedDate.
	LockedDate bool `json:"lockedDate"`
	// Extensions for lockedDate
	LockedDate_ext *Element `json:"_lockedDate"`
	// The degree to which the server supports the code search parameter on ValueSet, if it
	// is supported.
	CodeSearch TerminologyCapabilitiesCodeSearch `json:"codeSearch"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.
	Expansion *TerminologyCapabilities_Expansion `json:"expansion"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The status of this terminology capabilities. Enables tracking the life-cycle of the
	// content.
	Status TerminologyCapabilitiesStatus `json:"status"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Identifies a specific implementation instance that is described by the terminology
	// capability statement - i.e. a particular installation, rather than the capabilities
	// of a software program.
	Implementation *TerminologyCapabilities_Implementation `json:"implementation"`
	// Information about the [ConceptMap/$translate](conceptmap-operation-translate.html)
	// operation.
	Translation *TerminologyCapabilities_Translation `json:"translation"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for codeSearch
	CodeSearch_ext *Element `json:"_codeSearch"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate terminology capabilities
	// instances.
	UseContext []*UsageContext `json:"useContext"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// Whether the $closure operation is supported.
	Closure *TerminologyCapabilities_Closure `json:"closure"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// A short, descriptive, user-friendly title for the terminology capabilities.
	Title string `json:"title"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// The name of the organization or individual that published the terminology
	// capabilities.
	Publisher string `json:"publisher"`
}

func (t *TerminologyCapabilities) ResourceType() string {
	return "TerminologyCapabilities"
}
func (t *TerminologyCapabilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		TerminologyCapabilities
		ResourceType string `json:"resourceType"`
	}{
		TerminologyCapabilities: *t,
		ResourceType:            t.ResourceType(),
	})
}

type TerminologyCapabilitiesCodeSearch string
type TerminologyCapabilitiesStatus string

const (
	TerminologyCapabilitiesCodeSearchExplicit TerminologyCapabilitiesCodeSearch = "explicit"
	TerminologyCapabilitiesCodeSearchAll      TerminologyCapabilitiesCodeSearch = "all"
	TerminologyCapabilitiesStatusDraft        TerminologyCapabilitiesStatus     = "draft"
	TerminologyCapabilitiesStatusActive       TerminologyCapabilitiesStatus     = "active"
	TerminologyCapabilitiesStatusRetired      TerminologyCapabilitiesStatus     = "retired"
	TerminologyCapabilitiesStatusUnknown      TerminologyCapabilitiesStatus     = "unknown"
)

// TestScript is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript struct {
	// A series of required setup operations before tests are executed.
	Setup *TestScript_Setup `json:"setup"`
	// The date  (and optionally time) when the test script was published. The date must
	// change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the test
	// script changes.
	Date string `json:"date"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// An abstract server used in operations within this test script in the destination
	// element.
	Destination []*TestScript_Destination `json:"destination"`
	// Reference to the profile to be used for validation.
	Profile []*Reference `json:"profile"`
	// Variable is set based either on element value in response body or on header field
	// value in the response headers.
	Variable []*TestScript_Variable `json:"variable"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Explanation of why this test script is needed and why it has been designed as it has.
	Purpose string `json:"purpose"`
	// An abstract server used in operations within this test script in the origin element.
	Origin []*TestScript_Origin `json:"origin"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate test script instances.
	UseContext []*UsageContext `json:"useContext"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// A free text natural language description of the test script from a consumer's
	// perspective.
	Description string `json:"description"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// A copyright statement relating to the test script and/or its contents. Copyright
	// statements are generally legal restrictions on the use and publishing of the test
	// script.
	Copyright string `json:"copyright"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The identifier that is used to identify this version of the test script when it is
	// referenced in a specification, model, design or instance. This is an arbitrary value
	// managed by the test script author and is not expected to be globally unique. For
	// example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not
	// available. There is also no expectation that versions can be placed in a
	// lexicographical sequence.
	Version string `json:"version"`
	// A Boolean value to indicate that this test script is authored for testing purposes
	// (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Experimental bool `json:"experimental"`
	// A series of operations required to clean up after all the tests are executed
	// (successfully or otherwise).
	Teardown *TestScript_Teardown `json:"teardown"`
	// The status of this test script. Enables tracking the life-cycle of the content.
	Status TestScriptStatus `json:"status"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// A legal or geographic region in which the test script is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A formal identifier that is used to identify this test script when it is represented
	// in other formats, or referenced in a specification, model, design or an instance.
	Identifier *Identifier `json:"identifier"`
	// A short, descriptive, user-friendly title for the test script.
	Title string `json:"title"`
	// A test in this script.
	Test []*TestScript_Test `json:"test"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The name of the organization or individual that published the test script.
	Publisher string `json:"publisher"`
	// The required capability must exist and are assumed to function correctly on the FHIR
	// server being tested.
	Metadata *TestScript_Metadata `json:"metadata"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// An absolute URI that is used to identify this test script when it is referenced in a
	// specification, model, design or an instance; also called its canonical identifier.
	// This SHOULD be globally unique and SHOULD be a literal address at which at which an
	// authoritative instance of this test script is (or will be) published. This URL can
	// be the target of a canonical reference. It SHALL remain the same when the test
	// script is stored on different servers.
	Url string `json:"url"`
	// A natural language name identifying the test script. This name should be usable as
	// an identifier for the module by machine processing applications such as code
	// generation.
	Name string `json:"name"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Fixture in the test script - by reference (uri). All fixtures are required for the
	// test script to execute.
	Fixture []*TestScript_Fixture `json:"fixture"`
}

func (t *TestScript) ResourceType() string {
	return "TestScript"
}
func (t *TestScript) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		TestScript
		ResourceType string `json:"resourceType"`
	}{
		TestScript:   *t,
		ResourceType: t.ResourceType(),
	})
}

type TestScriptStatus string

const (
	TestScriptStatusDraft   TestScriptStatus = "draft"
	TestScriptStatusActive  TestScriptStatus = "active"
	TestScriptStatusRetired TestScriptStatus = "retired"
	TestScriptStatusUnknown TestScriptStatus = "unknown"
)

// AllergyIntolerance is Risk of harmful or undesirable, physiological response which is unique to an
// individual and associated with exposure to a substance.
type AllergyIntolerance struct {
	// Business identifiers assigned to this AllergyIntolerance by the performer or other
	// systems which remain constant as the resource is updated and propagates from server
	// to server.
	Identifier []*Identifier `json:"identifier"`
	// The clinical status of the allergy or intolerance.
	ClinicalStatus *CodeableConcept `json:"clinicalStatus"`
	// Category of the identified substance.
	Category []AllergyIntoleranceCategory `json:"category"`
	// The patient who has the allergy or intolerance.
	Patient *Reference `json:"patient,omitempty"`
	// Extensions for onsetString
	OnsetString_ext *Element `json:"_onsetString"`
	// The recordedDate represents when this particular AllergyIntolerance record was
	// created in the system, which is often a system-generated date.
	RecordedDate string `json:"recordedDate"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Estimate of the potential clinical harm, or seriousness, of the reaction to the
	// identified substance.
	Criticality AllergyIntoleranceCriticality `json:"criticality"`
	// Extensions for criticality
	Criticality_ext *Element `json:"_criticality"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Additional narrative about the propensity for the Adverse Reaction, not captured in
	// other fields.
	Note []*Annotation `json:"note"`
	// Extensions for category
	Category_ext []*Element `json:"_category"`
	// The encounter when the allergy or intolerance was asserted.
	Encounter *Reference `json:"encounter"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was
	// identified.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	OnsetDateTime string `json:"onsetDateTime"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Code for an allergy or intolerance statement (either a positive or a
	// negated/excluded statement).  This may be a code for a substance or pharmaceutical
	// product that is considered to be responsible for the adverse reaction risk (e.g.,
	// "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a
	// negated/excluded code for a specific substance or class (e.g., "No latex allergy")
	// or a general or categorical negated statement (e.g.,  "No known allergy", "No known
	// drug allergies").  Note: the substance for a specific reaction may be different from
	// the substance identified as the cause of the risk, but it must be consistent with
	// it. For instance, it may be a more specific substance (e.g. a brand medication) or a
	// composite product that includes the identified substance. It must be clinically safe
	// to only process the 'code' and ignore the 'reaction.substance'.  If a receiving
	// system is unable to confirm that AllergyIntolerance.reaction.substance falls within
	// the semantic scope of AllergyIntolerance.code, then the receiving system should
	// ignore AllergyIntolerance.reaction.substance.
	Code *CodeableConcept `json:"code"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was
	// identified.
	OnsetPeriod *Period `json:"onsetPeriod"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was
	// identified.
	OnsetRange *Range `json:"onsetRange"`
	// Details about each adverse reaction event linked to exposure to the identified
	// substance.
	Reaction []*AllergyIntolerance_Reaction `json:"reaction"`
	// Individual who recorded the record and takes responsibility for its content.
	Recorder *Reference `json:"recorder"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Assertion about certainty associated with the propensity, or potential risk, of a
	// reaction to the identified substance (including pharmaceutical product).
	VerificationStatus *CodeableConcept `json:"verificationStatus"`
	// Extensions for onsetDateTime
	OnsetDateTime_ext *Element `json:"_onsetDateTime"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was
	// identified.
	OnsetAge *Age `json:"onsetAge"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was
	// identified.
	// pattern ^[ \r\n\t\S]+$
	OnsetString string `json:"onsetString"`
	// Extensions for recordedDate
	RecordedDate_ext *Element `json:"_recordedDate"`
	// Extensions for lastOccurrence
	LastOccurrence_ext *Element `json:"_lastOccurrence"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The source of the information about the allergy that is recorded.
	Asserter *Reference `json:"asserter"`
	// Represents the date and/or time of the last known occurrence of a reaction event.
	LastOccurrence string `json:"lastOccurrence"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Identification of the underlying physiological mechanism for the reaction risk.
	Type AllergyIntoleranceType `json:"type"`
}

func (t *AllergyIntolerance) ResourceType() string {
	return "AllergyIntolerance"
}
func (t *AllergyIntolerance) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		AllergyIntolerance
		ResourceType string `json:"resourceType"`
	}{
		AllergyIntolerance: *t,
		ResourceType:       t.ResourceType(),
	})
}

type AllergyIntoleranceCategory string
type AllergyIntoleranceCriticality string
type AllergyIntoleranceType string

const (
	AllergyIntoleranceCriticalityLow            AllergyIntoleranceCriticality = "low"
	AllergyIntoleranceCriticalityHigh           AllergyIntoleranceCriticality = "high"
	AllergyIntoleranceCriticalityUnableToAssess AllergyIntoleranceCriticality = "unable-to-assess"
	AllergyIntoleranceTypeAllergy               AllergyIntoleranceType        = "allergy"
	AllergyIntoleranceTypeIntolerance           AllergyIntoleranceType        = "intolerance"
)

// ExplanationOfBenefit is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit struct {
	// This indicates the relative order of a series of EOBs related to different coverages
	// for the same suite of services.
	Precedence uint64 `json:"precedence"`
	// Financial instruments for reimbursement for the health care products and services
	// specified on the claim.
	Insurance []*ExplanationOfBenefit_Insurance `json:"insurance,omitempty"`
	// A claim line. Either a simple (a product or service) or a 'group' of details which
	// can also be a simple items or groups of sub-details.
	Item []*ExplanationOfBenefit_Item `json:"item"`
	// Payment details for the adjudication of the claim.
	Payment *ExplanationOfBenefit_Payment `json:"payment"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A code, used only on a response to a preauthorization, to indicate whether the
	// benefits payable have been reserved and for whom.
	FundsReserve *CodeableConcept `json:"fundsReserve"`
	// The adjudication results which are presented at the header level rather than at the
	// line-item or add-item levels.
	Adjudication []*ExplanationOfBenefit_Adjudication `json:"adjudication"`
	// The business identifier for the instance of the adjudication response: claim,
	// predetermination or preauthorization response.
	ClaimResponse *Reference `json:"claimResponse"`
	// Information about diagnoses relevant to the claim items.
	Diagnosis []*ExplanationOfBenefit_Diagnosis `json:"diagnosis"`
	// Details of a accident which resulted in injuries which required the products and
	// services listed in the claim.
	Accident *ExplanationOfBenefit_Accident `json:"accident"`
	// A finer grained suite of claim type codes which may convey additional information
	// such as Inpatient vs Outpatient and/or a specialty service.
	SubType *CodeableConcept `json:"subType"`
	// The members of the team who provided the products and services.
	CareTeam []*ExplanationOfBenefit_CareTeam `json:"careTeam"`
	// A unique identifier assigned to this explanation of benefit.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for created
	Created_ext *Element `json:"_created"`
	// The provider-required urgency of processing the request. Typical values include:
	// stat, routine deferred.
	Priority *CodeableConcept `json:"priority"`
	// A code to indicate whether the nature of the request is: to request adjudication of
	// products and services previously rendered; or requesting authorization and
	// adjudication for provision in the future; or requesting the non-binding adjudication
	// of the listed products and services which could be provided in the future.
	Use string `json:"use"`
	// The provider which is responsible for the claim, predetermination or
	// preauthorization.
	Provider *Reference `json:"provider,omitempty"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
	Type *CodeableConcept `json:"type,omitempty"`
	// Categorized monetary totals for the adjudication.
	Total []*ExplanationOfBenefit_Total `json:"total"`
	// The status of the resource instance.
	Status ExplanationOfBenefitStatus `json:"status"`
	// Individual who created the claim, predetermination or preauthorization.
	Enterer *Reference `json:"enterer"`
	// Original prescription which has been superseded by this prescription to support the
	// dispensing of pharmacy services, medications or products.
	OriginalPrescription *Reference `json:"originalPrescription"`
	// A human readable description of the status of the adjudication.
	Disposition string `json:"disposition"`
	// The party responsible for authorization, adjudication and reimbursement.
	Insurer *Reference `json:"insurer,omitempty"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for use
	Use_ext *Element `json:"_use"`
	// The period for which charges are being submitted.
	BillablePeriod *Period `json:"billablePeriod"`
	// Procedures performed on the patient relevant to the billing items with the claim.
	Procedure []*ExplanationOfBenefit_Procedure `json:"procedure"`
	// Balance by Benefit Category.
	BenefitBalance []*ExplanationOfBenefit_BenefitBalance `json:"benefitBalance"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The timeframe during which the supplied preauthorization reference may be quoted on
	// claims to obtain the adjudication as provided.
	PreAuthRefPeriod []*Period `json:"preAuthRefPeriod"`
	// The first-tier service adjudications for payor added product or service lines.
	AddItem []*ExplanationOfBenefit_AddItem `json:"addItem"`
	// Extensions for outcome
	Outcome_ext *Element `json:"_outcome"`
	// A code for the form to be used for printing the content.
	FormCode *CodeableConcept `json:"formCode"`
	// The business identifier for the instance of the adjudication request: claim
	// predetermination or preauthorization.
	Claim *Reference `json:"claim"`
	// Extensions for precedence
	Precedence_ext *Element `json:"_precedence"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The party to be reimbursed for cost of the products and services according to the
	// terms of the policy.
	Payee *ExplanationOfBenefit_Payee `json:"payee"`
	// A reference to a referral resource.
	Referral *Reference `json:"referral"`
	// The actual form, by reference or inclusion, for printing the content or an EOB.
	Form *Attachment `json:"form"`
	// The term of the benefits documented in this response.
	BenefitPeriod *Period `json:"benefitPeriod"`
	// The party to whom the professional services and/or products have been supplied or
	// are being considered and for whom actual for forecast reimbursement is sought.
	Patient *Reference `json:"patient,omitempty"`
	// The outcome of the claim, predetermination, or preauthorization processing.
	Outcome string `json:"outcome"`
	// Extensions for disposition
	Disposition_ext *Element `json:"_disposition"`
	// Facility where the services were provided.
	Facility *Reference `json:"facility"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// A code to indicate whether and for whom funds are to be reserved for future claims.
	FundsReserveRequested *CodeableConcept `json:"fundsReserveRequested"`
	// Other claims which are related to this claim such as prior submissions or claims for
	// related services or for the same event.
	Related []*ExplanationOfBenefit_Related `json:"related"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The date this resource was created.
	Created string `json:"created"`
	// Additional information codes regarding exceptions, special considerations, the
	// condition, situation, prior or concurrent issues.
	SupportingInfo []*ExplanationOfBenefit_SupportingInfo `json:"supportingInfo"`
	// A note that describes or explains adjudication results in a human readable form.
	ProcessNote []*ExplanationOfBenefit_ProcessNote `json:"processNote"`
	// Prescription to support the dispensing of pharmacy, device or vision products.
	Prescription *Reference `json:"prescription"`
	// Reference from the Insurer which is used in later communications which refers to
	// this adjudication.
	PreAuthRef []string `json:"preAuthRef"`
	// Extensions for preAuthRef
	PreAuthRef_ext []*Element `json:"_preAuthRef"`
}

func (t *ExplanationOfBenefit) ResourceType() string {
	return "ExplanationOfBenefit"
}
func (t *ExplanationOfBenefit) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ExplanationOfBenefit
		ResourceType string `json:"resourceType"`
	}{
		ExplanationOfBenefit: *t,
		ResourceType:         t.ResourceType(),
	})
}

type ExplanationOfBenefitStatus string

const (
	ExplanationOfBenefitStatusActive         ExplanationOfBenefitStatus = "active"
	ExplanationOfBenefitStatusCancelled      ExplanationOfBenefitStatus = "cancelled"
	ExplanationOfBenefitStatusDraft          ExplanationOfBenefitStatus = "draft"
	ExplanationOfBenefitStatusEnteredInError ExplanationOfBenefitStatus = "entered-in-error"
)

// NutritionOrder is A request to supply a diet, formula feeding (enteral) or oral nutritional supplement
// to a patient/resident.
type NutritionOrder struct {
	// Extensions for dateTime
	DateTime_ext *Element `json:"_dateTime"`
	// Diet given orally in contrast to enteral (tube) feeding.
	OralDiet *NutritionOrder_OralDiet `json:"oralDiet"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for intent
	Intent_ext *Element `json:"_intent"`
	// The practitioner that holds legal responsibility for ordering the diet, nutritional
	// supplement, or formula feedings.
	Orderer *Reference `json:"orderer"`
	// Oral nutritional products given in order to add further nutritional value to the
	// patient's diet.
	Supplement []*NutritionOrder_Supplement `json:"supplement"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma
	// that delivers nutrition distal to the oral cavity.
	EnteralFormula *NutritionOrder_EnteralFormula `json:"enteralFormula"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Identifiers assigned to this order by the order sender or by the order receiver.
	Identifier []*Identifier `json:"identifier"`
	// An encounter that provides additional information about the healthcare context in
	// which this request is made.
	Encounter *Reference `json:"encounter"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for instantiatesUri
	InstantiatesUri_ext []*Element `json:"_instantiatesUri"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Indicates the level of authority/intentionality associated with the NutrionOrder and
	// where the request fits into the workflow chain.
	Intent string `json:"intent"`
	// The date and time that this nutrition order was requested.
	DateTime string `json:"dateTime"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A link to a record of allergies or intolerances  which should be included in the
	// nutrition order.
	AllergyIntolerance []*Reference `json:"allergyIntolerance"`
	// This modifier is used to convey Order-specific modifier about the type of oral food
	// or oral fluids that should not be given. These can be derived from patient
	// allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or
	// Gluten-Free.  While it should not be necessary to repeat allergy or intolerance
	// information captured in the referenced AllergyIntolerance resource in the
	// excludeFoodModifier, this element may be used to convey additional specificity
	// related to foods that should be eliminated from the patient’s diet for any reason.
	//  This modifier applies to the entire nutrition order inclusive of the oral diet,
	// nutritional supplements and enteral formula feedings.
	ExcludeFoodModifier []*CodeableConcept `json:"excludeFoodModifier"`
	// The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition
	// that is adhered to in whole or in part by this NutritionOrder.
	InstantiatesCanonical []string `json:"instantiatesCanonical"`
	// The URL pointing to an externally maintained protocol, guideline, orderset or other
	// definition that is adhered to in whole or in part by this NutritionOrder.
	InstantiatesUri []string `json:"instantiatesUri"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The URL pointing to a protocol, guideline, orderset or other definition that is
	// adhered to in whole or in part by this NutritionOrder.
	Instantiates []string `json:"instantiates"`
	// Extensions for instantiates
	Instantiates_ext []*Element `json:"_instantiates"`
	// The workflow status of the nutrition order/request.
	Status string `json:"status"`
	// The person (patient) who needs the nutrition order for an oral diet, nutritional
	// supplement and/or enteral or formula feeding.
	Patient *Reference `json:"patient,omitempty"`
	// This modifier is used to convey order-specific modifiers about the type of food that
	// should be given. These can be derived from patient allergies, intolerances, or
	// preferences such as Halal, Vegan or Kosher. This modifier applies to the entire
	// nutrition order inclusive of the oral diet, nutritional supplements and enteral
	// formula feedings.
	FoodPreferenceModifier []*CodeableConcept `json:"foodPreferenceModifier"`
	// Comments made about the {{title}} by the requester, performer, subject or other
	// participants.
	Note []*Annotation `json:"note"`
}

func (t *NutritionOrder) ResourceType() string {
	return "NutritionOrder"
}
func (t *NutritionOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		NutritionOrder
		ResourceType string `json:"resourceType"`
	}{
		NutritionOrder: *t,
		ResourceType:   t.ResourceType(),
	})
}

// Subscription is The subscription resource is used to define a push-based subscription from a server
// to another system. Once a subscription is registered with the server, the server
// checks every resource that is created or updated, and if the resource matches the
// given criteria, it sends a message on the defined "channel" so that another system
// can take an appropriate action.
type Subscription struct {
	// The time for the server to turn the subscription off.
	End string `json:"end"`
	// A description of why this subscription is defined.
	Reason string `json:"reason"`
	// A record of the last error that occurred when the server processed a notification.
	Error string `json:"error"`
	// Details where to send notifications when resources are received that meet the
	// criteria.
	Channel *Subscription_Channel `json:"channel,omitempty"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Contact details for a human to contact about the subscription. The primary use of
	// this for system administrator troubleshooting.
	Contact []*ContactPoint `json:"contact"`
	// Extensions for end
	End_ext *Element `json:"_end"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The status of the subscription, which marks the server state for managing the
	// subscription.
	Status SubscriptionStatus `json:"status"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The rules that the server should use to determine when to generate notifications for
	// this subscription.
	Criteria string `json:"criteria"`
	// Extensions for criteria
	Criteria_ext *Element `json:"_criteria"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for reason
	Reason_ext *Element `json:"_reason"`
	// Extensions for error
	Error_ext *Element `json:"_error"`
}

func (t *Subscription) ResourceType() string {
	return "Subscription"
}
func (t *Subscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Subscription
		ResourceType string `json:"resourceType"`
	}{
		Subscription: *t,
		ResourceType: t.ResourceType(),
	})
}

type SubscriptionStatus string

const (
	SubscriptionStatusRequested SubscriptionStatus = "requested"
	SubscriptionStatusActive    SubscriptionStatus = "active"
	SubscriptionStatusError     SubscriptionStatus = "error"
	SubscriptionStatusOff       SubscriptionStatus = "off"
)

// Specimen is A sample to be used for analysis.
type Specimen struct {
	// Time when specimen was received for processing or testing.
	ReceivedTime string `json:"receivedTime"`
	// To communicate any details or issues about the specimen or during the specimen
	// collection. (for example: broken vial, sent with patient, frozen).
	Note []*Annotation `json:"note"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The identifier assigned by the lab when accessioning specimen(s). This is not
	// necessarily the same as the specimen identifier, depending on local lab procedures.
	AccessionIdentifier *Identifier `json:"accessionIdentifier"`
	// Reference to the parent (source) specimen which is used when the specimen was either
	// derived from or a component of another specimen.
	Parent []*Reference `json:"parent"`
	// Details concerning a service request that required a specimen to be collected.
	Request []*Reference `json:"request"`
	// Details concerning the specimen collection.
	Collection *Specimen_Collection `json:"collection"`
	// Details concerning processing and processing steps for the specimen.
	Processing []*Specimen_Processing `json:"processing"`
	// Id for specimen.
	Identifier []*Identifier `json:"identifier"`
	// The kind of material that forms the specimen.
	Type *CodeableConcept `json:"type"`
	// Where the specimen came from. This may be from patient(s), from a location (e.g.,
	// the source of an environmental sample), or a sampling of a substance or a device.
	Subject *Reference `json:"subject"`
	// A mode or state of being that describes the nature of the specimen.
	Condition []*CodeableConcept `json:"condition"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The availability of the specimen.
	Status SpecimenStatus `json:"status"`
	// Extensions for receivedTime
	ReceivedTime_ext *Element `json:"_receivedTime"`
	// The container holding the specimen.  The recursive nature of containers; i.e. blood
	// in tube in tray in rack is not addressed here.
	Container []*Specimen_Container `json:"container"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

func (t *Specimen) ResourceType() string {
	return "Specimen"
}
func (t *Specimen) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Specimen
		ResourceType string `json:"resourceType"`
	}{
		Specimen:     *t,
		ResourceType: t.ResourceType(),
	})
}

type SpecimenStatus string

const (
	SpecimenStatusAvailable      SpecimenStatus = "available"
	SpecimenStatusUnavailable    SpecimenStatus = "unavailable"
	SpecimenStatusUnsatisfactory SpecimenStatus = "unsatisfactory"
	SpecimenStatusEnteredInError SpecimenStatus = "entered-in-error"
)

// BodyStructure is Record details about an anatomical structure.  This resource may be used when a
// coded concept does not provide the necessary detail needed for the use case.
type BodyStructure struct {
	// The kind of structure being represented by the body structure at
	// `BodyStructure.location`.  This can define both normal and abnormal morphologies.
	Morphology *CodeableConcept `json:"morphology"`
	// The anatomical location or region of the specimen, lesion, or body structure.
	Location *CodeableConcept `json:"location"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The person to which the body site belongs.
	Patient *Reference `json:"patient,omitempty"`
	// A summary, characterization or explanation of the body structure.
	Description string `json:"description"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifier for this instance of the anatomical structure.
	Identifier []*Identifier `json:"identifier"`
	// Whether this body site is in active use.
	Active bool `json:"active"`
	// Qualifier to refine the anatomical location.  These include qualifiers for
	// laterality, relative location, directionality, number, and plane.
	LocationQualifier []*CodeableConcept `json:"locationQualifier"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Image or images used to identify a location.
	Image []*Attachment `json:"image"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for active
	Active_ext *Element `json:"_active"`
}

func (t *BodyStructure) ResourceType() string {
	return "BodyStructure"
}
func (t *BodyStructure) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		BodyStructure
		ResourceType string `json:"resourceType"`
	}{
		BodyStructure: *t,
		ResourceType:  t.ResourceType(),
	})
}

// Endpoint is The technical details of an endpoint that can be used for electronic services, such
// as for web services providing XDS.b or a REST endpoint for another FHIR server. This
// may include any security context information.
type Endpoint struct {
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Additional headers / information to send as part of the notification.
	Header []string `json:"header"`
	// Identifier for the organization that is used to identify the endpoint across
	// multiple disparate systems.
	Identifier []*Identifier `json:"identifier"`
	// The interval during which the endpoint is expected to be operational.
	Period *Period `json:"period"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for address
	Address_ext *Element `json:"_address"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A friendly name that this endpoint can be referred to with.
	Name string `json:"name"`
	// The organization that manages this endpoint (even if technically another
	// organization is hosting this in the cloud, it is the organization associated with
	// the data).
	ManagingOrganization *Reference `json:"managingOrganization"`
	// Extensions for header
	Header_ext []*Element `json:"_header"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The mime type to send the payload in - e.g. application/fhir+xml,
	// application/fhir+json. If the mime type is not specified, then the sender could send
	// any content (including no content depending on the connectionType).
	PayloadMimeType []string `json:"payloadMimeType"`
	// The uri that describes the actual end-point to connect to.
	Address string `json:"address"`
	// A coded value that represents the technical details of the usage of this endpoint,
	// such as what WSDLs should be used in what way. (e.g. XDS.b/DICOM/cds-hook).
	ConnectionType *Coding `json:"connectionType,omitempty"`
	// Contact details for a human to contact about the subscription. The primary use of
	// this for system administrator troubleshooting.
	Contact []*ContactPoint `json:"contact"`
	// The payload type describes the acceptable content that can be communicated on the
	// endpoint.
	PayloadType []*CodeableConcept `json:"payloadType,omitempty"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// active | suspended | error | off | test.
	Status EndpointStatus `json:"status"`
	// Extensions for payloadMimeType
	PayloadMimeType_ext []*Element `json:"_payloadMimeType"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
}

func (t *Endpoint) ResourceType() string {
	return "Endpoint"
}
func (t *Endpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Endpoint
		ResourceType string `json:"resourceType"`
	}{
		Endpoint:     *t,
		ResourceType: t.ResourceType(),
	})
}

type EndpointStatus string

const (
	EndpointStatusActive         EndpointStatus = "active"
	EndpointStatusSuspended      EndpointStatus = "suspended"
	EndpointStatusError          EndpointStatus = "error"
	EndpointStatusOff            EndpointStatus = "off"
	EndpointStatusEnteredInError EndpointStatus = "entered-in-error"
	EndpointStatusTest           EndpointStatus = "test"
)

// MedicationStatement is A record of a medication that is being consumed by a patient.   A
// MedicationStatement may indicate that the patient may be taking the medication now
// or has taken the medication in the past or will be taking the medication in the
// future.  The source of this information can be the patient, significant other (such
// as a family member or spouse), or a clinician.  A common scenario where this
// information is captured is during the history taking process during a patient visit
// or stay.   The medication information may come from sources such as the patient's
// memory, from a prescription bottle,  or from a list of medications the patient,
// clinician or other party maintains.
//
// The primary difference between a medication statement and a medication
// administration is that the medication administration has complete administration
// information and is based on actual administration information from the person who
// administered the medication.  A medication statement is often, if not always, less
// specific.  There is no required date/time when the medication was administered, in
// fact we only know that a source has reported the patient is taking this medication,
// where details such as time, quantity, or rate or even medication product may be
// incomplete or missing or less precise.  As stated earlier, the medication statement
// information may come from the patient's memory, from a prescription bottle or from a
// list of medications the patient, clinician or other party maintains.  Medication
// administration is more formal and is not missing detailed information.
type MedicationStatement struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The person or organization that provided the information about the taking of this
	// medication. Note: Use derivedFrom when a MedicationStatement is derived from other
	// resources, e.g. Claim or MedicationRequest.
	InformationSource *Reference `json:"informationSource"`
	// The encounter or episode of care that establishes the context for this
	// MedicationStatement.
	Context *Reference `json:"context"`
	// Allows linking the MedicationStatement to the underlying MedicationRequest, or to
	// other information that supports or is used to derive the MedicationStatement.
	DerivedFrom []*Reference `json:"derivedFrom"`
	// Identifies the medication being administered. This is either a link to a resource
	// representing the details of the medication or a simple attribute carrying a code
	// that identifies the medication from a known list of medications.
	MedicationReference *Reference `json:"medicationReference"`
	// Extensions for dateAsserted
	DateAsserted_ext *Element `json:"_dateAsserted"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A plan, proposal or order that is fulfilled in whole or in part by this event.
	BasedOn []*Reference `json:"basedOn"`
	// A larger event of which this particular event is a component or step.
	PartOf []*Reference `json:"partOf"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Indicates how the medication is/was or should be taken by the patient.
	Dosage []*Dosage `json:"dosage"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// A code representing the patient or other source's judgment about the state of the
	// medication used that this statement is about.  Generally, this will be active or
	// completed.
	Status string `json:"status"`
	// The interval of time during which it is being asserted that the patient is/was/will
	// be taking the medication (or was not taking, when the MedicationStatement.taken
	// element is No).
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	EffectiveDateTime string `json:"effectiveDateTime"`
	// Provides extra information about the medication statement that is not conveyed by
	// the other attributes.
	Note []*Annotation `json:"note"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates where the medication is expected to be consumed or administered.
	Category *CodeableConcept `json:"category"`
	// Extensions for effectiveDateTime
	EffectiveDateTime_ext *Element `json:"_effectiveDateTime"`
	// Condition or observation that supports why the medication is being/was taken.
	ReasonReference []*Reference `json:"reasonReference"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Identifiers associated with this Medication Statement that are defined by business
	// processes and/or used to refer to it when a direct URL reference to the resource
	// itself is not appropriate. They are business identifiers assigned to this resource
	// by the performer or other systems and remain constant as the resource is updated and
	// propagates from server to server.
	Identifier []*Identifier `json:"identifier"`
	// Captures the reason for the current state of the MedicationStatement.
	StatusReason []*CodeableConcept `json:"statusReason"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Identifies the medication being administered. This is either a link to a resource
	// representing the details of the medication or a simple attribute carrying a code
	// that identifies the medication from a known list of medications.
	MedicationCodeableConcept *CodeableConcept `json:"medicationCodeableConcept"`
	// The person, animal or group who is/was taking the medication.
	Subject *Reference `json:"subject,omitempty"`
	// The interval of time during which it is being asserted that the patient is/was/will
	// be taking the medication (or was not taking, when the MedicationStatement.taken
	// element is No).
	EffectivePeriod *Period `json:"effectivePeriod"`
	// The date when the medication statement was asserted by the information source.
	DateAsserted string `json:"dateAsserted"`
	// A reason for why the medication is being/was taken.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
}

func (t *MedicationStatement) ResourceType() string {
	return "MedicationStatement"
}
func (t *MedicationStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MedicationStatement
		ResourceType string `json:"resourceType"`
	}{
		MedicationStatement: *t,
		ResourceType:        t.ResourceType(),
	})
}

// MedicinalProductAuthorization is The regulatory authorization of a medicinal product.
type MedicinalProductAuthorization struct {
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The country in which the marketing authorization has been granted.
	Country []*CodeableConcept `json:"country"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The date at which the given status has become applicable.
	StatusDate string `json:"statusDate"`
	// Extensions for statusDate
	StatusDate_ext *Element `json:"_statusDate"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The legal framework against which this authorization is granted.
	LegalBasis *CodeableConcept `json:"legalBasis"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Business identifier for the marketing authorization, as assigned by a regulator.
	Identifier []*Identifier `json:"identifier"`
	// The medicinal product that is being authorized.
	Subject *Reference `json:"subject"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The date when a suspended the marketing or the marketing authorization of the
	// product is anticipated to be restored.
	RestoreDate string `json:"restoreDate"`
	// The beginning of the time period in which the marketing authorization is in the
	// specific status shall be specified A complete date consisting of day, month and year
	// shall be specified using the ISO 8601 date format.
	ValidityPeriod *Period `json:"validityPeriod"`
	// Extensions for dateOfFirstAuthorization
	DateOfFirstAuthorization_ext *Element `json:"_dateOfFirstAuthorization"`
	// Marketing Authorization Holder.
	Holder *Reference `json:"holder"`
	// Authorization in areas within a country.
	JurisdictionalAuthorization []*MedicinalProductAuthorization_JurisdictionalAuthorization `json:"jurisdictionalAuthorization"`
	// Extensions for internationalBirthDate
	InternationalBirthDate_ext *Element `json:"_internationalBirthDate"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The status of the marketing authorization.
	Status *CodeableConcept `json:"status"`
	// Extensions for restoreDate
	RestoreDate_ext *Element `json:"_restoreDate"`
	// A period of time after authorization before generic product applicatiosn can be
	// submitted.
	DataExclusivityPeriod *Period `json:"dataExclusivityPeriod"`
	// Date of first marketing authorization for a company's new medicinal product in any
	// country in the World.
	InternationalBirthDate string `json:"internationalBirthDate"`
	// Medicines Regulatory Agency.
	Regulator *Reference `json:"regulator"`
	// Jurisdiction within a country.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// The date when the first authorization was granted by a Medicines Regulatory Agency.
	DateOfFirstAuthorization string `json:"dateOfFirstAuthorization"`
	// The regulatory procedure for granting or amending a marketing authorization.
	Procedure *MedicinalProductAuthorization_Procedure `json:"procedure"`
}

func (t *MedicinalProductAuthorization) ResourceType() string {
	return "MedicinalProductAuthorization"
}
func (t *MedicinalProductAuthorization) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MedicinalProductAuthorization
		ResourceType string `json:"resourceType"`
	}{
		MedicinalProductAuthorization: *t,
		ResourceType:                  t.ResourceType(),
	})
}

// Substance is A homogeneous material with a definite composition.
type Substance struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A description of the substance - its appearance, handling requirements, and other
	// usage notes.
	Description string `json:"description"`
	// A substance can be composed of other substances.
	Ingredient []*Substance_Ingredient `json:"ingredient"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Unique identifier for the substance.
	Identifier []*Identifier `json:"identifier"`
	// A code to indicate if the substance is actively used.
	Status SubstanceStatus `json:"status"`
	// A code (or set of codes) that identify this substance.
	Code *CodeableConcept `json:"code,omitempty"`
	// Substance may be used to describe a kind of substance, or a specific
	// package/container of the substance: an instance.
	Instance []*Substance_Instance `json:"instance"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A code that classifies the general type of substance.  This is used  for searching,
	// sorting and display purposes.
	Category []*CodeableConcept `json:"category"`
}

func (t *Substance) ResourceType() string {
	return "Substance"
}
func (t *Substance) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Substance
		ResourceType string `json:"resourceType"`
	}{
		Substance:    *t,
		ResourceType: t.ResourceType(),
	})
}

type SubstanceStatus string

const (
	SubstanceStatusActive         SubstanceStatus = "active"
	SubstanceStatusInactive       SubstanceStatus = "inactive"
	SubstanceStatusEnteredInError SubstanceStatus = "entered-in-error"
)

// BiologicallyDerivedProduct is A material substance originating from a biological entity intended to be
// transplanted or infused
// into another (possibly the same) biological entity.
type BiologicallyDerivedProduct struct {
	// This records identifiers associated with this biologically derived product instance
	// that are defined by business processes and/or used to refer to it when a direct URL
	// reference to the resource itself is not appropriate (e.g. in CDA documents, or in
	// written / printed documentation).
	Identifier []*Identifier `json:"identifier"`
	// Whether the product is currently available.
	Status BiologicallyDerivedProductStatus `json:"status"`
	// How this product was collected.
	Collection *BiologicallyDerivedProduct_Collection `json:"collection"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Parent product (if any).
	Parent []*Reference `json:"parent"`
	// Any processing of the product during collection that does not change the fundamental
	// nature of the product. For example adding anti-coagulants during the collection of
	// Peripheral Blood Stem Cells.
	Processing []*BiologicallyDerivedProduct_Processing `json:"processing"`
	// Product storage.
	Storage []*BiologicallyDerivedProduct_Storage `json:"storage"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A code that identifies the kind of this biologically derived product (SNOMED Ctcode).
	ProductCode *CodeableConcept `json:"productCode"`
	// Number of discrete units within this product.
	Quantity int64 `json:"quantity"`
	// Extensions for quantity
	Quantity_ext *Element `json:"_quantity"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Broad category of this product.
	ProductCategory BiologicallyDerivedProductProductCategory `json:"productCategory"`
	// Extensions for productCategory
	ProductCategory_ext *Element `json:"_productCategory"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Procedure request to obtain this biologically derived product.
	Request []*Reference `json:"request"`
	// Any manipulation of product post-collection that is intended to alter the product.
	// For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells
	// to make it more suitable for infusion.
	Manipulation *BiologicallyDerivedProduct_Manipulation `json:"manipulation"`
}

func (t *BiologicallyDerivedProduct) ResourceType() string {
	return "BiologicallyDerivedProduct"
}
func (t *BiologicallyDerivedProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		BiologicallyDerivedProduct
		ResourceType string `json:"resourceType"`
	}{
		BiologicallyDerivedProduct: *t,
		ResourceType:               t.ResourceType(),
	})
}

type BiologicallyDerivedProductStatus string
type BiologicallyDerivedProductProductCategory string

const (
	BiologicallyDerivedProductStatusAvailable                BiologicallyDerivedProductStatus          = "available"
	BiologicallyDerivedProductStatusUnavailable              BiologicallyDerivedProductStatus          = "unavailable"
	BiologicallyDerivedProductProductCategoryOrgan           BiologicallyDerivedProductProductCategory = "organ"
	BiologicallyDerivedProductProductCategoryTissue          BiologicallyDerivedProductProductCategory = "tissue"
	BiologicallyDerivedProductProductCategoryFluid           BiologicallyDerivedProductProductCategory = "fluid"
	BiologicallyDerivedProductProductCategoryCells           BiologicallyDerivedProductProductCategory = "cells"
	BiologicallyDerivedProductProductCategoryBiologicalAgent BiologicallyDerivedProductProductCategory = "biologicalAgent"
)

// CommunicationRequest is A request to convey information; e.g. the CDS system proposes that an alert be sent
// to a responsible provider, the CDS system proposes that the public health agency be
// notified about a reportable condition.
type CommunicationRequest struct {
	// The status of the proposal or order.
	Status string `json:"status"`
	// The type of message to be sent such as alert, notification, reminder, instruction,
	// etc.
	Category []*CodeableConcept `json:"category"`
	// The device, individual, or organization who initiated the request and has
	// responsibility for its activation.
	Requester *Reference `json:"requester"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Completed or terminated request(s) whose function is taken by this new request.
	Replaces []*Reference `json:"replaces"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// For draft requests, indicates the date of initial creation.  For requests with other
	// statuses, indicates the date of activation.
	AuthoredOn string `json:"authoredOn"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for priority
	Priority_ext *Element `json:"_priority"`
	// The entity (e.g. person, organization, clinical information system, or device) which
	// is to be the source of the communication.
	Sender *Reference `json:"sender"`
	// Comments made about the request by the requester, sender, recipient, subject or
	// other participants.
	Note []*Annotation `json:"note"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A plan or proposal that is fulfilled in whole or in part by this request.
	BasedOn []*Reference `json:"basedOn"`
	// Captures the reason for the current state of the CommunicationRequest.
	StatusReason *CodeableConcept `json:"statusReason"`
	// The time when this communication is to occur.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	OccurrenceDateTime string `json:"occurrenceDateTime"`
	// The entity (e.g. person, organization, clinical information system, device, group,
	// or care team) which is the intended target of the communication.
	Recipient []*Reference `json:"recipient"`
	// Indicates another resource whose existence justifies this request.
	ReasonReference []*Reference `json:"reasonReference"`
	// Business identifiers assigned to this communication request by the performer or
	// other systems which remain constant as the resource is updated and propagates from
	// server to server.
	Identifier []*Identifier `json:"identifier"`
	// If true indicates that the CommunicationRequest is asking for the specified action
	// to *not* occur.
	DoNotPerform bool `json:"doNotPerform"`
	// The patient or group that is the focus of this communication request.
	Subject *Reference `json:"subject"`
	// Other resources that pertain to this communication request and to which this
	// communication request should be associated.
	About []*Reference `json:"about"`
	// Text, attachment(s), or resource(s) to be communicated to the recipient.
	Payload []*CommunicationRequest_Payload `json:"payload"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The time when this communication is to occur.
	OccurrencePeriod *Period `json:"occurrencePeriod"`
	// Describes why the request is being made in coded or textual form.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Characterizes how quickly the proposed act must be initiated. Includes concepts such
	// as stat, urgent, routine.
	Priority string `json:"priority"`
	// Extensions for authoredOn
	AuthoredOn_ext *Element `json:"_authoredOn"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A shared identifier common to all requests that were authorized more or less
	// simultaneously by a single author, representing the identifier of the requisition,
	// prescription or similar form.
	GroupIdentifier *Identifier `json:"groupIdentifier"`
	// Extensions for doNotPerform
	DoNotPerform_ext *Element `json:"_doNotPerform"`
	// A channel that was used for this communication (e.g. email, fax).
	Medium []*CodeableConcept `json:"medium"`
	// The Encounter during which this CommunicationRequest was created or to which the
	// creation of this record is tightly associated.
	Encounter *Reference `json:"encounter"`
	// Extensions for occurrenceDateTime
	OccurrenceDateTime_ext *Element `json:"_occurrenceDateTime"`
}

func (t *CommunicationRequest) ResourceType() string {
	return "CommunicationRequest"
}
func (t *CommunicationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		CommunicationRequest
		ResourceType string `json:"resourceType"`
	}{
		CommunicationRequest: *t,
		ResourceType:         t.ResourceType(),
	})
}

// MedicationDispense is Indicates that a medication product is to be or has been dispensed for a named
// person/patient.  This includes a description of the medication product (supply)
// provided and the instructions for administering the medication.  The medication
// dispense is the result of a pharmacy system responding to a medication order.
type MedicationDispense struct {
	// Indicates the reason why a dispense was not performed.
	StatusReasonReference *Reference `json:"statusReasonReference"`
	// The encounter or episode of care that establishes the context for this event.
	Context *Reference `json:"context"`
	// The principal physical location where the dispense was performed.
	Location *Reference `json:"location"`
	// Indicates the medication order that is being dispensed against.
	AuthorizingPrescription []*Reference `json:"authorizingPrescription"`
	// The time the dispensed product was provided to the patient or their representative.
	WhenHandedOver string `json:"whenHandedOver"`
	// Indicates whether or not substitution was made as part of the dispense.  In some
	// cases, substitution will be expected but does not happen, in other cases
	// substitution is not expected but does happen.  This block explains what substitution
	// did or did not happen and why.  If nothing is specified, substitution was not done.
	Substitution *MedicationDispense_Substitution `json:"substitution"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for whenPrepared
	WhenPrepared_ext *Element `json:"_whenPrepared"`
	// The time when the dispensed product was packaged and reviewed.
	WhenPrepared string `json:"whenPrepared"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Identifiers associated with this Medication Dispense that are defined by business
	// processes and/or used to refer to it when a direct URL reference to the resource
	// itself is not appropriate. They are business identifiers assigned to this resource
	// by the performer or other systems and remain constant as the resource is updated and
	// propagates from server to server.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Indicates the reason why a dispense was not performed.
	StatusReasonCodeableConcept *CodeableConcept `json:"statusReasonCodeableConcept"`
	// Additional information that supports the medication being dispensed.
	SupportingInformation []*Reference `json:"supportingInformation"`
	// The amount of medication that has been dispensed. Includes unit of measure.
	Quantity *Quantity `json:"quantity"`
	// Extensions for whenHandedOver
	WhenHandedOver_ext *Element `json:"_whenHandedOver"`
	// A summary of the events of interest that have occurred, such as when the dispense
	// was verified.
	EventHistory []*Reference `json:"eventHistory"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Indicates who or what performed the event.
	Performer []*MedicationDispense_Performer `json:"performer"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A link to a resource representing the person or the group to whom the medication
	// will be given.
	Subject *Reference `json:"subject"`
	// Indicates an actual or potential clinical issue with or between one or more active
	// or proposed clinical actions for a patient; e.g. drug-drug interaction, duplicate
	// therapy, dosage alert etc.
	DetectedIssue []*Reference `json:"detectedIssue"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The procedure that trigger the dispense.
	PartOf []*Reference `json:"partOf"`
	// A code specifying the state of the set of dispense events.
	Status string `json:"status"`
	// Identification of the facility/location where the medication was shipped to, as part
	// of the dispense event.
	Destination *Reference `json:"destination"`
	// Identifies the person who picked up the medication.  This will usually be a patient
	// or their caregiver, but some cases exist where it can be a healthcare professional.
	Receiver []*Reference `json:"receiver"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Indicates the type of medication dispense (for example, where the medication is
	// expected to be consumed or administered (i.e. inpatient or outpatient)).
	Category *CodeableConcept `json:"category"`
	// Identifies the medication being administered. This is either a link to a resource
	// representing the details of the medication or a simple attribute carrying a code
	// that identifies the medication from a known list of medications.
	MedicationReference *Reference `json:"medicationReference"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Identifies the medication being administered. This is either a link to a resource
	// representing the details of the medication or a simple attribute carrying a code
	// that identifies the medication from a known list of medications.
	MedicationCodeableConcept *CodeableConcept `json:"medicationCodeableConcept"`
	// Indicates the type of dispensing event that is performed. For example, Trial Fill,
	// Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
	Type *CodeableConcept `json:"type"`
	// The amount of medication expressed as a timing amount.
	DaysSupply *Quantity `json:"daysSupply"`
	// Extra information about the dispense that could not be conveyed in the other
	// attributes.
	Note []*Annotation `json:"note"`
	// Indicates how the medication is to be used by the patient.
	DosageInstruction []*Dosage `json:"dosageInstruction"`
}

func (t *MedicationDispense) ResourceType() string {
	return "MedicationDispense"
}
func (t *MedicationDispense) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MedicationDispense
		ResourceType string `json:"resourceType"`
	}{
		MedicationDispense: *t,
		ResourceType:       t.ResourceType(),
	})
}

// MedicinalProductContraindication is The clinical particulars - indications, contraindications etc. of a medicinal
// product, including for regulatory purposes.
type MedicinalProductContraindication struct {
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Information about the use of the medicinal product in relation to other therapies as
	// part of the indication.
	TherapeuticIndication []*Reference `json:"therapeuticIndication"`
	// Information about the use of the medicinal product in relation to other therapies
	// described as part of the indication.
	OtherTherapy []*MedicinalProductContraindication_OtherTherapy `json:"otherTherapy"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The disease, symptom or procedure for the contraindication.
	Disease *CodeableConcept `json:"disease"`
	// A comorbidity (concurrent condition) or coinfection.
	Comorbidity []*CodeableConcept `json:"comorbidity"`
	// The population group to which this applies.
	Population []*Population `json:"population"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The medication for which this is an indication.
	Subject []*Reference `json:"subject"`
	// The status of the disease or symptom for the contraindication.
	DiseaseStatus *CodeableConcept `json:"diseaseStatus"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

func (t *MedicinalProductContraindication) ResourceType() string {
	return "MedicinalProductContraindication"
}
func (t *MedicinalProductContraindication) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MedicinalProductContraindication
		ResourceType string `json:"resourceType"`
	}{
		MedicinalProductContraindication: *t,
		ResourceType:                     t.ResourceType(),
	})
}

// Observation is Measurements and simple assertions made about a patient, device or other subject.
type Observation struct {
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A larger event of which this particular Observation is a component or step.  For
	// example,  an observation as part of a procedure.
	PartOf []*Reference `json:"partOf"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// The device used to generate the observation data.
	Device *Reference `json:"device"`
	// This observation is a group observation (e.g. a battery, a panel of tests, a set of
	// vital sign measurements) that includes the target as a member of the group.
	HasMember []*Reference `json:"hasMember"`
	// Extensions for effectiveInstant
	EffectiveInstant_ext *Element `json:"_effectiveInstant"`
	// The date and time this version of the observation was made available to providers,
	// typically after the results have been reviewed and verified.
	Issued string `json:"issued"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A plan, proposal or order that is fulfilled in whole or in part by this event.  For
	// example, a MedicationRequest may require a patient to have laboratory test performed
	// before  it is dispensed.
	BasedOn []*Reference `json:"basedOn"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The time or time-period the observed value is asserted as being true. For biological
	// subjects - e.g. human patients - this is usually called the "physiologically
	// relevant time". This is usually either the time of the procedure or of specimen
	// collection, but very often the source of the date/time is not known, only the
	// date/time itself.
	EffectiveTiming *Timing `json:"effectiveTiming"`
	// The time or time-period the observed value is asserted as being true. For biological
	// subjects - e.g. human patients - this is usually called the "physiologically
	// relevant time". This is usually either the time of the procedure or of specimen
	// collection, but very often the source of the date/time is not known, only the
	// date/time itself.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$
	EffectiveInstant string `json:"effectiveInstant"`
	// Provides a reason why the expected value in the element Observation.value[x] is
	// missing.
	DataAbsentReason *CodeableConcept `json:"dataAbsentReason"`
	// The time or time-period the observed value is asserted as being true. For biological
	// subjects - e.g. human patients - this is usually called the "physiologically
	// relevant time". This is usually either the time of the procedure or of specimen
	// collection, but very often the source of the date/time is not known, only the
	// date/time itself.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The healthcare event  (e.g. a patient and healthcare provider interaction) during
	// which this observation is made.
	Encounter *Reference `json:"encounter"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	// pattern ^-?([0]|([1-9][0-9]*))$
	ValueInteger int64 `json:"valueInteger"`
	// Indicates the mechanism used to perform the observation.
	Method *CodeableConcept `json:"method"`
	// Comments about the observation or the results.
	Note []*Annotation `json:"note"`
	// Extensions for valueInteger
	ValueInteger_ext *Element `json:"_valueInteger"`
	// Indicates the site on the subject's body where the observation was made (i.e. the
	// target site).
	BodySite *CodeableConcept `json:"bodySite"`
	// The target resource that represents a measurement from which this observation value
	// is derived. For example, a calculated anion gap or a fetal measurement based on an
	// ultrasound image.
	DerivedFrom []*Reference `json:"derivedFrom"`
	// Extensions for issued
	Issued_ext *Element `json:"_issued"`
	// Extensions for valueDateTime
	ValueDateTime_ext *Element `json:"_valueDateTime"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A unique identifier assigned to this observation.
	Identifier []*Identifier `json:"identifier"`
	// The patient, or group of patients, location, or device this observation is about and
	// into whose record the observation is placed. If the actual focus of the observation
	// is different from the subject (or a sample of, part, or region of the subject), the
	// `focus` element or the `code` itself specifies the actual focus of the observation.
	Subject *Reference `json:"subject"`
	// Some observations have multiple component observations.  These component
	// observations are expressed as separate code value pairs that share the same
	// attributes.  Examples include systolic and diastolic component observations for
	// blood pressure measurement and multiple component observations for genetics
	// observations.
	Component []*Observation_Component `json:"component"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	ValueDateTime string `json:"valueDateTime"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	ValuePeriod *Period `json:"valuePeriod"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	ValueTime string `json:"valueTime"`
	// A code that classifies the general type of observation being made.
	Category []*CodeableConcept `json:"category"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	ValueRange *Range `json:"valueRange"`
	// A categorical assessment of an observation value.  For example, high, low, normal.
	Interpretation []*CodeableConcept `json:"interpretation"`
	// Guidance on how to interpret the value by comparison to a normal or recommended
	// range.  Multiple reference ranges are interpreted as an "OR".   In other words, to
	// represent two distinct target populations, two `referenceRange` elements would be
	// used.
	ReferenceRange []*Observation_ReferenceRange `json:"referenceRange"`
	// Describes what was observed. Sometimes this is called the observation "name".
	Code *CodeableConcept `json:"code,omitempty"`
	// Extensions for effectiveDateTime
	EffectiveDateTime_ext *Element `json:"_effectiveDateTime"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// The time or time-period the observed value is asserted as being true. For biological
	// subjects - e.g. human patients - this is usually called the "physiologically
	// relevant time". This is usually either the time of the procedure or of specimen
	// collection, but very often the source of the date/time is not known, only the
	// date/time itself.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	EffectiveDateTime string `json:"effectiveDateTime"`
	// Extensions for valueTime
	ValueTime_ext *Element `json:"_valueTime"`
	// The specimen that was used when this observation was made.
	Specimen *Reference `json:"specimen"`
	// Who was responsible for asserting the observed value as "true".
	Performer []*Reference `json:"performer"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	ValueSampledData *SampledData `json:"valueSampledData"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The status of the result value.
	Status ObservationStatus `json:"status"`
	// The actual focus of an observation when it is not the patient of record representing
	// something or someone associated with the patient such as a spouse, parent, fetus, or
	// donor. For example, fetus observations in a mother's record.  The focus of an
	// observation could also be an existing condition,  an intervention, the subject's
	// diet,  another observation of the subject,  or a body structure such as tumor or
	// implanted device.   An example use case would be using the Observation resource to
	// capture whether the mother is trained to change her child's tracheostomy tube. In
	// this example, the child is the patient of record and the mother is the focus.
	Focus []*Reference `json:"focus"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	ValueRatio *Ratio `json:"valueRatio"`
}

func (t *Observation) ResourceType() string {
	return "Observation"
}
func (t *Observation) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Observation
		ResourceType string `json:"resourceType"`
	}{
		Observation:  *t,
		ResourceType: t.ResourceType(),
	})
}

type ObservationStatus string

const (
	ObservationStatusRegistered     ObservationStatus = "registered"
	ObservationStatusPreliminary    ObservationStatus = "preliminary"
	ObservationStatusFinal          ObservationStatus = "final"
	ObservationStatusAmended        ObservationStatus = "amended"
	ObservationStatusCorrected      ObservationStatus = "corrected"
	ObservationStatusCancelled      ObservationStatus = "cancelled"
	ObservationStatusEnteredInError ObservationStatus = "entered-in-error"
	ObservationStatusUnknown        ObservationStatus = "unknown"
)

// ResearchSubject is A physical entity which is the primary unit of operational and/or administrative
// interest in a study.
type ResearchSubject struct {
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The dates the subject began and ended their participation in the study.
	Period *Period `json:"period"`
	// Reference to the study the subject is participating in.
	Study *Reference `json:"study,omitempty"`
	// Extensions for actualArm
	ActualArm_ext *Element `json:"_actualArm"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifiers assigned to this research subject for a study.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for assignedArm
	AssignedArm_ext *Element `json:"_assignedArm"`
	// A record of the patient's informed agreement to participate in the study.
	Consent *Reference `json:"consent"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The record of the person or animal who is involved in the study.
	Individual *Reference `json:"individual,omitempty"`
	// The name of the arm in the study the subject is expected to follow as part of this
	// study.
	AssignedArm string `json:"assignedArm"`
	// The name of the arm in the study the subject actually followed as part of this study.
	ActualArm string `json:"actualArm"`
	// The current state of the subject.
	Status ResearchSubjectStatus `json:"status"`
}

func (t *ResearchSubject) ResourceType() string {
	return "ResearchSubject"
}
func (t *ResearchSubject) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ResearchSubject
		ResourceType string `json:"resourceType"`
	}{
		ResearchSubject: *t,
		ResourceType:    t.ResourceType(),
	})
}

type ResearchSubjectStatus string

const (
	ResearchSubjectStatusCandidate           ResearchSubjectStatus = "candidate"
	ResearchSubjectStatusEligible            ResearchSubjectStatus = "eligible"
	ResearchSubjectStatusFollowUp            ResearchSubjectStatus = "follow-up"
	ResearchSubjectStatusIneligible          ResearchSubjectStatus = "ineligible"
	ResearchSubjectStatusNotRegistered       ResearchSubjectStatus = "not-registered"
	ResearchSubjectStatusOffStudy            ResearchSubjectStatus = "off-study"
	ResearchSubjectStatusOnStudy             ResearchSubjectStatus = "on-study"
	ResearchSubjectStatusOnStudyIntervention ResearchSubjectStatus = "on-study-intervention"
	ResearchSubjectStatusOnStudyObservation  ResearchSubjectStatus = "on-study-observation"
	ResearchSubjectStatusPendingOnStudy      ResearchSubjectStatus = "pending-on-study"
	ResearchSubjectStatusPotentialCandidate  ResearchSubjectStatus = "potential-candidate"
	ResearchSubjectStatusScreening           ResearchSubjectStatus = "screening"
	ResearchSubjectStatusWithdrawn           ResearchSubjectStatus = "withdrawn"
)

// Task is A task to be performed.
type Task struct {
	// An identifier that links together multiple tasks and other requests that were
	// created in the same context.
	GroupIdentifier *Identifier `json:"groupIdentifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// An explanation as to why this task is held, failed, was refused, etc.
	StatusReason *CodeableConcept `json:"statusReason"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The business identifier for this task.
	Identifier []*Identifier `json:"identifier"`
	// BasedOn refers to a higher-level authorization that triggered the creation of the
	// task.  It references a "request" resource such as a ServiceRequest,
	// MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the
	// "request" resource the task is seeking to fulfill.  This latter resource is
	// referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a task
	// is created to fulfill a procedureRequest ( = FocusOn ) to collect a specimen from a
	// patient.
	BasedOn []*Reference `json:"basedOn"`
	// Principal physical location where the this task is performed.
	Location *Reference `json:"location"`
	// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations
	// that may be relevant to the Task.
	Insurance []*Reference `json:"insurance"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Indicates how quickly the Task should be addressed with respect to other requests.
	Priority string `json:"priority"`
	// The healthcare event  (e.g. a patient and healthcare provider interaction) during
	// which this task was created.
	Encounter *Reference `json:"encounter"`
	// Extensions for intent
	Intent_ext *Element `json:"_intent"`
	// Extensions for lastModified
	LastModified_ext *Element `json:"_lastModified"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The current status of the task.
	Status TaskStatus `json:"status"`
	// Task that this particular task is part of.
	PartOf []*Reference `json:"partOf"`
	// A name or code (or both) briefly describing what the task involves.
	Code *CodeableConcept `json:"code"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// The request being actioned or the resource being manipulated by this task.
	Focus *Reference `json:"focus"`
	// The kind of participant that should perform the task.
	PerformerType []*CodeableConcept `json:"performerType"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other
	// definition that is adhered to in whole or in part by this Task.
	InstantiatesCanonical string `json:"instantiatesCanonical"`
	// Free-text information captured about the task as it progresses.
	Note []*Annotation `json:"note"`
	// Outputs produced by the Task.
	Output []*Task_Output `json:"output"`
	// A description or code indicating why this task needs to be performed.
	ReasonCode *CodeableConcept `json:"reasonCode"`
	// A resource reference indicating why this task needs to be performed.
	ReasonReference *Reference `json:"reasonReference"`
	// Links to Provenance records for past versions of this Task that identify key state
	// transitions or updates that are likely to be relevant to a user looking at the
	// current version of the task.
	RelevantHistory []*Reference `json:"relevantHistory"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Identifies the time action was first taken against the task (start) and/or the time
	// final action was taken against the task prior to marking it as completed (end).
	ExecutionPeriod *Period `json:"executionPeriod"`
	// The date and time of last modification to this task.
	LastModified string `json:"lastModified"`
	// The entity who benefits from the performance of the service specified in the task
	// (e.g., the patient).
	For *Reference `json:"for"`
	// Extensions for authoredOn
	AuthoredOn_ext *Element `json:"_authoredOn"`
	// Additional information that may be needed in the execution of the task.
	Input []*Task_Input `json:"input"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for priority
	Priority_ext *Element `json:"_priority"`
	// A free-text description of what is to be performed.
	Description string `json:"description"`
	// The creator of the task.
	Requester *Reference `json:"requester"`
	// Individual organization or Device currently responsible for task execution.
	Owner *Reference `json:"owner"`
	// If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is
	// asking for the request to be actioned), this element identifies any limitations on
	// what parts of the referenced request should be actioned.
	Restriction *Task_Restriction `json:"restriction"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Contains business-specific nuances of the business state.
	BusinessStatus *CodeableConcept `json:"businessStatus"`
	// Indicates the "level" of actionability associated with the Task, i.e. i+R[9]Cs this
	// a proposed task, a planned task, an actionable task, etc.
	Intent TaskIntent `json:"intent"`
	// The date and time this task was created.
	AuthoredOn string `json:"authoredOn"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The URL pointing to an *externally* maintained  protocol, guideline, orderset or
	// other definition that is adhered to in whole or in part by this Task.
	InstantiatesUri string `json:"instantiatesUri"`
	// Extensions for instantiatesUri
	InstantiatesUri_ext *Element `json:"_instantiatesUri"`
}

func (t *Task) ResourceType() string {
	return "Task"
}
func (t *Task) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Task
		ResourceType string `json:"resourceType"`
	}{
		Task:         *t,
		ResourceType: t.ResourceType(),
	})
}

type TaskStatus string
type TaskIntent string

const (
	TaskStatusDraft          TaskStatus = "draft"
	TaskStatusRequested      TaskStatus = "requested"
	TaskStatusReceived       TaskStatus = "received"
	TaskStatusAccepted       TaskStatus = "accepted"
	TaskStatusRejected       TaskStatus = "rejected"
	TaskStatusReady          TaskStatus = "ready"
	TaskStatusCancelled      TaskStatus = "cancelled"
	TaskStatusInProgress     TaskStatus = "in-progress"
	TaskStatusOnHold         TaskStatus = "on-hold"
	TaskStatusFailed         TaskStatus = "failed"
	TaskStatusCompleted      TaskStatus = "completed"
	TaskStatusEnteredInError TaskStatus = "entered-in-error"
	TaskIntentUnknown        TaskIntent = "unknown"
	TaskIntentProposal       TaskIntent = "proposal"
	TaskIntentPlan           TaskIntent = "plan"
	TaskIntentOrder          TaskIntent = "order"
	TaskIntentOriginalOrder  TaskIntent = "original-order"
	TaskIntentReflexOrder    TaskIntent = "reflex-order"
	TaskIntentFillerOrder    TaskIntent = "filler-order"
	TaskIntentInstanceOrder  TaskIntent = "instance-order"
	TaskIntentOption         TaskIntent = "option"
)

// DiagnosticReport is The findings and interpretation of diagnostic  tests performed on patients, groups
// of patients, devices, and locations, and/or specimens derived from these. The report
// includes clinical context such as requesting and provider information, and some mix
// of atomic results, images, textual and coded interpretations, and formatted
// representation of diagnostic reports.
type DiagnosticReport struct {
	// One or more codes that represent the summary conclusion (interpretation/impression)
	// of the diagnostic report.
	ConclusionCode []*CodeableConcept `json:"conclusionCode"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The subject of the report. Usually, but not always, this is a patient. However,
	// diagnostic services also perform analyses on specimens collected from a variety of
	// other sources.
	Subject *Reference `json:"subject"`
	// Details about the specimens on which this diagnostic report is based.
	Specimen []*Reference `json:"specimen"`
	// The diagnostic service that is responsible for issuing the report.
	Performer []*Reference `json:"performer"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The time or time-period the observed values are related to. When the subject of the
	// report is a patient, this is usually either the time of the procedure or of specimen
	// collection(s), but very often the source of the date/time is not known, only the
	// date/time itself.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	EffectiveDateTime string `json:"effectiveDateTime"`
	// Extensions for issued
	Issued_ext *Element `json:"_issued"`
	// The time or time-period the observed values are related to. When the subject of the
	// report is a patient, this is usually either the time of the procedure or of specimen
	// collection(s), but very often the source of the date/time is not known, only the
	// date/time itself.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// The date and time that this version of the report was made available to providers,
	// typically after the report was reviewed and verified.
	Issued string `json:"issued"`
	// One or more links to full details of any imaging performed during the diagnostic
	// investigation. Typically, this is imaging performed by DICOM enabled modalities, but
	// this is not required. A fully enabled PACS viewer can use this information to
	// provide views of the source images.
	ImagingStudy []*Reference `json:"imagingStudy"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Details concerning a service requested.
	BasedOn []*Reference `json:"basedOn"`
	// The practitioner or organization that is responsible for the report's conclusions
	// and interpretations.
	ResultsInterpreter []*Reference `json:"resultsInterpreter"`
	// [Observations](observation.html)  that are part of this diagnostic report.
	Result []*Reference `json:"result"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A code or name that describes this diagnostic report.
	Code *CodeableConcept `json:"code,omitempty"`
	// The healthcare event  (e.g. a patient and healthcare provider interaction) which
	// this DiagnosticReport is about.
	Encounter *Reference `json:"encounter"`
	// Extensions for conclusion
	Conclusion_ext *Element `json:"_conclusion"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Concise and clinically contextualized summary conclusion (interpretation/impression)
	// of the diagnostic report.
	Conclusion string `json:"conclusion"`
	// A code that classifies the clinical discipline, department or diagnostic service
	// that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is
	// used for searching, sorting and display purposes.
	Category []*CodeableConcept `json:"category"`
	// Rich text representation of the entire result as issued by the diagnostic service.
	// Multiple formats are allowed but they SHALL be semantically equivalent.
	PresentedForm []*Attachment `json:"presentedForm"`
	// Identifiers assigned to this report by the performer or other systems.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A list of key images associated with this report. The images are generally created
	// during the diagnostic process, and may be directly of the patient, or of treated
	// specimens (i.e. slides of interest).
	Media []*DiagnosticReport_Media `json:"media"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The status of the diagnostic report.
	Status DiagnosticReportStatus `json:"status"`
	// Extensions for effectiveDateTime
	EffectiveDateTime_ext *Element `json:"_effectiveDateTime"`
}

func (t *DiagnosticReport) ResourceType() string {
	return "DiagnosticReport"
}
func (t *DiagnosticReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		DiagnosticReport
		ResourceType string `json:"resourceType"`
	}{
		DiagnosticReport: *t,
		ResourceType:     t.ResourceType(),
	})
}

type DiagnosticReportStatus string

const (
	DiagnosticReportStatusRegistered     DiagnosticReportStatus = "registered"
	DiagnosticReportStatusPartial        DiagnosticReportStatus = "partial"
	DiagnosticReportStatusPreliminary    DiagnosticReportStatus = "preliminary"
	DiagnosticReportStatusFinal          DiagnosticReportStatus = "final"
	DiagnosticReportStatusAmended        DiagnosticReportStatus = "amended"
	DiagnosticReportStatusCorrected      DiagnosticReportStatus = "corrected"
	DiagnosticReportStatusAppended       DiagnosticReportStatus = "appended"
	DiagnosticReportStatusCancelled      DiagnosticReportStatus = "cancelled"
	DiagnosticReportStatusEnteredInError DiagnosticReportStatus = "entered-in-error"
	DiagnosticReportStatusUnknown        DiagnosticReportStatus = "unknown"
)

// ExampleScenario is Example of workflow instance.
type ExampleScenario struct {
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The date  (and optionally time) when the example scenario was published. The date
	// must change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the example
	// scenario changes. (e.g. the 'content logical definition').
	Date string `json:"date"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A Boolean value to indicate that this example scenario is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used for
	// genuine usage.
	Experimental bool `json:"experimental"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate example scenario instances.
	UseContext []*UsageContext `json:"useContext"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// Actor participating in the resource.
	Actor []*ExampleScenario_Actor `json:"actor"`
	// Another nested workflow.
	Workflow []string `json:"workflow"`
	// A copyright statement relating to the example scenario and/or its contents.
	// Copyright statements are generally legal restrictions on the use and publishing of
	// the example scenario.
	Copyright string `json:"copyright"`
	// A formal identifier that is used to identify this example scenario when it is
	// represented in other formats, or referenced in a specification, model, design or an
	// instance.
	Identifier []*Identifier `json:"identifier"`
	// What the example scenario resource is created for. This should not be used to show
	// the business purpose of the scenario itself, but the purpose of documenting a
	// scenario.
	Purpose string `json:"purpose"`
	// Each resource and each version that is present in the workflow.
	Instance []*ExampleScenario_Instance `json:"instance"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The identifier that is used to identify this version of the example scenario when it
	// is referenced in a specification, model, design or instance. This is an arbitrary
	// value managed by the example scenario author and is not expected to be globally
	// unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is
	// not available. There is also no expectation that versions can be placed in a
	// lexicographical sequence.
	Version string `json:"version"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// A legal or geographic region in which the example scenario is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// A natural language name identifying the example scenario. This name should be usable
	// as an identifier for the module by machine processing applications such as code
	// generation.
	Name string `json:"name"`
	// The status of this example scenario. Enables tracking the life-cycle of the content.
	Status ExampleScenarioStatus `json:"status"`
	// Each major process - a group of operations.
	Process []*ExampleScenario_Process `json:"process"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// An absolute URI that is used to identify this example scenario when it is referenced
	// in a specification, model, design or an instance; also called its canonical
	// identifier. This SHOULD be globally unique and SHOULD be a literal address at which
	// at which an authoritative instance of this example scenario is (or will be)
	// published. This URL can be the target of a canonical reference. It SHALL remain the
	// same when the example scenario is stored on different servers.
	Url string `json:"url"`
	// The name of the organization or individual that published the example scenario.
	Publisher string `json:"publisher"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

func (t *ExampleScenario) ResourceType() string {
	return "ExampleScenario"
}
func (t *ExampleScenario) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ExampleScenario
		ResourceType string `json:"resourceType"`
	}{
		ExampleScenario: *t,
		ResourceType:    t.ResourceType(),
	})
}

type ExampleScenarioStatus string

const (
	ExampleScenarioStatusDraft   ExampleScenarioStatus = "draft"
	ExampleScenarioStatusActive  ExampleScenarioStatus = "active"
	ExampleScenarioStatusRetired ExampleScenarioStatus = "retired"
	ExampleScenarioStatusUnknown ExampleScenarioStatus = "unknown"
)

// Goal is Describes the intended objective(s) for a patient, group or organization care, for
// example, weight loss, restoring an activity of daily living, obtaining herd immunity
// via immunization, meeting a process improvement objective, etc.
type Goal struct {
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Identifies when the current status.  I.e. When initially created, when achieved,
	// when cancelled, etc.
	StatusDate string `json:"statusDate"`
	// The identified conditions and other health record elements that are intended to be
	// addressed by the goal.
	Addresses []*Reference `json:"addresses"`
	// Identifies the change (or lack of change) at the point when the status of the goal
	// is assessed.
	OutcomeCode []*CodeableConcept `json:"outcomeCode"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Captures the reason for the current status.
	StatusReason string `json:"statusReason"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Business identifiers assigned to this goal by the performer or other systems which
	// remain constant as the resource is updated and propagates from server to server.
	Identifier []*Identifier `json:"identifier"`
	// The date or event after which the goal should begin being pursued.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	StartDate string `json:"startDate"`
	// The date or event after which the goal should begin being pursued.
	StartCodeableConcept *CodeableConcept `json:"startCodeableConcept"`
	// Extensions for statusDate
	StatusDate_ext *Element `json:"_statusDate"`
	// Indicates a category the goal falls within.
	Category []*CodeableConcept `json:"category"`
	// Extensions for statusReason
	StatusReason_ext *Element `json:"_statusReason"`
	// Human-readable and/or coded description of a specific desired objective of care,
	// such as "control blood pressure" or "negotiate an obstacle course" or "dance with
	// child at wedding".
	Description *CodeableConcept `json:"description,omitempty"`
	// Identifies the patient, group or organization for whom the goal is being established.
	Subject *Reference `json:"subject,omitempty"`
	// Indicates whose goal this is - patient goal, practitioner goal, etc.
	ExpressedBy *Reference `json:"expressedBy"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for startDate
	StartDate_ext *Element `json:"_startDate"`
	// Any comments related to the goal.
	Note []*Annotation `json:"note"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Describes the progression, or lack thereof, towards the goal against the target.
	AchievementStatus *CodeableConcept `json:"achievementStatus"`
	// Details of what's changed (or not changed).
	OutcomeReference []*Reference `json:"outcomeReference"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The state of the goal throughout its lifecycle.
	LifecycleStatus GoalLifecycleStatus `json:"lifecycleStatus"`
	// Extensions for lifecycleStatus
	LifecycleStatus_ext *Element `json:"_lifecycleStatus"`
	// Identifies the mutually agreed level of importance associated with
	// reaching/sustaining the goal.
	Priority *CodeableConcept `json:"priority"`
	// Indicates what should be done by when.
	Target []*Goal_Target `json:"target"`
}

func (t *Goal) ResourceType() string {
	return "Goal"
}
func (t *Goal) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Goal
		ResourceType string `json:"resourceType"`
	}{
		Goal:         *t,
		ResourceType: t.ResourceType(),
	})
}

type GoalLifecycleStatus string

const (
	GoalLifecycleStatusProposed       GoalLifecycleStatus = "proposed"
	GoalLifecycleStatusPlanned        GoalLifecycleStatus = "planned"
	GoalLifecycleStatusAccepted       GoalLifecycleStatus = "accepted"
	GoalLifecycleStatusActive         GoalLifecycleStatus = "active"
	GoalLifecycleStatusOnHold         GoalLifecycleStatus = "on-hold"
	GoalLifecycleStatusCompleted      GoalLifecycleStatus = "completed"
	GoalLifecycleStatusCancelled      GoalLifecycleStatus = "cancelled"
	GoalLifecycleStatusEnteredInError GoalLifecycleStatus = "entered-in-error"
	GoalLifecycleStatusRejected       GoalLifecycleStatus = "rejected"
)

// Person is Demographics and administrative information about a person independent of a specific
// health-related context.
type Person struct {
	// The organization that is the custodian of the person record.
	ManagingOrganization *Reference `json:"managingOrganization"`
	// Link to a resource that concerns the same actual person.
	Link []*Person_Link `json:"link"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for active
	Active_ext *Element `json:"_active"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for gender
	Gender_ext *Element `json:"_gender"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifier for a person within a particular scope.
	Identifier []*Identifier `json:"identifier"`
	// A contact detail for the person, e.g. a telephone number or an email address.
	Telecom []*ContactPoint `json:"telecom"`
	// Administrative Gender.
	Gender PersonGender `json:"gender"`
	// The birth date for the person.
	BirthDate string `json:"birthDate"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// An image that can be displayed as a thumbnail of the person to enhance the
	// identification of the individual.
	Photo *Attachment `json:"photo"`
	// Extensions for birthDate
	BirthDate_ext *Element `json:"_birthDate"`
	// One or more addresses for the person.
	Address []*Address `json:"address"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A name associated with the person.
	Name []*HumanName `json:"name"`
	// Whether this person's record is in active use.
	Active bool `json:"active"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
}

func (t *Person) ResourceType() string {
	return "Person"
}
func (t *Person) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Person
		ResourceType string `json:"resourceType"`
	}{
		Person:       *t,
		ResourceType: t.ResourceType(),
	})
}

type PersonGender string

const (
	PersonGenderMale    PersonGender = "male"
	PersonGenderFemale  PersonGender = "female"
	PersonGenderOther   PersonGender = "other"
	PersonGenderUnknown PersonGender = "unknown"
)

// ImagingStudy is Representation of the content produced in a DICOM imaging study. A study comprises a
// set of series, each of which includes a set of Service-Object Pair Instances (SOP
// Instances - images or other data) acquired or produced in a common context.  A
// series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may
// have multiple series of different modalities.
type ImagingStudy struct {
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The current state of the ImagingStudy.
	Status ImagingStudyStatus `json:"status"`
	// Extensions for started
	Started_ext *Element `json:"_started"`
	// Description of clinical condition indicating why the ImagingStudy was requested.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// A list of all the series.modality values that are actual acquisition modalities,
	// i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
	Modality []*Coding `json:"modality"`
	// Extensions for numberOfSeries
	NumberOfSeries_ext *Element `json:"_numberOfSeries"`
	// The principal physical location where the ImagingStudy was performed.
	Location *Reference `json:"location"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Date and time the study started.
	Started string `json:"started"`
	// A list of the diagnostic requests that resulted in this imaging study being
	// performed.
	BasedOn []*Reference `json:"basedOn"`
	// Extensions for numberOfInstances
	NumberOfInstances_ext *Element `json:"_numberOfInstances"`
	// The procedure which this ImagingStudy was part of.
	ProcedureReference *Reference `json:"procedureReference"`
	// The code for the performed procedure type.
	ProcedureCode []*CodeableConcept `json:"procedureCode"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Number of SOP Instances in Study. This value given may be larger than the number of
	// instance elements this resource contains due to resource availability, security, or
	// other factors. This element should be present if any instance elements are present.
	NumberOfInstances uint64 `json:"numberOfInstances"`
	// Each study has one or more series of images or other content.
	Series []*ImagingStudy_Series `json:"series"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The subject, typically a patient, of the imaging study.
	Subject *Reference `json:"subject,omitempty"`
	// The healthcare event (e.g. a patient and healthcare provider interaction) during
	// which this ImagingStudy is made.
	Encounter *Reference `json:"encounter"`
	// Number of Series in the Study. This value given may be larger than the number of
	// series elements this Resource contains due to resource availability, security, or
	// other factors. This element should be present if any series elements are present.
	NumberOfSeries uint64 `json:"numberOfSeries"`
	// Per the recommended DICOM mapping, this element is derived from the Study
	// Description attribute (0008,1030). Observations or findings about the imaging study
	// should be recorded in another resource, e.g. Observation, and not in this element.
	Note []*Annotation `json:"note"`
	// Who read the study and interpreted the images or other content.
	Interpreter []*Reference `json:"interpreter"`
	// The network service providing access (e.g., query, view, or retrieval) for the
	// study. See implementation notes for information about using DICOM endpoints. A
	// study-level endpoint applies to each series in the study, unless overridden by a
	// series-level endpoint with the same Endpoint.connectionType.
	Endpoint []*Reference `json:"endpoint"`
	// The Imaging Manager description of the study. Institution-generated description or
	// classification of the Study (component) performed.
	Description string `json:"description"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifiers for the ImagingStudy such as DICOM Study Instance UID, and Accession
	// Number.
	Identifier []*Identifier `json:"identifier"`
	// The requesting/referring physician.
	Referrer *Reference `json:"referrer"`
	// Indicates another resource whose existence justifies this Study.
	ReasonReference []*Reference `json:"reasonReference"`
}

func (t *ImagingStudy) ResourceType() string {
	return "ImagingStudy"
}
func (t *ImagingStudy) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ImagingStudy
		ResourceType string `json:"resourceType"`
	}{
		ImagingStudy: *t,
		ResourceType: t.ResourceType(),
	})
}

type ImagingStudyStatus string

const (
	ImagingStudyStatusRegistered     ImagingStudyStatus = "registered"
	ImagingStudyStatusAvailable      ImagingStudyStatus = "available"
	ImagingStudyStatusCancelled      ImagingStudyStatus = "cancelled"
	ImagingStudyStatusEnteredInError ImagingStudyStatus = "entered-in-error"
	ImagingStudyStatusUnknown        ImagingStudyStatus = "unknown"
)

// PaymentReconciliation is This resource provides the details including amount of a payment and allocates the
// payment items being paid.
type PaymentReconciliation struct {
	// The period of time for which payments have been gathered into this bulk payment for
	// settlement.
	Period *Period `json:"period"`
	// The date when the resource was created.
	Created string `json:"created"`
	// Issuer's unique identifier for the payment instrument.
	PaymentIdentifier *Identifier `json:"paymentIdentifier"`
	// Original request resource reference.
	Request *Reference `json:"request"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The practitioner who is responsible for the services rendered to the patient.
	Requestor *Reference `json:"requestor"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The party who generated the payment.
	PaymentIssuer *Reference `json:"paymentIssuer"`
	// The date of payment as indicated on the financial instrument.
	PaymentDate string `json:"paymentDate"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for created
	Created_ext *Element `json:"_created"`
	// Total payment amount as indicated on the financial instrument.
	PaymentAmount *Money `json:"paymentAmount,omitempty"`
	// Distribution of the payment amount for a previously acknowledged payable.
	Detail []*PaymentReconciliation_Detail `json:"detail"`
	// A code for the form to be used for printing the content.
	FormCode *CodeableConcept `json:"formCode"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A unique identifier assigned to this payment reconciliation.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for outcome
	Outcome_ext *Element `json:"_outcome"`
	// Extensions for disposition
	Disposition_ext *Element `json:"_disposition"`
	// Extensions for paymentDate
	PaymentDate_ext *Element `json:"_paymentDate"`
	// A note that describes or explains the processing in a human readable form.
	ProcessNote []*PaymentReconciliation_ProcessNote `json:"processNote"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The status of the resource instance.
	Status string `json:"status"`
	// The outcome of a request for a reconciliation.
	Outcome PaymentReconciliationOutcome `json:"outcome"`
	// A human readable description of the status of the request for the reconciliation.
	Disposition string `json:"disposition"`
}

func (t *PaymentReconciliation) ResourceType() string {
	return "PaymentReconciliation"
}
func (t *PaymentReconciliation) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		PaymentReconciliation
		ResourceType string `json:"resourceType"`
	}{
		PaymentReconciliation: *t,
		ResourceType:          t.ResourceType(),
	})
}

type PaymentReconciliationOutcome string

const (
	PaymentReconciliationOutcomeQueued   PaymentReconciliationOutcome = "queued"
	PaymentReconciliationOutcomeComplete PaymentReconciliationOutcome = "complete"
	PaymentReconciliationOutcomeError    PaymentReconciliationOutcome = "error"
	PaymentReconciliationOutcomePartial  PaymentReconciliationOutcome = "partial"
)

// ResearchElementDefinition is The ResearchElementDefinition resource describes a "PICO" element that knowledge
// (evidence, assertion, recommendation) is about.
type ResearchElementDefinition struct {
	// The period during which the research element definition content was or is planned to
	// be in active use.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// An individual or organization primarily responsible for review of some aspect of the
	// content.
	Reviewer []*ContactDetail `json:"reviewer"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate research element definition
	// instances.
	UseContext []*UsageContext `json:"useContext"`
	// Extensions for lastReviewDate
	LastReviewDate_ext *Element `json:"_lastReviewDate"`
	// A detailed description, from a clinical perspective, of how the
	// ResearchElementDefinition is used.
	Usage string `json:"usage"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Extensions for subtitle
	Subtitle_ext *Element `json:"_subtitle"`
	// An individual or organization responsible for officially endorsing the content for
	// use in some setting.
	Endorser []*ContactDetail `json:"endorser"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// An individiual or organization primarily involved in the creation and maintenance of
	// the content.
	Author []*ContactDetail `json:"author"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// A human-readable string to clarify or explain concepts about the resource.
	Comment []string `json:"comment"`
	// Extensions for usage
	Usage_ext *Element `json:"_usage"`
	// The identifier that is used to identify this version of the research element
	// definition when it is referenced in a specification, model, design or instance. This
	// is an arbitrary value managed by the research element definition author and is not
	// expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd)
	// if a managed version is not available. There is also no expectation that versions
	// can be placed in a lexicographical sequence. To provide a version consistent with
	// the Decision Support Service specification, use the format Major.Minor.Revision
	// (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the
	// Decision Support Service specification. Note that a version is required for
	// non-experimental active artifacts.
	Version string `json:"version"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A free text natural language description of the research element definition from a
	// consumer's perspective.
	Description string `json:"description"`
	// A legal or geographic region in which the research element definition is intended to
	// be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// A formal identifier that is used to identify this research element definition when
	// it is represented in other formats, or referenced in a specification, model, design
	// or an instance.
	Identifier []*Identifier `json:"identifier"`
	// The status of this research element definition. Enables tracking the life-cycle of
	// the content.
	Status ResearchElementDefinitionStatus `json:"status"`
	// The date on which the resource content was approved by the publisher. Approval
	// happens once when the content is officially approved for usage.
	ApprovalDate string `json:"approvalDate"`
	// Related artifacts such as additional documentation, justification, or bibliographic
	// references.
	RelatedArtifact []*RelatedArtifact `json:"relatedArtifact"`
	// A reference to a Library resource containing the formal logic used by the
	// ResearchElementDefinition.
	Library []string `json:"library"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The short title provides an alternate title for use in informal descriptive contexts
	// where the full, formal title is not necessary.
	ShortTitle string `json:"shortTitle"`
	// The intended subjects for the ResearchElementDefinition. If this element is not
	// provided, a Patient subject is assumed, but the subject of the
	// ResearchElementDefinition can be anything.
	SubjectReference *Reference `json:"subjectReference"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for variableType
	VariableType_ext *Element `json:"_variableType"`
	// A natural language name identifying the research element definition. This name
	// should be usable as an identifier for the module by machine processing applications
	// such as code generation.
	Name string `json:"name"`
	// A short, descriptive, user-friendly title for the research element definition.
	Title string `json:"title"`
	// The date  (and optionally time) when the research element definition was published.
	// The date must change when the business version changes and it must change if the
	// status code changes. In addition, it should change when the substantive content of
	// the research element definition changes.
	Date string `json:"date"`
	// Explanation of why this research element definition is needed and why it has been
	// designed as it has.
	Purpose string `json:"purpose"`
	// The type of research element, a population, an exposure, or an outcome.
	Type ResearchElementDefinitionType `json:"type"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// An absolute URI that is used to identify this research element definition when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal address
	// at which at which an authoritative instance of this research element definition is
	// (or will be) published. This URL can be the target of a canonical reference. It
	// SHALL remain the same when the research element definition is stored on different
	// servers.
	Url string `json:"url"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// The type of the outcome (e.g. Dichotomous, Continuous, or Descriptive).
	VariableType ResearchElementDefinitionVariableType `json:"variableType"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The name of the organization or individual that published the research element
	// definition.
	Publisher string `json:"publisher"`
	// Descriptive topics related to the content of the ResearchElementDefinition. Topics
	// provide a high-level categorization grouping types of ResearchElementDefinitions
	// that can be useful for filtering and searching.
	Topic []*CodeableConcept `json:"topic"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// A Boolean value to indicate that this research element definition is authored for
	// testing purposes (or education/evaluation/marketing) and is not intended to be used
	// for genuine usage.
	Experimental bool `json:"experimental"`
	// Extensions for approvalDate
	ApprovalDate_ext *Element `json:"_approvalDate"`
	// An individual or organization primarily responsible for internal coherence of the
	// content.
	Editor []*ContactDetail `json:"editor"`
	// A characteristic that defines the members of the research element. Multiple
	// characteristics are applied with "and" semantics.
	Characteristic []*ResearchElementDefinition_Characteristic `json:"characteristic,omitempty"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The intended subjects for the ResearchElementDefinition. If this element is not
	// provided, a Patient subject is assumed, but the subject of the
	// ResearchElementDefinition can be anything.
	SubjectCodeableConcept *CodeableConcept `json:"subjectCodeableConcept"`
	// Extensions for comment
	Comment_ext []*Element `json:"_comment"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// A copyright statement relating to the research element definition and/or its
	// contents. Copyright statements are generally legal restrictions on the use and
	// publishing of the research element definition.
	Copyright string `json:"copyright"`
	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate string `json:"lastReviewDate"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for shortTitle
	ShortTitle_ext *Element `json:"_shortTitle"`
	// An explanatory or alternate title for the ResearchElementDefinition giving
	// additional information about its content.
	Subtitle string `json:"subtitle"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
}

func (t *ResearchElementDefinition) ResourceType() string {
	return "ResearchElementDefinition"
}
func (t *ResearchElementDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ResearchElementDefinition
		ResourceType string `json:"resourceType"`
	}{
		ResearchElementDefinition: *t,
		ResourceType:              t.ResourceType(),
	})
}

type ResearchElementDefinitionStatus string
type ResearchElementDefinitionType string
type ResearchElementDefinitionVariableType string

const (
	ResearchElementDefinitionStatusDraft             ResearchElementDefinitionStatus       = "draft"
	ResearchElementDefinitionStatusActive            ResearchElementDefinitionStatus       = "active"
	ResearchElementDefinitionStatusRetired           ResearchElementDefinitionStatus       = "retired"
	ResearchElementDefinitionStatusUnknown           ResearchElementDefinitionStatus       = "unknown"
	ResearchElementDefinitionTypePopulation          ResearchElementDefinitionType         = "population"
	ResearchElementDefinitionTypeExposure            ResearchElementDefinitionType         = "exposure"
	ResearchElementDefinitionTypeOutcome             ResearchElementDefinitionType         = "outcome"
	ResearchElementDefinitionVariableTypeDichotomous ResearchElementDefinitionVariableType = "dichotomous"
	ResearchElementDefinitionVariableTypeContinuous  ResearchElementDefinitionVariableType = "continuous"
	ResearchElementDefinitionVariableTypeDescriptive ResearchElementDefinitionVariableType = "descriptive"
)

// Schedule is A container for slots of time that may be available for booking appointments.
type Schedule struct {
	// Slots that reference this schedule resource provide the availability details to
	// these referenced resource(s).
	Actor []*Reference `json:"actor,omitempty"`
	// The period of time that the slots that reference this Schedule resource cover (even
	// if none exist). These  cover the amount of time that an organization's planning
	// horizon; the interval for which they are currently accepting appointments. This does
	// not define a "template" for planning outside these dates.
	PlanningHorizon *Period `json:"planningHorizon"`
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A broad categorization of the service that is to be performed during this
	// appointment.
	ServiceCategory []*CodeableConcept `json:"serviceCategory"`
	// Whether this schedule record is in active use or should not be used (such as was
	// entered in error).
	Active bool `json:"active"`
	// Extensions for active
	Active_ext *Element `json:"_active"`
	// The specific service that is to be performed during this appointment.
	ServiceType []*CodeableConcept `json:"serviceType"`
	// The specialty of a practitioner that would be required to perform the service
	// requested in this appointment.
	Specialty []*CodeableConcept `json:"specialty"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// External Ids for this item.
	Identifier []*Identifier `json:"identifier"`
	// Comments on the availability to describe any extended information. Such as custom
	// constraints on the slots that may be associated.
	Comment string `json:"comment"`
}

func (t *Schedule) ResourceType() string {
	return "Schedule"
}
func (t *Schedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Schedule
		ResourceType string `json:"resourceType"`
	}{
		Schedule:     *t,
		ResourceType: t.ResourceType(),
	})
}

// Appointment is A booking of a healthcare event among patient(s), practitioner(s), related person(s)
// and/or device(s) for a specific date/time. This may result in one or more
// Encounter(s).
type Appointment struct {
	// Extensions for priority
	Priority_ext *Element `json:"_priority"`
	// Number of minutes that the appointment is to take. This can be less than the
	// duration between the start and end times.  For example, where the actual time of
	// appointment is only an estimate or if a 30 minute appointment is being requested,
	// but any time would work.  Also, if there is, for example, a planned 15 minute break
	// in the middle of a long appointment, the duration may be 15 minutes less than the
	// difference between the start and end.
	MinutesDuration uint64 `json:"minutesDuration"`
	// Extensions for minutesDuration
	MinutesDuration_ext *Element `json:"_minutesDuration"`
	// A set of date ranges (potentially including times) that the appointment is preferred
	// to be scheduled within.
	//
	// The duration (usually in minutes) could also be provided to indicate the length of
	// the appointment to fill and populate the start/end times for the actual allocated
	// time. However, in other situations the duration may be calculated by the scheduling
	// system.
	RequestedPeriod []*Period `json:"requestedPeriod"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// The specialty of a practitioner that would be required to perform the service
	// requested in this appointment.
	Specialty []*CodeableConcept `json:"specialty"`
	// Reason the appointment has been scheduled to take place, as specified using
	// information from another resource. When the patient arrives and the encounter begins
	// it may be used as the admission diagnosis. The indication will typically be a
	// Condition (with other resources referenced in the evidence.detail), or a Procedure.
	ReasonReference []*Reference `json:"reasonReference"`
	// Extensions for start
	Start_ext *Element `json:"_start"`
	// The coded reason for the appointment being cancelled. This is often used in
	// reporting/billing/futher processing to determine if further actions are required, or
	// specific fees apply.
	CancelationReason *CodeableConcept `json:"cancelationReason"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The overall status of the Appointment. Each of the participants has their own
	// participation status which indicates their involvement in the process, however this
	// status indicates the shared status.
	Status AppointmentStatus `json:"status"`
	// Additional information to support the appointment provided when making the
	// appointment.
	SupportingInformation []*Reference `json:"supportingInformation"`
	// Date/Time that the appointment is to take place.
	Start string `json:"start"`
	// Date/Time that the appointment is to conclude.
	End string `json:"end"`
	// While Appointment.comment contains information for internal use,
	// Appointment.patientInstructions is used to capture patient facing information about
	// the Appointment (e.g. please bring your referral or fast from 8pm night before).
	PatientInstruction string `json:"patientInstruction"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The style of appointment or patient that has been booked in the slot (not service
	// type).
	AppointmentType *CodeableConcept `json:"appointmentType"`
	// The brief description of the appointment as would be shown on a subject line in a
	// meeting request, or appointment list. Detailed or expanded information should be put
	// in the comment field.
	Description string `json:"description"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for end
	End_ext *Element `json:"_end"`
	// Extensions for patientInstruction
	PatientInstruction_ext *Element `json:"_patientInstruction"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The slots from the participants' schedules that will be filled by the appointment.
	Slot []*Reference `json:"slot"`
	// The service request this appointment is allocated to assess (e.g. incoming referral
	// or procedure request).
	BasedOn []*Reference `json:"basedOn"`
	// This records identifiers associated with this appointment concern that are defined
	// by business processes and/or used to refer to it when a direct URL reference to the
	// resource itself is not appropriate (e.g. in CDA documents, or in written / printed
	// documentation).
	Identifier []*Identifier `json:"identifier"`
	// The specific service that is to be performed during this appointment.
	ServiceType []*CodeableConcept `json:"serviceType"`
	// The coded reason that this appointment is being scheduled. This is more clinical
	// than administrative.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// List of participants involved in the appointment.
	Participant []*Appointment_Participant `json:"participant,omitempty"`
	// A broad categorization of the service that is to be performed during this
	// appointment.
	ServiceCategory []*CodeableConcept `json:"serviceCategory"`
	// Additional comments about the appointment.
	Comment string `json:"comment"`
	// Extensions for created
	Created_ext *Element `json:"_created"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The priority of the appointment. Can be used to make informed decisions if needing
	// to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as
	// highest, 9 as lowest priority).
	Priority uint64 `json:"priority"`
	// The date that this appointment was initially created. This could be different to the
	// meta.lastModified value on the initial entry, as this could have been before the
	// resource was created on the FHIR server, and should remain unchanged over the
	// lifespan of the appointment.
	Created string `json:"created"`
}

func (t *Appointment) ResourceType() string {
	return "Appointment"
}
func (t *Appointment) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Appointment
		ResourceType string `json:"resourceType"`
	}{
		Appointment:  *t,
		ResourceType: t.ResourceType(),
	})
}

type AppointmentStatus string

const (
	AppointmentStatusProposed       AppointmentStatus = "proposed"
	AppointmentStatusPending        AppointmentStatus = "pending"
	AppointmentStatusBooked         AppointmentStatus = "booked"
	AppointmentStatusArrived        AppointmentStatus = "arrived"
	AppointmentStatusFulfilled      AppointmentStatus = "fulfilled"
	AppointmentStatusCancelled      AppointmentStatus = "cancelled"
	AppointmentStatusNoshow         AppointmentStatus = "noshow"
	AppointmentStatusEnteredInError AppointmentStatus = "entered-in-error"
	AppointmentStatusCheckedIn      AppointmentStatus = "checked-in"
	AppointmentStatusWaitlist       AppointmentStatus = "waitlist"
)

// Claim is A provider issued list of professional services and products which have been
// provided, or are to be provided, to a patient which is sent to an insurer for
// reimbursement.
type Claim struct {
	// Extensions for created
	Created_ext *Element `json:"_created"`
	// The provider-required urgency of processing the request. Typical values include:
	// stat, routine deferred.
	Priority *CodeableConcept `json:"priority,omitempty"`
	// A reference to a referral resource.
	Referral *Reference `json:"referral"`
	// Facility where the services were provided.
	Facility *Reference `json:"facility"`
	// Additional information codes regarding exceptions, special considerations, the
	// condition, situation, prior or concurrent issues.
	SupportingInfo []*Claim_SupportingInfo `json:"supportingInfo"`
	// Details of an accident which resulted in injuries which required the products and
	// services listed in the claim.
	Accident *Claim_Accident `json:"accident"`
	// A claim line. Either a simple  product or service or a 'group' of details which can
	// each be a simple items or groups of sub-details.
	Item []*Claim_Item `json:"item"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A code to indicate whether the nature of the request is: to request adjudication of
	// products and services previously rendered; or requesting authorization and
	// adjudication for provision in the future; or requesting the non-binding adjudication
	// of the listed products and services which could be provided in the future.
	Use ClaimUse `json:"use"`
	// Procedures performed on the patient relevant to the billing items with the claim.
	Procedure []*Claim_Procedure `json:"procedure"`
	// Financial instruments for reimbursement for the health care products and services
	// specified on the claim.
	Insurance []*Claim_Insurance `json:"insurance,omitempty"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A unique identifier assigned to this claim.
	Identifier []*Identifier `json:"identifier"`
	// Original prescription which has been superseded by this prescription to support the
	// dispensing of pharmacy services, medications or products.
	OriginalPrescription *Reference `json:"originalPrescription"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A code to indicate whether and for whom funds are to be reserved for future claims.
	FundsReserve *CodeableConcept `json:"fundsReserve"`
	// Prescription to support the dispensing of pharmacy, device or vision products.
	Prescription *Reference `json:"prescription"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The period for which charges are being submitted.
	BillablePeriod *Period `json:"billablePeriod"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The status of the resource instance.
	Status string `json:"status"`
	// The date this resource was created.
	Created string `json:"created"`
	// Information about diagnoses relevant to the claim items.
	Diagnosis []*Claim_Diagnosis `json:"diagnosis"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A finer grained suite of claim type codes which may convey additional information
	// such as Inpatient vs Outpatient and/or a specialty service.
	SubType *CodeableConcept `json:"subType"`
	// The party to whom the professional services and/or products have been supplied or
	// are being considered and for whom actual or forecast reimbursement is sought.
	Patient *Reference `json:"patient,omitempty"`
	// Other claims which are related to this claim such as prior submissions or claims for
	// related services or for the same event.
	Related []*Claim_Related `json:"related"`
	// The total value of the all the items in the claim.
	Total *Money `json:"total"`
	// The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
	Type *CodeableConcept `json:"type,omitempty"`
	// Extensions for use
	Use_ext *Element `json:"_use"`
	// Individual who created the claim, predetermination or preauthorization.
	Enterer *Reference `json:"enterer"`
	// The Insurer who is target of the request.
	Insurer *Reference `json:"insurer"`
	// The provider which is responsible for the claim, predetermination or
	// preauthorization.
	Provider *Reference `json:"provider,omitempty"`
	// The party to be reimbursed for cost of the products and services according to the
	// terms of the policy.
	Payee *Claim_Payee `json:"payee"`
	// The members of the team who provided the products and services.
	CareTeam []*Claim_CareTeam `json:"careTeam"`
}

func (t *Claim) ResourceType() string {
	return "Claim"
}
func (t *Claim) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Claim
		ResourceType string `json:"resourceType"`
	}{
		Claim:        *t,
		ResourceType: t.ResourceType(),
	})
}

type ClaimUse string

const (
	ClaimUseClaim            ClaimUse = "claim"
	ClaimUsePreauthorization ClaimUse = "preauthorization"
	ClaimUsePredetermination ClaimUse = "predetermination"
)

// DocumentReference is A reference to a document of any kind for any purpose. Provides metadata about the
// document so that the document can be discovered and managed. The scope of a document
// is any seralized object with a mime-type, so includes formal patient centric
// documents (CDA), cliical notes, scanned paper, and non-patient specific documents
// like policy text.
type DocumentReference struct {
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A categorization for the type of document referenced - helps for indexing and
	// searching. This may be implied by or derived from the code specified in the
	// DocumentReference.type.
	Category []*CodeableConcept `json:"category"`
	// The clinical context in which the document was prepared.
	Context *DocumentReference_Context `json:"context"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Other identifiers associated with the document, including version independent
	// identifiers.
	Identifier []*Identifier `json:"identifier"`
	// Document identifier as assigned by the source of the document. This identifier is
	// specific to this version of the document. This unique identifier may be used
	// elsewhere to identify this version of the document.
	MasterIdentifier *Identifier `json:"masterIdentifier"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Identifies who is responsible for adding the information to the document.
	Author []*Reference `json:"author"`
	// Which person or organization authenticates that this document is valid.
	Authenticator *Reference `json:"authenticator"`
	// The document and format referenced. There may be multiple content element
	// repetitions, each with a different format.
	Content []*DocumentReference_Content `json:"content,omitempty"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for docStatus
	DocStatus_ext *Element `json:"_docStatus"`
	// Identifies the organization or group who is responsible for ongoing maintenance of
	// and access to the document.
	Custodian *Reference `json:"custodian"`
	// Relationships that this document has with other document references that already
	// exist.
	RelatesTo []*DocumentReference_RelatesTo `json:"relatesTo"`
	// Human-readable description of the source document.
	Description string `json:"description"`
	// A set of Security-Tag codes specifying the level of privacy/security of the
	// Document. Note that DocumentReference.meta.security contains the security labels of
	// the "reference" to the document, while DocumentReference.securityLabel contains a
	// snapshot of the security labels on the document the reference refers to.
	SecurityLabel []*CodeableConcept `json:"securityLabel"`
	// Specifies the particular kind of document referenced  (e.g. History and Physical,
	// Discharge Summary, Progress Note). This usually equates to the purpose of making the
	// document referenced.
	Type *CodeableConcept `json:"type"`
	// Who or what the document is about. The document can be about a person, (patient or
	// healthcare practitioner), a device (e.g. a machine) or even a group of subjects
	// (such as a document about a herd of farm animals, or a set of patients that share a
	// common exposure).
	Subject *Reference `json:"subject"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The status of the underlying document.
	DocStatus string `json:"docStatus"`
	// When the document reference was created.
	Date string `json:"date"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The status of this document reference.
	Status DocumentReferenceStatus `json:"status"`
}

func (t *DocumentReference) ResourceType() string {
	return "DocumentReference"
}
func (t *DocumentReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		DocumentReference
		ResourceType string `json:"resourceType"`
	}{
		DocumentReference: *t,
		ResourceType:      t.ResourceType(),
	})
}

type DocumentReferenceStatus string

const (
	DocumentReferenceStatusCurrent        DocumentReferenceStatus = "current"
	DocumentReferenceStatusSuperseded     DocumentReferenceStatus = "superseded"
	DocumentReferenceStatusEnteredInError DocumentReferenceStatus = "entered-in-error"
)

// FamilyMemberHistory is Significant health conditions for a person related to the patient relevant in the
// context of care for the patient.
type FamilyMemberHistory struct {
	// The actual or approximate date of birth of the relative.
	// pattern ^[ \r\n\t\S]+$
	BornString string `json:"bornString"`
	// If true, indicates that the age value specified is an estimated value.
	EstimatedAge bool `json:"estimatedAge"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The birth sex of the family member.
	Sex *CodeableConcept `json:"sex"`
	// The actual or approximate date of birth of the relative.
	BornPeriod *Period `json:"bornPeriod"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for bornString
	BornString_ext *Element `json:"_bornString"`
	// Extensions for ageString
	AgeString_ext *Element `json:"_ageString"`
	// Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse
	// that justifies this family member history event.
	ReasonReference []*Reference `json:"reasonReference"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The age of the relative at the time the family member history is recorded.
	// pattern ^[ \r\n\t\S]+$
	AgeString string `json:"ageString"`
	// Deceased flag or the actual or approximate age of the relative at the time of death
	// for the family member history record.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	DeceasedDate string `json:"deceasedDate"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition
	// that is adhered to in whole or in part by this FamilyMemberHistory.
	InstantiatesCanonical []string `json:"instantiatesCanonical"`
	// The age of the relative at the time the family member history is recorded.
	AgeAge *Age `json:"ageAge"`
	// The significant Conditions (or condition) that the family member had. This is a
	// repeating section to allow a system to represent more than one condition per
	// resource, though there is nothing stopping multiple resources - one per condition.
	Condition []*FamilyMemberHistory_Condition `json:"condition"`
	// The date (and possibly time) when the family member history was recorded or last
	// updated.
	Date string `json:"date"`
	// Extensions for estimatedAge
	EstimatedAge_ext *Element `json:"_estimatedAge"`
	// Extensions for deceasedString
	DeceasedString_ext *Element `json:"_deceasedString"`
	// Extensions for deceasedBoolean
	DeceasedBoolean_ext *Element `json:"_deceasedBoolean"`
	// Extensions for instantiatesUri
	InstantiatesUri_ext []*Element `json:"_instantiatesUri"`
	// The person who this history concerns.
	Patient *Reference `json:"patient,omitempty"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Deceased flag or the actual or approximate age of the relative at the time of death
	// for the family member history record.
	// pattern ^true|false$
	DeceasedBoolean bool `json:"deceasedBoolean"`
	// Describes why the family member history occurred in coded or textual form.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Business identifiers assigned to this family member history by the performer or
	// other systems which remain constant as the resource is updated and propagates from
	// server to server.
	Identifier []*Identifier `json:"identifier"`
	// The type of relationship this person has to the patient (father, mother, brother
	// etc.).
	Relationship *CodeableConcept `json:"relationship,omitempty"`
	// The actual or approximate date of birth of the relative.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	BornDate string `json:"bornDate"`
	// Extensions for bornDate
	BornDate_ext *Element `json:"_bornDate"`
	// Deceased flag or the actual or approximate age of the relative at the time of death
	// for the family member history record.
	DeceasedAge *Age `json:"deceasedAge"`
	// Deceased flag or the actual or approximate age of the relative at the time of death
	// for the family member history record.
	DeceasedRange *Range `json:"deceasedRange"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the
	// red hair".
	Name string `json:"name"`
	// Extensions for deceasedDate
	DeceasedDate_ext *Element `json:"_deceasedDate"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Describes why the family member's history is not available.
	DataAbsentReason *CodeableConcept `json:"dataAbsentReason"`
	// The age of the relative at the time the family member history is recorded.
	AgeRange *Range `json:"ageRange"`
	// Deceased flag or the actual or approximate age of the relative at the time of death
	// for the family member history record.
	// pattern ^[ \r\n\t\S]+$
	DeceasedString string `json:"deceasedString"`
	// This property allows a non condition-specific note to the made about the related
	// person. Ideally, the note would be in the condition property, but this is not always
	// possible.
	Note []*Annotation `json:"note"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The URL pointing to an externally maintained protocol, guideline, orderset or other
	// definition that is adhered to in whole or in part by this FamilyMemberHistory.
	InstantiatesUri []string `json:"instantiatesUri"`
	// A code specifying the status of the record of the family history of a specific
	// family member.
	Status FamilyMemberHistoryStatus `json:"status"`
}

func (t *FamilyMemberHistory) ResourceType() string {
	return "FamilyMemberHistory"
}
func (t *FamilyMemberHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		FamilyMemberHistory
		ResourceType string `json:"resourceType"`
	}{
		FamilyMemberHistory: *t,
		ResourceType:        t.ResourceType(),
	})
}

type FamilyMemberHistoryStatus string

const (
	FamilyMemberHistoryStatusPartial        FamilyMemberHistoryStatus = "partial"
	FamilyMemberHistoryStatusCompleted      FamilyMemberHistoryStatus = "completed"
	FamilyMemberHistoryStatusEnteredInError FamilyMemberHistoryStatus = "entered-in-error"
	FamilyMemberHistoryStatusHealthUnknown  FamilyMemberHistoryStatus = "health-unknown"
)

// SubstanceReferenceInformation is Todo.
type SubstanceReferenceInformation struct {
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// Todo.
	GeneElement []*SubstanceReferenceInformation_GeneElement `json:"geneElement"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Todo.
	Comment string `json:"comment"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Todo.
	Classification []*SubstanceReferenceInformation_Classification `json:"classification"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Todo.
	Gene []*SubstanceReferenceInformation_Gene `json:"gene"`
	// Todo.
	Target []*SubstanceReferenceInformation_Target `json:"target"`
}

func (t *SubstanceReferenceInformation) ResourceType() string {
	return "SubstanceReferenceInformation"
}
func (t *SubstanceReferenceInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		SubstanceReferenceInformation
		ResourceType string `json:"resourceType"`
	}{
		SubstanceReferenceInformation: *t,
		ResourceType:                  t.ResourceType(),
	})
}

// MedicinalProductPackaged is A medicinal product in a container or package.
type MedicinalProductPackaged struct {
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Unique identifier.
	Identifier []*Identifier `json:"identifier"`
	// The product with this is a pack for.
	Subject []*Reference `json:"subject"`
	// Marketing information.
	MarketingStatus []*MarketingStatus `json:"marketingStatus"`
	// Batch numbering.
	BatchIdentifier []*MedicinalProductPackaged_BatchIdentifier `json:"batchIdentifier"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Manufacturer of this Package Item.
	MarketingAuthorization *Reference `json:"marketingAuthorization"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The legal status of supply of the medicinal product as classified by the regulator.
	LegalStatusOfSupply *CodeableConcept `json:"legalStatusOfSupply"`
	// Manufacturer of this Package Item.
	Manufacturer []*Reference `json:"manufacturer"`
	// A packaging item, as a contained for medicine, possibly with other packaging items
	// within.
	PackageItem []*MedicinalProductPackaged_PackageItem `json:"packageItem,omitempty"`
	// Textual description.
	Description string `json:"description"`
}

func (t *MedicinalProductPackaged) ResourceType() string {
	return "MedicinalProductPackaged"
}
func (t *MedicinalProductPackaged) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MedicinalProductPackaged
		ResourceType string `json:"resourceType"`
	}{
		MedicinalProductPackaged: *t,
		ResourceType:             t.ResourceType(),
	})
}

// OperationOutcome is A collection of error, warning, or information messages that result from a system
// action.
type OperationOutcome struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// An error, warning, or information message that results from a system action.
	Issue []*OperationOutcome_Issue `json:"issue,omitempty"`
}

func (t *OperationOutcome) ResourceType() string {
	return "OperationOutcome"
}
func (t *OperationOutcome) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OperationOutcome
		ResourceType string `json:"resourceType"`
	}{
		OperationOutcome: *t,
		ResourceType:     t.ResourceType(),
	})
}

// Consent is A record of a healthcare consumer’s  choices, which permits or denies identified
// recipient(s) or recipient role(s) to perform one or more actions within a given
// policy context, for specific purposes and periods of time.
type Consent struct {
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A classification of the type of consents found in the statement. This element
	// supports indexing and retrieval of consent statements.
	Category []*CodeableConcept `json:"category,omitempty"`
	// When this  Consent was issued / created / indexed.
	DateTime string `json:"dateTime"`
	// A reference to the specific base computable regulation or policy.
	PolicyRule *CodeableConcept `json:"policyRule"`
	// The source on which this consent statement is based. The source might be a scanned
	// original paper form, or a reference to a consent that links back to such a source, a
	// reference to a document repository (e.g. XDS) that stores the original consent
	// document.
	SourceAttachment *Attachment `json:"sourceAttachment"`
	// The references to the policies that are included in this consent scope. Policies may
	// be organizational, but are often defined jurisdictionally, or in law.
	Policy []*Consent_Policy `json:"policy"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Indicates the current state of this consent.
	Status ConsentStatus `json:"status"`
	// Extensions for dateTime
	DateTime_ext *Element `json:"_dateTime"`
	// An exception to the base policy of this consent. An exception can be an addition or
	// removal of access permissions.
	Provision *Consent_Provision `json:"provision"`
	// The source on which this consent statement is based. The source might be a scanned
	// original paper form, or a reference to a consent that links back to such a source, a
	// reference to a document repository (e.g. XDS) that stores the original consent
	// document.
	SourceReference *Reference `json:"sourceReference"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Unique identifier for this copy of the Consent Statement.
	Identifier []*Identifier `json:"identifier"`
	// A selector of the type of consent being presented: ADR, Privacy, Treatment,
	// Research.  This list is now extensible.
	Scope *CodeableConcept `json:"scope,omitempty"`
	// The patient/healthcare consumer to whom this consent applies.
	Patient *Reference `json:"patient"`
	// The organization that manages the consent, and the framework within which it is
	// executed.
	Organization []*Reference `json:"organization"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Either the Grantor, which is the entity responsible for granting the rights listed
	// in a Consent Directive or the Grantee, which is the entity responsible for complying
	// with the Consent Directive, including any obligations or limitations on
	// authorizations and enforcement of prohibitions.
	Performer []*Reference `json:"performer"`
	// Whether a treatment instruction (e.g. artificial respiration yes or no) was verified
	// with the patient, his/her family or another authorized person.
	Verification []*Consent_Verification `json:"verification"`
	// The base language in which the resource is written.
	Language string `json:"language"`
}

func (t *Consent) ResourceType() string {
	return "Consent"
}
func (t *Consent) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Consent
		ResourceType string `json:"resourceType"`
	}{
		Consent:      *t,
		ResourceType: t.ResourceType(),
	})
}

type ConsentStatus string

const (
	ConsentStatusDraft          ConsentStatus = "draft"
	ConsentStatusProposed       ConsentStatus = "proposed"
	ConsentStatusActive         ConsentStatus = "active"
	ConsentStatusRejected       ConsentStatus = "rejected"
	ConsentStatusInactive       ConsentStatus = "inactive"
	ConsentStatusEnteredInError ConsentStatus = "entered-in-error"
)

// CoverageEligibilityRequest is The CoverageEligibilityRequest provides patient and insurance coverage information
// to an insurer for them to respond, in the form of an CoverageEligibilityResponse,
// with information regarding whether the stated coverage is valid and in-force and
// optionally to provide the insurance details of the policy.
type CoverageEligibilityRequest struct {
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for created
	Created_ext *Element `json:"_created"`
	// Extensions for purpose
	Purpose_ext []*Element `json:"_purpose"`
	// The date or dates when the enclosed suite of services were performed or completed.
	ServicedPeriod *Period `json:"servicedPeriod"`
	// Person who created the request.
	Enterer *Reference `json:"enterer"`
	// Service categories or billable services for which benefit details and/or an
	// authorization prior to service delivery may be required by the payor.
	Item []*CoverageEligibilityRequest_Item `json:"item"`
	// Extensions for servicedDate
	ServicedDate_ext *Element `json:"_servicedDate"`
	// The Insurer who issued the coverage in question and is the recipient of the request.
	Insurer *Reference `json:"insurer,omitempty"`
	// Facility where the services are intended to be provided.
	Facility *Reference `json:"facility"`
	// Additional information codes regarding exceptions, special considerations, the
	// condition, situation, prior or concurrent issues.
	SupportingInfo []*CoverageEligibilityRequest_SupportingInfo `json:"supportingInfo"`
	// Financial instruments for reimbursement for the health care products and services.
	Insurance []*CoverageEligibilityRequest_Insurance `json:"insurance"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The party who is the beneficiary of the supplied coverage and for whom eligibility
	// is sought.
	Patient *Reference `json:"patient,omitempty"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The status of the resource instance.
	Status string `json:"status"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A unique identifier assigned to this coverage eligiblity request.
	Identifier []*Identifier `json:"identifier"`
	// Code to specify whether requesting: prior authorization requirements for some
	// service categories or billing codes; benefits for coverages specified or discovered;
	// discovery and return of coverages for the patient; and/or validation that the
	// specified coverage is in-force at the date/period specified or 'now' if not
	// specified.
	Purpose []CoverageEligibilityRequestPurpose `json:"purpose"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// When the requestor expects the processor to complete processing.
	Priority *CodeableConcept `json:"priority"`
	// The date or dates when the enclosed suite of services were performed or completed.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	ServicedDate string `json:"servicedDate"`
	// The provider which is responsible for the request.
	Provider *Reference `json:"provider"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The date when this resource was created.
	Created string `json:"created"`
}

func (t *CoverageEligibilityRequest) ResourceType() string {
	return "CoverageEligibilityRequest"
}
func (t *CoverageEligibilityRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		CoverageEligibilityRequest
		ResourceType string `json:"resourceType"`
	}{
		CoverageEligibilityRequest: *t,
		ResourceType:               t.ResourceType(),
	})
}

type CoverageEligibilityRequestPurpose string

const ()

// ImplementationGuide is A set of rules of how a particular interoperability or standards problem is solved -
// typically through the use of FHIR resources. This resource is used to gather all the
// parts of an implementation guide into a logical whole and to publish a computable
// definition of all the parts.
type ImplementationGuide struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The name of the organization or individual that published the implementation guide.
	Publisher string `json:"publisher"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate implementation guide instances.
	UseContext []*UsageContext `json:"useContext"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// A Boolean value to indicate that this implementation guide is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used for
	// genuine usage.
	Experimental bool `json:"experimental"`
	// Extensions for packageId
	PackageId_ext *Element `json:"_packageId"`
	// A set of profiles that all resources covered by this implementation guide must
	// conform to.
	Global []*ImplementationGuide_Global `json:"global"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An absolute URI that is used to identify this implementation guide when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal address
	// at which at which an authoritative instance of this implementation guide is (or will
	// be) published. This URL can be the target of a canonical reference. It SHALL remain
	// the same when the implementation guide is stored on different servers.
	Url string `json:"url"`
	// A natural language name identifying the implementation guide. This name should be
	// usable as an identifier for the module by machine processing applications such as
	// code generation.
	Name string `json:"name"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A short, descriptive, user-friendly title for the implementation guide.
	Title string `json:"title"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// The license that applies to this Implementation Guide, using an SPDX license code,
	// or 'not-open-source'.
	License ImplementationGuideLicense `json:"license"`
	// The version(s) of the FHIR specification that this ImplementationGuide targets -
	// e.g. describes how to use. The value of this element is the formal version of the
	// specification, without the revision number, e.g. [publication].[major].[minor],
	// which is 4.0.0. for this version.
	FhirVersion []ImplementationGuideFhirVersion `json:"fhirVersion"`
	// The NPM package name for this Implementation Guide, used in the NPM package
	// distribution, which is the primary mechanism by which FHIR based tooling manages IG
	// dependencies. This value must be globally unique, and should be assigned with care.
	PackageId string `json:"packageId"`
	// The information needed by an IG publisher tool to publish the whole implementation
	// guide.
	Definition *ImplementationGuide_Definition `json:"definition"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// The status of this implementation guide. Enables tracking the life-cycle of the
	// content.
	Status ImplementationGuideStatus `json:"status"`
	// The date  (and optionally time) when the implementation guide was published. The
	// date must change when the business version changes and it must change if the status
	// code changes. In addition, it should change when the substantive content of the
	// implementation guide changes.
	Date string `json:"date"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for license
	License_ext *Element `json:"_license"`
	// Information about an assembled implementation guide, created by the publication
	// tooling.
	Manifest *ImplementationGuide_Manifest `json:"manifest"`
	// The identifier that is used to identify this version of the implementation guide
	// when it is referenced in a specification, model, design or instance. This is an
	// arbitrary value managed by the implementation guide author and is not expected to be
	// globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed
	// version is not available. There is also no expectation that versions can be placed
	// in a lexicographical sequence.
	Version string `json:"version"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// A free text natural language description of the implementation guide from a
	// consumer's perspective.
	Description string `json:"description"`
	// A legal or geographic region in which the implementation guide is intended to be
	// used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// Extensions for fhirVersion
	FhirVersion_ext []*Element `json:"_fhirVersion"`
	// Another implementation guide that this implementation depends on. Typically, an
	// implementation guide uses value sets, profiles etc.defined in other implementation
	// guides.
	DependsOn []*ImplementationGuide_DependsOn `json:"dependsOn"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// A copyright statement relating to the implementation guide and/or its contents.
	// Copyright statements are generally legal restrictions on the use and publishing of
	// the implementation guide.
	Copyright string `json:"copyright"`
}

func (t *ImplementationGuide) ResourceType() string {
	return "ImplementationGuide"
}
func (t *ImplementationGuide) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ImplementationGuide
		ResourceType string `json:"resourceType"`
	}{
		ImplementationGuide: *t,
		ResourceType:        t.ResourceType(),
	})
}

type ImplementationGuideLicense string
type ImplementationGuideFhirVersion string
type ImplementationGuideStatus string

const (
	ImplementationGuideLicenseNotOpenSource                  ImplementationGuideLicense = "not-open-source"
	ImplementationGuideLicense0BSD                           ImplementationGuideLicense = "0BSD"
	ImplementationGuideLicenseAAL                            ImplementationGuideLicense = "AAL"
	ImplementationGuideLicenseAbstyles                       ImplementationGuideLicense = "Abstyles"
	ImplementationGuideLicenseAdobe2006                      ImplementationGuideLicense = "Adobe-2006"
	ImplementationGuideLicenseAdobeGlyph                     ImplementationGuideLicense = "Adobe-Glyph"
	ImplementationGuideLicenseADSL                           ImplementationGuideLicense = "ADSL"
	ImplementationGuideLicenseAFL1_1                         ImplementationGuideLicense = "AFL-1.1"
	ImplementationGuideLicenseAFL1_2                         ImplementationGuideLicense = "AFL-1.2"
	ImplementationGuideLicenseAFL2_0                         ImplementationGuideLicense = "AFL-2.0"
	ImplementationGuideLicenseAFL2_1                         ImplementationGuideLicense = "AFL-2.1"
	ImplementationGuideLicenseAFL3_0                         ImplementationGuideLicense = "AFL-3.0"
	ImplementationGuideLicenseAfmparse                       ImplementationGuideLicense = "Afmparse"
	ImplementationGuideLicenseAGPL1_0Only                    ImplementationGuideLicense = "AGPL-1.0-only"
	ImplementationGuideLicenseAGPL1_0OrLater                 ImplementationGuideLicense = "AGPL-1.0-or-later"
	ImplementationGuideLicenseAGPL3_0Only                    ImplementationGuideLicense = "AGPL-3.0-only"
	ImplementationGuideLicenseAGPL3_0OrLater                 ImplementationGuideLicense = "AGPL-3.0-or-later"
	ImplementationGuideLicenseAladdin                        ImplementationGuideLicense = "Aladdin"
	ImplementationGuideLicenseAMDPLPA                        ImplementationGuideLicense = "AMDPLPA"
	ImplementationGuideLicenseAML                            ImplementationGuideLicense = "AML"
	ImplementationGuideLicenseAMPAS                          ImplementationGuideLicense = "AMPAS"
	ImplementationGuideLicenseANTLRPD                        ImplementationGuideLicense = "ANTLR-PD"
	ImplementationGuideLicenseApache1_0                      ImplementationGuideLicense = "Apache-1.0"
	ImplementationGuideLicenseApache1_1                      ImplementationGuideLicense = "Apache-1.1"
	ImplementationGuideLicenseApache2_0                      ImplementationGuideLicense = "Apache-2.0"
	ImplementationGuideLicenseAPAFML                         ImplementationGuideLicense = "APAFML"
	ImplementationGuideLicenseAPL1_0                         ImplementationGuideLicense = "APL-1.0"
	ImplementationGuideLicenseAPSL1_0                        ImplementationGuideLicense = "APSL-1.0"
	ImplementationGuideLicenseAPSL1_1                        ImplementationGuideLicense = "APSL-1.1"
	ImplementationGuideLicenseAPSL1_2                        ImplementationGuideLicense = "APSL-1.2"
	ImplementationGuideLicenseAPSL2_0                        ImplementationGuideLicense = "APSL-2.0"
	ImplementationGuideLicenseArtistic1_0Cl8                 ImplementationGuideLicense = "Artistic-1.0-cl8"
	ImplementationGuideLicenseArtistic1_0Perl                ImplementationGuideLicense = "Artistic-1.0-Perl"
	ImplementationGuideLicenseArtistic1_0                    ImplementationGuideLicense = "Artistic-1.0"
	ImplementationGuideLicenseArtistic2_0                    ImplementationGuideLicense = "Artistic-2.0"
	ImplementationGuideLicenseBahyph                         ImplementationGuideLicense = "Bahyph"
	ImplementationGuideLicenseBarr                           ImplementationGuideLicense = "Barr"
	ImplementationGuideLicenseBeerware                       ImplementationGuideLicense = "Beerware"
	ImplementationGuideLicenseBitTorrent1_0                  ImplementationGuideLicense = "BitTorrent-1.0"
	ImplementationGuideLicenseBitTorrent1_1                  ImplementationGuideLicense = "BitTorrent-1.1"
	ImplementationGuideLicenseBorceux                        ImplementationGuideLicense = "Borceux"
	ImplementationGuideLicenseBSD1Clause                     ImplementationGuideLicense = "BSD-1-Clause"
	ImplementationGuideLicenseBSD2ClauseFreeBSD              ImplementationGuideLicense = "BSD-2-Clause-FreeBSD"
	ImplementationGuideLicenseBSD2ClauseNetBSD               ImplementationGuideLicense = "BSD-2-Clause-NetBSD"
	ImplementationGuideLicenseBSD2ClausePatent               ImplementationGuideLicense = "BSD-2-Clause-Patent"
	ImplementationGuideLicenseBSD2Clause                     ImplementationGuideLicense = "BSD-2-Clause"
	ImplementationGuideLicenseBSD3ClauseAttribution          ImplementationGuideLicense = "BSD-3-Clause-Attribution"
	ImplementationGuideLicenseBSD3ClauseClear                ImplementationGuideLicense = "BSD-3-Clause-Clear"
	ImplementationGuideLicenseBSD3ClauseLBNL                 ImplementationGuideLicense = "BSD-3-Clause-LBNL"
	ImplementationGuideLicenseBSD3ClauseNoNuclearLicense2014 ImplementationGuideLicense = "BSD-3-Clause-No-Nuclear-License-2014"
	ImplementationGuideLicenseBSD3ClauseNoNuclearLicense     ImplementationGuideLicense = "BSD-3-Clause-No-Nuclear-License"
	ImplementationGuideLicenseBSD3ClauseNoNuclearWarranty    ImplementationGuideLicense = "BSD-3-Clause-No-Nuclear-Warranty"
	ImplementationGuideLicenseBSD3Clause                     ImplementationGuideLicense = "BSD-3-Clause"
	ImplementationGuideLicenseBSD4ClauseUC                   ImplementationGuideLicense = "BSD-4-Clause-UC"
	ImplementationGuideLicenseBSD4Clause                     ImplementationGuideLicense = "BSD-4-Clause"
	ImplementationGuideLicenseBSDProtection                  ImplementationGuideLicense = "BSD-Protection"
	ImplementationGuideLicenseBSDSourceCode                  ImplementationGuideLicense = "BSD-Source-Code"
	ImplementationGuideLicenseBSL1_0                         ImplementationGuideLicense = "BSL-1.0"
	ImplementationGuideLicenseBzip21_0_5                     ImplementationGuideLicense = "bzip2-1.0.5"
	ImplementationGuideLicenseBzip21_0_6                     ImplementationGuideLicense = "bzip2-1.0.6"
	ImplementationGuideLicenseCaldera                        ImplementationGuideLicense = "Caldera"
	ImplementationGuideLicenseCATOSL1_1                      ImplementationGuideLicense = "CATOSL-1.1"
	ImplementationGuideLicenseCCBY1_0                        ImplementationGuideLicense = "CC-BY-1.0"
	ImplementationGuideLicenseCCBY2_0                        ImplementationGuideLicense = "CC-BY-2.0"
	ImplementationGuideLicenseCCBY2_5                        ImplementationGuideLicense = "CC-BY-2.5"
	ImplementationGuideLicenseCCBY3_0                        ImplementationGuideLicense = "CC-BY-3.0"
	ImplementationGuideLicenseCCBY4_0                        ImplementationGuideLicense = "CC-BY-4.0"
	ImplementationGuideLicenseCCBYNC1_0                      ImplementationGuideLicense = "CC-BY-NC-1.0"
	ImplementationGuideLicenseCCBYNC2_0                      ImplementationGuideLicense = "CC-BY-NC-2.0"
	ImplementationGuideLicenseCCBYNC2_5                      ImplementationGuideLicense = "CC-BY-NC-2.5"
	ImplementationGuideLicenseCCBYNC3_0                      ImplementationGuideLicense = "CC-BY-NC-3.0"
	ImplementationGuideLicenseCCBYNC4_0                      ImplementationGuideLicense = "CC-BY-NC-4.0"
	ImplementationGuideLicenseCCBYNCND1_0                    ImplementationGuideLicense = "CC-BY-NC-ND-1.0"
	ImplementationGuideLicenseCCBYNCND2_0                    ImplementationGuideLicense = "CC-BY-NC-ND-2.0"
	ImplementationGuideLicenseCCBYNCND2_5                    ImplementationGuideLicense = "CC-BY-NC-ND-2.5"
	ImplementationGuideLicenseCCBYNCND3_0                    ImplementationGuideLicense = "CC-BY-NC-ND-3.0"
	ImplementationGuideLicenseCCBYNCND4_0                    ImplementationGuideLicense = "CC-BY-NC-ND-4.0"
	ImplementationGuideLicenseCCBYNCSA1_0                    ImplementationGuideLicense = "CC-BY-NC-SA-1.0"
	ImplementationGuideLicenseCCBYNCSA2_0                    ImplementationGuideLicense = "CC-BY-NC-SA-2.0"
	ImplementationGuideLicenseCCBYNCSA2_5                    ImplementationGuideLicense = "CC-BY-NC-SA-2.5"
	ImplementationGuideLicenseCCBYNCSA3_0                    ImplementationGuideLicense = "CC-BY-NC-SA-3.0"
	ImplementationGuideLicenseCCBYNCSA4_0                    ImplementationGuideLicense = "CC-BY-NC-SA-4.0"
	ImplementationGuideLicenseCCBYND1_0                      ImplementationGuideLicense = "CC-BY-ND-1.0"
	ImplementationGuideLicenseCCBYND2_0                      ImplementationGuideLicense = "CC-BY-ND-2.0"
	ImplementationGuideLicenseCCBYND2_5                      ImplementationGuideLicense = "CC-BY-ND-2.5"
	ImplementationGuideLicenseCCBYND3_0                      ImplementationGuideLicense = "CC-BY-ND-3.0"
	ImplementationGuideLicenseCCBYND4_0                      ImplementationGuideLicense = "CC-BY-ND-4.0"
	ImplementationGuideLicenseCCBYSA1_0                      ImplementationGuideLicense = "CC-BY-SA-1.0"
	ImplementationGuideLicenseCCBYSA2_0                      ImplementationGuideLicense = "CC-BY-SA-2.0"
	ImplementationGuideLicenseCCBYSA2_5                      ImplementationGuideLicense = "CC-BY-SA-2.5"
	ImplementationGuideLicenseCCBYSA3_0                      ImplementationGuideLicense = "CC-BY-SA-3.0"
	ImplementationGuideLicenseCCBYSA4_0                      ImplementationGuideLicense = "CC-BY-SA-4.0"
	ImplementationGuideLicenseCC01_0                         ImplementationGuideLicense = "CC0-1.0"
	ImplementationGuideLicenseCDDL1_0                        ImplementationGuideLicense = "CDDL-1.0"
	ImplementationGuideLicenseCDDL1_1                        ImplementationGuideLicense = "CDDL-1.1"
	ImplementationGuideLicenseCDLAPermissive1_0              ImplementationGuideLicense = "CDLA-Permissive-1.0"
	ImplementationGuideLicenseCDLASharing1_0                 ImplementationGuideLicense = "CDLA-Sharing-1.0"
	ImplementationGuideLicenseCECILL1_0                      ImplementationGuideLicense = "CECILL-1.0"
	ImplementationGuideLicenseCECILL1_1                      ImplementationGuideLicense = "CECILL-1.1"
	ImplementationGuideLicenseCECILL2_0                      ImplementationGuideLicense = "CECILL-2.0"
	ImplementationGuideLicenseCECILL2_1                      ImplementationGuideLicense = "CECILL-2.1"
	ImplementationGuideLicenseCECILLB                        ImplementationGuideLicense = "CECILL-B"
	ImplementationGuideLicenseCECILLC                        ImplementationGuideLicense = "CECILL-C"
	ImplementationGuideLicenseClArtistic                     ImplementationGuideLicense = "ClArtistic"
	ImplementationGuideLicenseCNRIJython                     ImplementationGuideLicense = "CNRI-Jython"
	ImplementationGuideLicenseCNRIPythonGPLCompatible        ImplementationGuideLicense = "CNRI-Python-GPL-Compatible"
	ImplementationGuideLicenseCNRIPython                     ImplementationGuideLicense = "CNRI-Python"
	ImplementationGuideLicenseCondor1_1                      ImplementationGuideLicense = "Condor-1.1"
	ImplementationGuideLicenseCPAL1_0                        ImplementationGuideLicense = "CPAL-1.0"
	ImplementationGuideLicenseCPL1_0                         ImplementationGuideLicense = "CPL-1.0"
	ImplementationGuideLicenseCPOL1_02                       ImplementationGuideLicense = "CPOL-1.02"
	ImplementationGuideLicenseCrossword                      ImplementationGuideLicense = "Crossword"
	ImplementationGuideLicenseCrystalStacker                 ImplementationGuideLicense = "CrystalStacker"
	ImplementationGuideLicenseCUAOPL1_0                      ImplementationGuideLicense = "CUA-OPL-1.0"
	ImplementationGuideLicenseCube                           ImplementationGuideLicense = "Cube"
	ImplementationGuideLicenseCurl                           ImplementationGuideLicense = "curl"
	ImplementationGuideLicenseDFSL1_0                        ImplementationGuideLicense = "D-FSL-1.0"
	ImplementationGuideLicenseDiffmark                       ImplementationGuideLicense = "diffmark"
	ImplementationGuideLicenseDOC                            ImplementationGuideLicense = "DOC"
	ImplementationGuideLicenseDotseqn                        ImplementationGuideLicense = "Dotseqn"
	ImplementationGuideLicenseDSDP                           ImplementationGuideLicense = "DSDP"
	ImplementationGuideLicenseDvipdfm                        ImplementationGuideLicense = "dvipdfm"
	ImplementationGuideLicenseECL1_0                         ImplementationGuideLicense = "ECL-1.0"
	ImplementationGuideLicenseECL2_0                         ImplementationGuideLicense = "ECL-2.0"
	ImplementationGuideLicenseEFL1_0                         ImplementationGuideLicense = "EFL-1.0"
	ImplementationGuideLicenseEFL2_0                         ImplementationGuideLicense = "EFL-2.0"
	ImplementationGuideLicenseEGenix                         ImplementationGuideLicense = "eGenix"
	ImplementationGuideLicenseEntessa                        ImplementationGuideLicense = "Entessa"
	ImplementationGuideLicenseEPL1_0                         ImplementationGuideLicense = "EPL-1.0"
	ImplementationGuideLicenseEPL2_0                         ImplementationGuideLicense = "EPL-2.0"
	ImplementationGuideLicenseErlPL1_1                       ImplementationGuideLicense = "ErlPL-1.1"
	ImplementationGuideLicenseEUDatagrid                     ImplementationGuideLicense = "EUDatagrid"
	ImplementationGuideLicenseEUPL1_0                        ImplementationGuideLicense = "EUPL-1.0"
	ImplementationGuideLicenseEUPL1_1                        ImplementationGuideLicense = "EUPL-1.1"
	ImplementationGuideLicenseEUPL1_2                        ImplementationGuideLicense = "EUPL-1.2"
	ImplementationGuideLicenseEurosym                        ImplementationGuideLicense = "Eurosym"
	ImplementationGuideLicenseFair                           ImplementationGuideLicense = "Fair"
	ImplementationGuideLicenseFrameworx1_0                   ImplementationGuideLicense = "Frameworx-1.0"
	ImplementationGuideLicenseFreeImage                      ImplementationGuideLicense = "FreeImage"
	ImplementationGuideLicenseFSFAP                          ImplementationGuideLicense = "FSFAP"
	ImplementationGuideLicenseFSFUL                          ImplementationGuideLicense = "FSFUL"
	ImplementationGuideLicenseFSFULLR                        ImplementationGuideLicense = "FSFULLR"
	ImplementationGuideLicenseFTL                            ImplementationGuideLicense = "FTL"
	ImplementationGuideLicenseGFDL1_1Only                    ImplementationGuideLicense = "GFDL-1.1-only"
	ImplementationGuideLicenseGFDL1_1OrLater                 ImplementationGuideLicense = "GFDL-1.1-or-later"
	ImplementationGuideLicenseGFDL1_2Only                    ImplementationGuideLicense = "GFDL-1.2-only"
	ImplementationGuideLicenseGFDL1_2OrLater                 ImplementationGuideLicense = "GFDL-1.2-or-later"
	ImplementationGuideLicenseGFDL1_3Only                    ImplementationGuideLicense = "GFDL-1.3-only"
	ImplementationGuideLicenseGFDL1_3OrLater                 ImplementationGuideLicense = "GFDL-1.3-or-later"
	ImplementationGuideLicenseGiftware                       ImplementationGuideLicense = "Giftware"
	ImplementationGuideLicenseGL2PS                          ImplementationGuideLicense = "GL2PS"
	ImplementationGuideLicenseGlide                          ImplementationGuideLicense = "Glide"
	ImplementationGuideLicenseGlulxe                         ImplementationGuideLicense = "Glulxe"
	ImplementationGuideLicenseGnuplot                        ImplementationGuideLicense = "gnuplot"
	ImplementationGuideLicenseGPL1_0Only                     ImplementationGuideLicense = "GPL-1.0-only"
	ImplementationGuideLicenseGPL1_0OrLater                  ImplementationGuideLicense = "GPL-1.0-or-later"
	ImplementationGuideLicenseGPL2_0Only                     ImplementationGuideLicense = "GPL-2.0-only"
	ImplementationGuideLicenseGPL2_0OrLater                  ImplementationGuideLicense = "GPL-2.0-or-later"
	ImplementationGuideLicenseGPL3_0Only                     ImplementationGuideLicense = "GPL-3.0-only"
	ImplementationGuideLicenseGPL3_0OrLater                  ImplementationGuideLicense = "GPL-3.0-or-later"
	ImplementationGuideLicenseGSOAP1_3b                      ImplementationGuideLicense = "gSOAP-1.3b"
	ImplementationGuideLicenseHaskellReport                  ImplementationGuideLicense = "HaskellReport"
	ImplementationGuideLicenseHPND                           ImplementationGuideLicense = "HPND"
	ImplementationGuideLicenseIBMPibs                        ImplementationGuideLicense = "IBM-pibs"
	ImplementationGuideLicenseICU                            ImplementationGuideLicense = "ICU"
	ImplementationGuideLicenseIJG                            ImplementationGuideLicense = "IJG"
	ImplementationGuideLicenseImageMagick                    ImplementationGuideLicense = "ImageMagick"
	ImplementationGuideLicenseIMatix                         ImplementationGuideLicense = "iMatix"
	ImplementationGuideLicenseImlib2                         ImplementationGuideLicense = "Imlib2"
	ImplementationGuideLicenseInfoZIP                        ImplementationGuideLicense = "Info-ZIP"
	ImplementationGuideLicenseIntelACPI                      ImplementationGuideLicense = "Intel-ACPI"
	ImplementationGuideLicenseIntel                          ImplementationGuideLicense = "Intel"
	ImplementationGuideLicenseInterbase1_0                   ImplementationGuideLicense = "Interbase-1.0"
	ImplementationGuideLicenseIPA                            ImplementationGuideLicense = "IPA"
	ImplementationGuideLicenseIPL1_0                         ImplementationGuideLicense = "IPL-1.0"
	ImplementationGuideLicenseISC                            ImplementationGuideLicense = "ISC"
	ImplementationGuideLicenseJasPer2_0                      ImplementationGuideLicense = "JasPer-2.0"
	ImplementationGuideLicenseJSON                           ImplementationGuideLicense = "JSON"
	ImplementationGuideLicenseLAL1_2                         ImplementationGuideLicense = "LAL-1.2"
	ImplementationGuideLicenseLAL1_3                         ImplementationGuideLicense = "LAL-1.3"
	ImplementationGuideLicenseLatex2e                        ImplementationGuideLicense = "Latex2e"
	ImplementationGuideLicenseLeptonica                      ImplementationGuideLicense = "Leptonica"
	ImplementationGuideLicenseLGPL2_0Only                    ImplementationGuideLicense = "LGPL-2.0-only"
	ImplementationGuideLicenseLGPL2_0OrLater                 ImplementationGuideLicense = "LGPL-2.0-or-later"
	ImplementationGuideLicenseLGPL2_1Only                    ImplementationGuideLicense = "LGPL-2.1-only"
	ImplementationGuideLicenseLGPL2_1OrLater                 ImplementationGuideLicense = "LGPL-2.1-or-later"
	ImplementationGuideLicenseLGPL3_0Only                    ImplementationGuideLicense = "LGPL-3.0-only"
	ImplementationGuideLicenseLGPL3_0OrLater                 ImplementationGuideLicense = "LGPL-3.0-or-later"
	ImplementationGuideLicenseLGPLLR                         ImplementationGuideLicense = "LGPLLR"
	ImplementationGuideLicenseLibpng                         ImplementationGuideLicense = "Libpng"
	ImplementationGuideLicenseLibtiff                        ImplementationGuideLicense = "libtiff"
	ImplementationGuideLicenseLiLiQP1_1                      ImplementationGuideLicense = "LiLiQ-P-1.1"
	ImplementationGuideLicenseLiLiQR1_1                      ImplementationGuideLicense = "LiLiQ-R-1.1"
	ImplementationGuideLicenseLiLiQRplus1_1                  ImplementationGuideLicense = "LiLiQ-Rplus-1.1"
	ImplementationGuideLicenseLinuxOpenIB                    ImplementationGuideLicense = "Linux-OpenIB"
	ImplementationGuideLicenseLPL1_0                         ImplementationGuideLicense = "LPL-1.0"
	ImplementationGuideLicenseLPL1_02                        ImplementationGuideLicense = "LPL-1.02"
	ImplementationGuideLicenseLPPL1_0                        ImplementationGuideLicense = "LPPL-1.0"
	ImplementationGuideLicenseLPPL1_1                        ImplementationGuideLicense = "LPPL-1.1"
	ImplementationGuideLicenseLPPL1_2                        ImplementationGuideLicense = "LPPL-1.2"
	ImplementationGuideLicenseLPPL1_3a                       ImplementationGuideLicense = "LPPL-1.3a"
	ImplementationGuideLicenseLPPL1_3c                       ImplementationGuideLicense = "LPPL-1.3c"
	ImplementationGuideLicenseMakeIndex                      ImplementationGuideLicense = "MakeIndex"
	ImplementationGuideLicenseMirOS                          ImplementationGuideLicense = "MirOS"
	ImplementationGuideLicenseMIT0                           ImplementationGuideLicense = "MIT-0"
	ImplementationGuideLicenseMITAdvertising                 ImplementationGuideLicense = "MIT-advertising"
	ImplementationGuideLicenseMITCMU                         ImplementationGuideLicense = "MIT-CMU"
	ImplementationGuideLicenseMITEnna                        ImplementationGuideLicense = "MIT-enna"
	ImplementationGuideLicenseMITFeh                         ImplementationGuideLicense = "MIT-feh"
	ImplementationGuideLicenseMIT                            ImplementationGuideLicense = "MIT"
	ImplementationGuideLicenseMITNFA                         ImplementationGuideLicense = "MITNFA"
	ImplementationGuideLicenseMotosoto                       ImplementationGuideLicense = "Motosoto"
	ImplementationGuideLicenseMpich2                         ImplementationGuideLicense = "mpich2"
	ImplementationGuideLicenseMPL1_0                         ImplementationGuideLicense = "MPL-1.0"
	ImplementationGuideLicenseMPL1_1                         ImplementationGuideLicense = "MPL-1.1"
	ImplementationGuideLicenseMPL2_0NoCopyleftException      ImplementationGuideLicense = "MPL-2.0-no-copyleft-exception"
	ImplementationGuideLicenseMPL2_0                         ImplementationGuideLicense = "MPL-2.0"
	ImplementationGuideLicenseMSPL                           ImplementationGuideLicense = "MS-PL"
	ImplementationGuideLicenseMSRL                           ImplementationGuideLicense = "MS-RL"
	ImplementationGuideLicenseMTLL                           ImplementationGuideLicense = "MTLL"
	ImplementationGuideLicenseMultics                        ImplementationGuideLicense = "Multics"
	ImplementationGuideLicenseMup                            ImplementationGuideLicense = "Mup"
	ImplementationGuideLicenseNASA1_3                        ImplementationGuideLicense = "NASA-1.3"
	ImplementationGuideLicenseNaumen                         ImplementationGuideLicense = "Naumen"
	ImplementationGuideLicenseNBPL1_0                        ImplementationGuideLicense = "NBPL-1.0"
	ImplementationGuideLicenseNCSA                           ImplementationGuideLicense = "NCSA"
	ImplementationGuideLicenseNetSNMP                        ImplementationGuideLicense = "Net-SNMP"
	ImplementationGuideLicenseNetCDF                         ImplementationGuideLicense = "NetCDF"
	ImplementationGuideLicenseNewsletr                       ImplementationGuideLicense = "Newsletr"
	ImplementationGuideLicenseNGPL                           ImplementationGuideLicense = "NGPL"
	ImplementationGuideLicenseNLOD1_0                        ImplementationGuideLicense = "NLOD-1.0"
	ImplementationGuideLicenseNLPL                           ImplementationGuideLicense = "NLPL"
	ImplementationGuideLicenseNokia                          ImplementationGuideLicense = "Nokia"
	ImplementationGuideLicenseNOSL                           ImplementationGuideLicense = "NOSL"
	ImplementationGuideLicenseNoweb                          ImplementationGuideLicense = "Noweb"
	ImplementationGuideLicenseNPL1_0                         ImplementationGuideLicense = "NPL-1.0"
	ImplementationGuideLicenseNPL1_1                         ImplementationGuideLicense = "NPL-1.1"
	ImplementationGuideLicenseNPOSL3_0                       ImplementationGuideLicense = "NPOSL-3.0"
	ImplementationGuideLicenseNRL                            ImplementationGuideLicense = "NRL"
	ImplementationGuideLicenseNTP                            ImplementationGuideLicense = "NTP"
	ImplementationGuideLicenseOCCTPL                         ImplementationGuideLicense = "OCCT-PL"
	ImplementationGuideLicenseOCLC2_0                        ImplementationGuideLicense = "OCLC-2.0"
	ImplementationGuideLicenseODbL1_0                        ImplementationGuideLicense = "ODbL-1.0"
	ImplementationGuideLicenseOFL1_0                         ImplementationGuideLicense = "OFL-1.0"
	ImplementationGuideLicenseOFL1_1                         ImplementationGuideLicense = "OFL-1.1"
	ImplementationGuideLicenseOGTSL                          ImplementationGuideLicense = "OGTSL"
	ImplementationGuideLicenseOLDAP1_1                       ImplementationGuideLicense = "OLDAP-1.1"
	ImplementationGuideLicenseOLDAP1_2                       ImplementationGuideLicense = "OLDAP-1.2"
	ImplementationGuideLicenseOLDAP1_3                       ImplementationGuideLicense = "OLDAP-1.3"
	ImplementationGuideLicenseOLDAP1_4                       ImplementationGuideLicense = "OLDAP-1.4"
	ImplementationGuideLicenseOLDAP2_0_1                     ImplementationGuideLicense = "OLDAP-2.0.1"
	ImplementationGuideLicenseOLDAP2_0                       ImplementationGuideLicense = "OLDAP-2.0"
	ImplementationGuideLicenseOLDAP2_1                       ImplementationGuideLicense = "OLDAP-2.1"
	ImplementationGuideLicenseOLDAP2_2_1                     ImplementationGuideLicense = "OLDAP-2.2.1"
	ImplementationGuideLicenseOLDAP2_2_2                     ImplementationGuideLicense = "OLDAP-2.2.2"
	ImplementationGuideLicenseOLDAP2_2                       ImplementationGuideLicense = "OLDAP-2.2"
	ImplementationGuideLicenseOLDAP2_3                       ImplementationGuideLicense = "OLDAP-2.3"
	ImplementationGuideLicenseOLDAP2_4                       ImplementationGuideLicense = "OLDAP-2.4"
	ImplementationGuideLicenseOLDAP2_5                       ImplementationGuideLicense = "OLDAP-2.5"
	ImplementationGuideLicenseOLDAP2_6                       ImplementationGuideLicense = "OLDAP-2.6"
	ImplementationGuideLicenseOLDAP2_7                       ImplementationGuideLicense = "OLDAP-2.7"
	ImplementationGuideLicenseOLDAP2_8                       ImplementationGuideLicense = "OLDAP-2.8"
	ImplementationGuideLicenseOML                            ImplementationGuideLicense = "OML"
	ImplementationGuideLicenseOpenSSL                        ImplementationGuideLicense = "OpenSSL"
	ImplementationGuideLicenseOPL1_0                         ImplementationGuideLicense = "OPL-1.0"
	ImplementationGuideLicenseOSETPL2_1                      ImplementationGuideLicense = "OSET-PL-2.1"
	ImplementationGuideLicenseOSL1_0                         ImplementationGuideLicense = "OSL-1.0"
	ImplementationGuideLicenseOSL1_1                         ImplementationGuideLicense = "OSL-1.1"
	ImplementationGuideLicenseOSL2_0                         ImplementationGuideLicense = "OSL-2.0"
	ImplementationGuideLicenseOSL2_1                         ImplementationGuideLicense = "OSL-2.1"
	ImplementationGuideLicenseOSL3_0                         ImplementationGuideLicense = "OSL-3.0"
	ImplementationGuideLicensePDDL1_0                        ImplementationGuideLicense = "PDDL-1.0"
	ImplementationGuideLicensePHP3_0                         ImplementationGuideLicense = "PHP-3.0"
	ImplementationGuideLicensePHP3_01                        ImplementationGuideLicense = "PHP-3.01"
	ImplementationGuideLicensePlexus                         ImplementationGuideLicense = "Plexus"
	ImplementationGuideLicensePostgreSQL                     ImplementationGuideLicense = "PostgreSQL"
	ImplementationGuideLicensePsfrag                         ImplementationGuideLicense = "psfrag"
	ImplementationGuideLicensePsutils                        ImplementationGuideLicense = "psutils"
	ImplementationGuideLicensePython2_0                      ImplementationGuideLicense = "Python-2.0"
	ImplementationGuideLicenseQhull                          ImplementationGuideLicense = "Qhull"
	ImplementationGuideLicenseQPL1_0                         ImplementationGuideLicense = "QPL-1.0"
	ImplementationGuideLicenseRdisc                          ImplementationGuideLicense = "Rdisc"
	ImplementationGuideLicenseRHeCos1_1                      ImplementationGuideLicense = "RHeCos-1.1"
	ImplementationGuideLicenseRPL1_1                         ImplementationGuideLicense = "RPL-1.1"
	ImplementationGuideLicenseRPL1_5                         ImplementationGuideLicense = "RPL-1.5"
	ImplementationGuideLicenseRPSL1_0                        ImplementationGuideLicense = "RPSL-1.0"
	ImplementationGuideLicenseRSAMD                          ImplementationGuideLicense = "RSA-MD"
	ImplementationGuideLicenseRSCPL                          ImplementationGuideLicense = "RSCPL"
	ImplementationGuideLicenseRuby                           ImplementationGuideLicense = "Ruby"
	ImplementationGuideLicenseSAXPD                          ImplementationGuideLicense = "SAX-PD"
	ImplementationGuideLicenseSaxpath                        ImplementationGuideLicense = "Saxpath"
	ImplementationGuideLicenseSCEA                           ImplementationGuideLicense = "SCEA"
	ImplementationGuideLicenseSendmail                       ImplementationGuideLicense = "Sendmail"
	ImplementationGuideLicenseSGIB1_0                        ImplementationGuideLicense = "SGI-B-1.0"
	ImplementationGuideLicenseSGIB1_1                        ImplementationGuideLicense = "SGI-B-1.1"
	ImplementationGuideLicenseSGIB2_0                        ImplementationGuideLicense = "SGI-B-2.0"
	ImplementationGuideLicenseSimPL2_0                       ImplementationGuideLicense = "SimPL-2.0"
	ImplementationGuideLicenseSISSL1_2                       ImplementationGuideLicense = "SISSL-1.2"
	ImplementationGuideLicenseSISSL                          ImplementationGuideLicense = "SISSL"
	ImplementationGuideLicenseSleepycat                      ImplementationGuideLicense = "Sleepycat"
	ImplementationGuideLicenseSMLNJ                          ImplementationGuideLicense = "SMLNJ"
	ImplementationGuideLicenseSMPPL                          ImplementationGuideLicense = "SMPPL"
	ImplementationGuideLicenseSNIA                           ImplementationGuideLicense = "SNIA"
	ImplementationGuideLicenseSpencer86                      ImplementationGuideLicense = "Spencer-86"
	ImplementationGuideLicenseSpencer94                      ImplementationGuideLicense = "Spencer-94"
	ImplementationGuideLicenseSpencer99                      ImplementationGuideLicense = "Spencer-99"
	ImplementationGuideLicenseSPL1_0                         ImplementationGuideLicense = "SPL-1.0"
	ImplementationGuideLicenseSugarCRM1_1_3                  ImplementationGuideLicense = "SugarCRM-1.1.3"
	ImplementationGuideLicenseSWL                            ImplementationGuideLicense = "SWL"
	ImplementationGuideLicenseTCL                            ImplementationGuideLicense = "TCL"
	ImplementationGuideLicenseTCPWrappers                    ImplementationGuideLicense = "TCP-wrappers"
	ImplementationGuideLicenseTMate                          ImplementationGuideLicense = "TMate"
	ImplementationGuideLicenseTORQUE1_1                      ImplementationGuideLicense = "TORQUE-1.1"
	ImplementationGuideLicenseTOSL                           ImplementationGuideLicense = "TOSL"
	ImplementationGuideLicenseUnicodeDFS2015                 ImplementationGuideLicense = "Unicode-DFS-2015"
	ImplementationGuideLicenseUnicodeDFS2016                 ImplementationGuideLicense = "Unicode-DFS-2016"
	ImplementationGuideLicenseUnicodeTOU                     ImplementationGuideLicense = "Unicode-TOU"
	ImplementationGuideLicenseUnlicense                      ImplementationGuideLicense = "Unlicense"
	ImplementationGuideLicenseUPL1_0                         ImplementationGuideLicense = "UPL-1.0"
	ImplementationGuideLicenseVim                            ImplementationGuideLicense = "Vim"
	ImplementationGuideLicenseVOSTROM                        ImplementationGuideLicense = "VOSTROM"
	ImplementationGuideLicenseVSL1_0                         ImplementationGuideLicense = "VSL-1.0"
	ImplementationGuideLicenseW3C19980720                    ImplementationGuideLicense = "W3C-19980720"
	ImplementationGuideLicenseW3C20150513                    ImplementationGuideLicense = "W3C-20150513"
	ImplementationGuideLicenseW3C                            ImplementationGuideLicense = "W3C"
	ImplementationGuideLicenseWatcom1_0                      ImplementationGuideLicense = "Watcom-1.0"
	ImplementationGuideLicenseWsuipa                         ImplementationGuideLicense = "Wsuipa"
	ImplementationGuideLicenseWTFPL                          ImplementationGuideLicense = "WTFPL"
	ImplementationGuideLicenseX11                            ImplementationGuideLicense = "X11"
	ImplementationGuideLicenseXerox                          ImplementationGuideLicense = "Xerox"
	ImplementationGuideLicenseXFree861_1                     ImplementationGuideLicense = "XFree86-1.1"
	ImplementationGuideLicenseXinetd                         ImplementationGuideLicense = "xinetd"
	ImplementationGuideLicenseXnet                           ImplementationGuideLicense = "Xnet"
	ImplementationGuideLicenseXpp                            ImplementationGuideLicense = "xpp"
	ImplementationGuideLicenseXSkat                          ImplementationGuideLicense = "XSkat"
	ImplementationGuideLicenseYPL1_0                         ImplementationGuideLicense = "YPL-1.0"
	ImplementationGuideLicenseYPL1_1                         ImplementationGuideLicense = "YPL-1.1"
	ImplementationGuideLicenseZed                            ImplementationGuideLicense = "Zed"
	ImplementationGuideLicenseZend2_0                        ImplementationGuideLicense = "Zend-2.0"
	ImplementationGuideLicenseZimbra1_3                      ImplementationGuideLicense = "Zimbra-1.3"
	ImplementationGuideLicenseZimbra1_4                      ImplementationGuideLicense = "Zimbra-1.4"
	ImplementationGuideLicenseZlibAcknowledgement            ImplementationGuideLicense = "zlib-acknowledgement"
	ImplementationGuideLicenseZlib                           ImplementationGuideLicense = "Zlib"
	ImplementationGuideLicenseZPL1_1                         ImplementationGuideLicense = "ZPL-1.1"
	ImplementationGuideLicenseZPL2_0                         ImplementationGuideLicense = "ZPL-2.0"
	ImplementationGuideLicenseZPL2_1                         ImplementationGuideLicense = "ZPL-2.1"
	ImplementationGuideStatusDraft                           ImplementationGuideStatus  = "draft"
	ImplementationGuideStatusActive                          ImplementationGuideStatus  = "active"
	ImplementationGuideStatusRetired                         ImplementationGuideStatus  = "retired"
	ImplementationGuideStatusUnknown                         ImplementationGuideStatus  = "unknown"
)

// MedicationKnowledge is Information about a medication that is used to support knowledge.
type MedicationKnowledge struct {
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Describes the form of the item.  Powder; tablets; capsule.
	DoseForm *CodeableConcept `json:"doseForm"`
	// Associated or related knowledge about a medication.
	RelatedMedicationKnowledge []*MedicationKnowledge_RelatedMedicationKnowledge `json:"relatedMedicationKnowledge"`
	// Potential clinical issue with or between medication(s) (for example, drug-drug
	// interaction, drug-disease contraindication, drug-allergy interaction, etc.).
	Contraindication []*Reference `json:"contraindication"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Describes the details of the manufacturer of the medication product.  This is not
	// intended to represent the distributor of a medication product.
	Manufacturer *Reference `json:"manufacturer"`
	// Information that only applies to packages (not products).
	Packaging *MedicationKnowledge_Packaging `json:"packaging"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for synonym
	Synonym_ext []*Element `json:"_synonym"`
	// Category of the medication or product (e.g. branded product, therapeutic moeity,
	// generic product, innovator product, etc.).
	ProductType []*CodeableConcept `json:"productType"`
	// The time course of drug absorption, distribution, metabolism and excretion of a
	// medication from the body.
	Kinetics []*MedicationKnowledge_Kinetics `json:"kinetics"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Associated documentation about the medication.
	Monograph []*MedicationKnowledge_Monograph `json:"monograph"`
	// Identifies a particular constituent of interest in the product.
	Ingredient []*MedicationKnowledge_Ingredient `json:"ingredient"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A code that specifies this medication, or a textual description if no code is
	// available. Usage note: This could be a standard medication code such as a code from
	// RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code,
	// optionally with translations to other code systems.
	Code *CodeableConcept `json:"code"`
	// Extensions for preparationInstruction
	PreparationInstruction_ext *Element `json:"_preparationInstruction"`
	// The intended or approved route of administration.
	IntendedRoute []*CodeableConcept `json:"intendedRoute"`
	// Specifies descriptive properties of the medicine, such as color, shape, imprints,
	// etc.
	DrugCharacteristic []*MedicationKnowledge_DrugCharacteristic `json:"drugCharacteristic"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Specific amount of the drug in the packaged product.  For example, when specifying a
	// product that has the same strength (For example, Insulin glargine 100 unit per mL
	// solution for injection), this attribute provides additional clarification of the
	// package amount (For example, 3 mL, 10mL, etc.).
	Amount *Quantity `json:"amount"`
	// Categorization of the medication within a formulary or classification system.
	MedicineClassification []*MedicationKnowledge_MedicineClassification `json:"medicineClassification"`
	// Regulatory information about a medication.
	Regulatory []*MedicationKnowledge_Regulatory `json:"regulatory"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A code to indicate if the medication is in active use.  The status refers to the
	// validity about the information of the medication and not to its medicinal properties.
	Status string `json:"status"`
	// Additional names for a medication, for example, the name(s) given to a medication in
	// different countries.  For example, acetaminophen and paracetamol or salbutamol and
	// albuterol.
	Synonym []string `json:"synonym"`
	// The instructions for preparing the medication.
	PreparationInstruction string `json:"preparationInstruction"`
	// The price of the medication.
	Cost []*MedicationKnowledge_Cost `json:"cost"`
	// The program under which the medication is reviewed.
	MonitoringProgram []*MedicationKnowledge_MonitoringProgram `json:"monitoringProgram"`
	// Guidelines for the administration of the medication.
	AdministrationGuidelines []*MedicationKnowledge_AdministrationGuidelines `json:"administrationGuidelines"`
	// Associated or related medications.  For example, if the medication is a branded
	// product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if
	// this is a generic medication (e.g. Rosuvastatin), this would link to a branded
	// product (e.g. Crestor).
	AssociatedMedication []*Reference `json:"associatedMedication"`
}

func (t *MedicationKnowledge) ResourceType() string {
	return "MedicationKnowledge"
}
func (t *MedicationKnowledge) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MedicationKnowledge
		ResourceType string `json:"resourceType"`
	}{
		MedicationKnowledge: *t,
		ResourceType:        t.ResourceType(),
	})
}

// GuidanceResponse is A guidance response is the formal response to a guidance request, including any
// output parameters returned by the evaluation, as well as the description of any
// proposed actions to be taken.
type GuidanceResponse struct {
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for occurrenceDateTime
	OccurrenceDateTime_ext *Element `json:"_occurrenceDateTime"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for moduleUri
	ModuleUri_ext *Element `json:"_moduleUri"`
	// The patient for which the request was processed.
	Subject *Reference `json:"subject"`
	// The identifier of the request associated with this response. If an identifier was
	// given as part of the request, it will be reproduced here to enable the requester to
	// more easily identify the response in a multi-request scenario.
	RequestIdentifier *Identifier `json:"requestIdentifier"`
	// If the evaluation could not be completed due to lack of information, or additional
	// information would potentially result in a more accurate response, this element will
	// a description of the data required in order to proceed with the evaluation. A
	// subsequent request to the service should include this data.
	DataRequirement []*DataRequirement `json:"dataRequirement"`
	// Extensions for moduleCanonical
	ModuleCanonical_ext *Element `json:"_moduleCanonical"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Indicates when the guidance response was processed.
	OccurrenceDateTime string `json:"occurrenceDateTime"`
	// Describes the reason for the guidance response in coded or textual form.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// The actions, if any, produced by the evaluation of the artifact.
	Result *Reference `json:"result"`
	// Allows a service to provide  unique, business identifiers for the response.
	Identifier []*Identifier `json:"identifier"`
	// An identifier, CodeableConcept or canonical reference to the guidance that was
	// requested.
	ModuleCodeableConcept *CodeableConcept `json:"moduleCodeableConcept"`
	// Indicates the reason the request was initiated. This is typically provided as a
	// parameter to the evaluation and echoed by the service, although for some use cases,
	// such as subscription- or event-based scenarios, it may provide an indication of the
	// cause for the response.
	ReasonReference []*Reference `json:"reasonReference"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The encounter during which this response was created or to which the creation of
	// this record is tightly associated.
	Encounter *Reference `json:"encounter"`
	// Provides a reference to the device that performed the guidance.
	Performer *Reference `json:"performer"`
	// Provides a mechanism to communicate additional information about the response.
	Note []*Annotation `json:"note"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// An identifier, CodeableConcept or canonical reference to the guidance that was
	// requested.
	// pattern ^\S*$
	ModuleUri string `json:"moduleUri"`
	// An identifier, CodeableConcept or canonical reference to the guidance that was
	// requested.
	// pattern ^\S*$
	ModuleCanonical string `json:"moduleCanonical"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The status of the response. If the evaluation is completed successfully, the status
	// will indicate success. However, in order to complete the evaluation, the engine may
	// require more information. In this case, the status will be data-required, and the
	// response will contain a description of the additional required information. If the
	// evaluation completed successfully, but the engine determines that a potentially more
	// accurate response could be provided if more data was available, the status will be
	// data-requested, and the response will contain a description of the additional
	// requested information.
	Status GuidanceResponseStatus `json:"status"`
	// Messages resulting from the evaluation of the artifact or artifacts. As part of
	// evaluating the request, the engine may produce informational or warning messages.
	// These messages will be provided by this element.
	EvaluationMessage []*Reference `json:"evaluationMessage"`
	// The output parameters of the evaluation, if any. Many modules will result in the
	// return of specific resources such as procedure or communication requests that are
	// returned as part of the operation result. However, modules may define specific
	// outputs that would be returned as the result of the evaluation, and these would be
	// returned in this element.
	OutputParameters *Reference `json:"outputParameters"`
}

func (t *GuidanceResponse) ResourceType() string {
	return "GuidanceResponse"
}
func (t *GuidanceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		GuidanceResponse
		ResourceType string `json:"resourceType"`
	}{
		GuidanceResponse: *t,
		ResourceType:     t.ResourceType(),
	})
}

type GuidanceResponseStatus string

const (
	GuidanceResponseStatusSuccess        GuidanceResponseStatus = "success"
	GuidanceResponseStatusDataRequested  GuidanceResponseStatus = "data-requested"
	GuidanceResponseStatusDataRequired   GuidanceResponseStatus = "data-required"
	GuidanceResponseStatusInProgress     GuidanceResponseStatus = "in-progress"
	GuidanceResponseStatusFailure        GuidanceResponseStatus = "failure"
	GuidanceResponseStatusEnteredInError GuidanceResponseStatus = "entered-in-error"
)

// ImmunizationRecommendation is A patient's point-in-time set of recommendations (i.e. forecasting) according to a
// published schedule with optional supporting justification.
type ImmunizationRecommendation struct {
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The patient the recommendation(s) are for.
	Patient *Reference `json:"patient,omitempty"`
	// Vaccine administration recommendations.
	Recommendation []*ImmunizationRecommendation_Recommendation `json:"recommendation,omitempty"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A unique identifier assigned to this particular recommendation record.
	Identifier []*Identifier `json:"identifier"`
	// The date the immunization recommendation(s) were created.
	Date string `json:"date"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Indicates the authority who published the protocol (e.g. ACIP).
	Authority *Reference `json:"authority"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
}

func (t *ImmunizationRecommendation) ResourceType() string {
	return "ImmunizationRecommendation"
}
func (t *ImmunizationRecommendation) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ImmunizationRecommendation
		ResourceType string `json:"resourceType"`
	}{
		ImmunizationRecommendation: *t,
		ResourceType:               t.ResourceType(),
	})
}

// PractitionerRole is A specific set of Roles/Locations/specialties/services that a practitioner may
// perform at an organization for a period of time.
type PractitionerRole struct {
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The location(s) at which this practitioner provides care.
	Location []*Reference `json:"location"`
	// Extensions for active
	Active_ext *Element `json:"_active"`
	// Practitioner that is able to provide the defined services for the organization.
	Practitioner *Reference `json:"practitioner"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Contact details that are specific to the role/location/service.
	Telecom []*ContactPoint `json:"telecom"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for availabilityExceptions
	AvailabilityExceptions_ext *Element `json:"_availabilityExceptions"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Whether this practitioner role record is in active use.
	Active bool `json:"active"`
	// The period during which the person is authorized to act as a practitioner in these
	// role(s) for the organization.
	Period *Period `json:"period"`
	// The organization where the Practitioner performs the roles associated.
	Organization *Reference `json:"organization"`
	// Roles which this practitioner is authorized to perform for the organization.
	Code []*CodeableConcept `json:"code"`
	// The practitioner is not available or performing this role during this period of time
	// due to the provided reason.
	NotAvailable []*PractitionerRole_NotAvailable `json:"notAvailable"`
	// Business Identifiers that are specific to a role/location.
	Identifier []*Identifier `json:"identifier"`
	// A collection of times the practitioner is available or performing this role at the
	// location and/or healthcareservice.
	AvailableTime []*PractitionerRole_AvailableTime `json:"availableTime"`
	// A description of site availability exceptions, e.g. public holiday availability.
	// Succinctly describing all possible exceptions to normal site availability as details
	// in the available Times and not available Times.
	AvailabilityExceptions string `json:"availabilityExceptions"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Specific specialty of the practitioner.
	Specialty []*CodeableConcept `json:"specialty"`
	// The list of healthcare services that this worker provides for this role's
	// Organization/Location(s).
	HealthcareService []*Reference `json:"healthcareService"`
	// Technical endpoints providing access to services operated for the practitioner with
	// this role.
	Endpoint []*Reference `json:"endpoint"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

func (t *PractitionerRole) ResourceType() string {
	return "PractitionerRole"
}
func (t *PractitionerRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		PractitionerRole
		ResourceType string `json:"resourceType"`
	}{
		PractitionerRole: *t,
		ResourceType:     t.ResourceType(),
	})
}

// SubstanceSpecification is The detailed description of a substance, typically at a level beyond what is used
// for prescribing.
type SubstanceSpecification struct {
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// If the substance applies to only human or veterinary use.
	Domain *CodeableConcept `json:"domain"`
	// A link between this substance and another, with details of the relationship.
	Relationship []*SubstanceSpecification_Relationship `json:"relationship"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Status of substance within the catalogue e.g. approved.
	Status *CodeableConcept `json:"status"`
	// Codes associated with the substance.
	Code []*SubstanceSpecification_Code `json:"code"`
	// Data items specific to nucleic acids.
	NucleicAcid *Reference `json:"nucleicAcid"`
	// Data items specific to polymers.
	Polymer *Reference `json:"polymer"`
	// Data items specific to proteins.
	Protein *Reference `json:"protein"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// High level categorization, e.g. polymer or nucleic acid.
	Type *CodeableConcept `json:"type"`
	// Moiety, for structural modifications.
	Moiety []*SubstanceSpecification_Moiety `json:"moiety"`
	// General information detailing this substance.
	ReferenceInformation *Reference `json:"referenceInformation"`
	// Identifier by which this substance is known.
	Identifier *Identifier `json:"identifier"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Structural information.
	Structure *SubstanceSpecification_Structure `json:"structure"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// General specifications for this substance, including how it is related to other
	// substances.
	Property []*SubstanceSpecification_Property `json:"property"`
	// The molecular weight or weight range (for proteins, polymers or nucleic acids).
	MolecularWeight []*SubstanceSpecification_MolecularWeight `json:"molecularWeight"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Supporting literature.
	Source []*Reference `json:"source"`
	// Textual comment about this record of a substance.
	Comment string `json:"comment"`
	// Names applicable to this substance.
	Name []*SubstanceSpecification_Name `json:"name"`
	// Textual description of the substance.
	Description string `json:"description"`
	// Material or taxonomic/anatomical source for the substance.
	SourceMaterial *Reference `json:"sourceMaterial"`
}

func (t *SubstanceSpecification) ResourceType() string {
	return "SubstanceSpecification"
}
func (t *SubstanceSpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		SubstanceSpecification
		ResourceType string `json:"resourceType"`
	}{
		SubstanceSpecification: *t,
		ResourceType:           t.ResourceType(),
	})
}

// Basic is Basic is used for handling concepts not yet defined in FHIR, narrative-only
// resources that don't map to an existing resource, and custom resources not
// appropriate for inclusion in the FHIR specification.
type Basic struct {
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Identifies the 'type' of resource - equivalent to the resource name for other
	// resources.
	Code *CodeableConcept `json:"code,omitempty"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Identifies the patient, practitioner, device or any other resource that is the
	// "focus" of this resource.
	Subject *Reference `json:"subject"`
	// Extensions for created
	Created_ext *Element `json:"_created"`
	// Indicates who was responsible for creating the resource instance.
	Author *Reference `json:"author"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifier assigned to the resource for business purposes, outside the context of
	// FHIR.
	Identifier []*Identifier `json:"identifier"`
	// Identifies when the resource was first created.
	Created string `json:"created"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

func (t *Basic) ResourceType() string {
	return "Basic"
}
func (t *Basic) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Basic
		ResourceType string `json:"resourceType"`
	}{
		Basic:        *t,
		ResourceType: t.ResourceType(),
	})
}

// Device is A type of a manufactured item that is used in the provision of healthcare without
// being substantially changed through that activity. The device may be a medical or
// non-medical device.
type Device struct {
	// Status of the Device availability.
	Status DeviceStatus `json:"status"`
	// Lot number assigned by the manufacturer.
	LotNumber string `json:"lotNumber"`
	// The serial number assigned by the organization when the device was manufactured.
	SerialNumber string `json:"serialNumber"`
	// Extensions for serialNumber
	SerialNumber_ext *Element `json:"_serialNumber"`
	// The part number of the device.
	PartNumber string `json:"partNumber"`
	// An organization that is responsible for the provision and ongoing maintenance of the
	// device.
	Owner *Reference `json:"owner"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The reference to the definition for the device.
	Definition *Reference `json:"definition"`
	// Contact details for an organization or a particular human that is responsible for
	// the device.
	Contact []*ContactPoint `json:"contact"`
	// The place where the device can be found.
	Location *Reference `json:"location"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for manufacturer
	Manufacturer_ext *Element `json:"_manufacturer"`
	// The actual configuration settings of a device as it actually operates, e.g.,
	// regulation status, time properties.
	Property []*Device_Property `json:"property"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Unique device identifier (UDI) assigned to device label or package.  Note that the
	// Device may include multiple udiCarriers as it either may include just the udiCarrier
	// for the jurisdiction it is sold, or for multiple jurisdictions it could have been
	// sold.
	UdiCarrier []*Device_UdiCarrier `json:"udiCarrier"`
	// Extensions for distinctIdentifier
	DistinctIdentifier_ext *Element `json:"_distinctIdentifier"`
	// Reason for the dtatus of the Device availability.
	StatusReason []*CodeableConcept `json:"statusReason"`
	// Extensions for manufactureDate
	ManufactureDate_ext *Element `json:"_manufactureDate"`
	// The capabilities supported on a  device, the standards to which the device conforms
	// for a particular purpose, and used for the communication.
	Specialization []*Device_Specialization `json:"specialization"`
	// Patient information, If the device is affixed to a person.
	Patient *Reference `json:"patient"`
	// The parent device.
	Parent *Reference `json:"parent"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The date and time when the device was manufactured.
	ManufactureDate string `json:"manufactureDate"`
	// This represents the manufacturer's name of the device as provided by the device,
	// from a UDI label, or by a person describing the Device.  This typically would be
	// used when a person provides the name(s) or when the device represents one of the
	// names available from DeviceDefinition.
	DeviceName []*Device_DeviceName `json:"deviceName"`
	// The model number for the device.
	ModelNumber string `json:"modelNumber"`
	// Extensions for modelNumber
	ModelNumber_ext *Element `json:"_modelNumber"`
	// The kind or type of device.
	Type *CodeableConcept `json:"type"`
	// Descriptive information, usage information or implantation information that is not
	// captured in an existing element.
	Note []*Annotation `json:"note"`
	// Provides additional safety characteristics about a medical device.  For example
	// devices containing latex.
	Safety []*CodeableConcept `json:"safety"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The date and time beyond which this device is no longer valid or should not be used
	// (if applicable).
	ExpirationDate string `json:"expirationDate"`
	// Extensions for lotNumber
	LotNumber_ext *Element `json:"_lotNumber"`
	// A network address on which the device may be contacted directly.
	Url string `json:"url"`
	// The distinct identification string as required by regulation for a human cell,
	// tissue, or cellular and tissue-based product.
	DistinctIdentifier string `json:"distinctIdentifier"`
	// Extensions for expirationDate
	ExpirationDate_ext *Element `json:"_expirationDate"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Unique instance identifiers assigned to a device by manufacturers other
	// organizations or owners.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A name of the manufacturer.
	Manufacturer string `json:"manufacturer"`
	// Extensions for partNumber
	PartNumber_ext *Element `json:"_partNumber"`
	// The actual design of the device or software version running on the device.
	Version []*Device_Version `json:"version"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
}

func (t *Device) ResourceType() string {
	return "Device"
}
func (t *Device) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Device
		ResourceType string `json:"resourceType"`
	}{
		Device:       *t,
		ResourceType: t.ResourceType(),
	})
}

type DeviceStatus string

const (
	DeviceStatusActive         DeviceStatus = "active"
	DeviceStatusInactive       DeviceStatus = "inactive"
	DeviceStatusEnteredInError DeviceStatus = "entered-in-error"
	DeviceStatusUnknown        DeviceStatus = "unknown"
)

// EnrollmentRequest is This resource provides the insurance enrollment details to the insurer regarding a
// specified coverage.
type EnrollmentRequest struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The Insurer who is target  of the request.
	Insurer *Reference `json:"insurer"`
	// The practitioner who is responsible for the services rendered to the patient.
	Provider *Reference `json:"provider"`
	// The Response business identifier.
	Identifier []*Identifier `json:"identifier"`
	// The status of the resource instance.
	Status string `json:"status"`
	// Extensions for created
	Created_ext *Element `json:"_created"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Patient Resource.
	Candidate *Reference `json:"candidate"`
	// Reference to the program or plan identification, underwriter or payor.
	Coverage *Reference `json:"coverage"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The date when this resource was created.
	Created string `json:"created"`
}

func (t *EnrollmentRequest) ResourceType() string {
	return "EnrollmentRequest"
}
func (t *EnrollmentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		EnrollmentRequest
		ResourceType string `json:"resourceType"`
	}{
		EnrollmentRequest: *t,
		ResourceType:      t.ResourceType(),
	})
}

// EventDefinition is The EventDefinition resource provides a reusable description of when a particular
// event can occur.
type EventDefinition struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Explanation of why this event definition is needed and why it has been designed as
	// it has.
	Purpose string `json:"purpose"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// A copyright statement relating to the event definition and/or its contents.
	// Copyright statements are generally legal restrictions on the use and publishing of
	// the event definition.
	Copyright string `json:"copyright"`
	// Extensions for approvalDate
	ApprovalDate_ext *Element `json:"_approvalDate"`
	// A detailed description of how the event definition is used from a clinical
	// perspective.
	Usage string `json:"usage"`
	// Related resources such as additional documentation, justification, or bibliographic
	// references.
	RelatedArtifact []*RelatedArtifact `json:"relatedArtifact"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// A formal identifier that is used to identify this event definition when it is
	// represented in other formats, or referenced in a specification, model, design or an
	// instance.
	Identifier []*Identifier `json:"identifier"`
	// The identifier that is used to identify this version of the event definition when it
	// is referenced in a specification, model, design or instance. This is an arbitrary
	// value managed by the event definition author and is not expected to be globally
	// unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is
	// not available. There is also no expectation that versions can be placed in a
	// lexicographical sequence.
	Version string `json:"version"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// An individual or organization primarily responsible for internal coherence of the
	// content.
	Editor []*ContactDetail `json:"editor"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// A code or group definition that describes the intended subject of the event
	// definition.
	SubjectReference *Reference `json:"subjectReference"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate event definition instances.
	UseContext []*UsageContext `json:"useContext"`
	// The date  (and optionally time) when the event definition was published. The date
	// must change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the event
	// definition changes.
	Date string `json:"date"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A short, descriptive, user-friendly title for the event definition.
	Title string `json:"title"`
	// A Boolean value to indicate that this event definition is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used for
	// genuine usage.
	Experimental bool `json:"experimental"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A natural language name identifying the event definition. This name should be usable
	// as an identifier for the module by machine processing applications such as code
	// generation.
	Name string `json:"name"`
	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate string `json:"lastReviewDate"`
	// An individual or organization responsible for officially endorsing the content for
	// use in some setting.
	Endorser []*ContactDetail `json:"endorser"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// A legal or geographic region in which the event definition is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// An individiual or organization primarily involved in the creation and maintenance of
	// the content.
	Author []*ContactDetail `json:"author"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The status of this event definition. Enables tracking the life-cycle of the content.
	Status EventDefinitionStatus `json:"status"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The period during which the event definition content was or is planned to be in
	// active use.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// The date on which the resource content was approved by the publisher. Approval
	// happens once when the content is officially approved for usage.
	ApprovalDate string `json:"approvalDate"`
	// Descriptive topics related to the module. Topics provide a high-level categorization
	// of the module that can be useful for filtering and searching.
	Topic []*CodeableConcept `json:"topic"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// A free text natural language description of the event definition from a consumer's
	// perspective.
	Description string `json:"description"`
	// A code or group definition that describes the intended subject of the event
	// definition.
	SubjectCodeableConcept *CodeableConcept `json:"subjectCodeableConcept"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for usage
	Usage_ext *Element `json:"_usage"`
	// An absolute URI that is used to identify this event definition when it is referenced
	// in a specification, model, design or an instance; also called its canonical
	// identifier. This SHOULD be globally unique and SHOULD be a literal address at which
	// at which an authoritative instance of this event definition is (or will be)
	// published. This URL can be the target of a canonical reference. It SHALL remain the
	// same when the event definition is stored on different servers.
	Url string `json:"url"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Extensions for subtitle
	Subtitle_ext *Element `json:"_subtitle"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// The name of the organization or individual that published the event definition.
	Publisher string `json:"publisher"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An explanatory or alternate title for the event definition giving additional
	// information about its content.
	Subtitle string `json:"subtitle"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// Extensions for lastReviewDate
	LastReviewDate_ext *Element `json:"_lastReviewDate"`
	// The trigger element defines when the event occurs. If more than one trigger
	// condition is specified, the event fires whenever any one of the trigger conditions
	// is met.
	Trigger []*TriggerDefinition `json:"trigger,omitempty"`
	// An individual or organization primarily responsible for review of some aspect of the
	// content.
	Reviewer []*ContactDetail `json:"reviewer"`
}

func (t *EventDefinition) ResourceType() string {
	return "EventDefinition"
}
func (t *EventDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		EventDefinition
		ResourceType string `json:"resourceType"`
	}{
		EventDefinition: *t,
		ResourceType:    t.ResourceType(),
	})
}

type EventDefinitionStatus string

const (
	EventDefinitionStatusDraft   EventDefinitionStatus = "draft"
	EventDefinitionStatusActive  EventDefinitionStatus = "active"
	EventDefinitionStatusRetired EventDefinitionStatus = "retired"
	EventDefinitionStatusUnknown EventDefinitionStatus = "unknown"
)

// SupplyDelivery is Record of delivery of what is supplied.
type SupplyDelivery struct {
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Indicates the type of dispensing event that is performed. Examples include: Trial
	// Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
	Type *CodeableConcept `json:"type"`
	// Extensions for occurrenceDateTime
	OccurrenceDateTime_ext *Element `json:"_occurrenceDateTime"`
	// The date or time(s) the activity occurred.
	OccurrencePeriod *Period `json:"occurrencePeriod"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A code specifying the state of the dispense event.
	Status SupplyDeliveryStatus `json:"status"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Identifier for the supply delivery event that is used to identify it across multiple
	// disparate systems.
	Identifier []*Identifier `json:"identifier"`
	// A plan, proposal or order that is fulfilled in whole or in part by this event.
	BasedOn []*Reference `json:"basedOn"`
	// A larger event of which this particular event is a component or step.
	PartOf []*Reference `json:"partOf"`
	// The item that is being delivered or has been supplied.
	SuppliedItem *SupplyDelivery_SuppliedItem `json:"suppliedItem"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The date or time(s) the activity occurred.
	OccurrenceTiming *Timing `json:"occurrenceTiming"`
	// Identification of the facility/location where the Supply was shipped to, as part of
	// the dispense event.
	Destination *Reference `json:"destination"`
	// Identifies the person who picked up the Supply.
	Receiver []*Reference `json:"receiver"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A link to a resource representing the person whom the delivered item is for.
	Patient *Reference `json:"patient"`
	// The date or time(s) the activity occurred.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	OccurrenceDateTime string `json:"occurrenceDateTime"`
	// The individual responsible for dispensing the medication, supplier or device.
	Supplier *Reference `json:"supplier"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

func (t *SupplyDelivery) ResourceType() string {
	return "SupplyDelivery"
}
func (t *SupplyDelivery) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		SupplyDelivery
		ResourceType string `json:"resourceType"`
	}{
		SupplyDelivery: *t,
		ResourceType:   t.ResourceType(),
	})
}

type SupplyDeliveryStatus string

const (
	SupplyDeliveryStatusInProgress     SupplyDeliveryStatus = "in-progress"
	SupplyDeliveryStatusCompleted      SupplyDeliveryStatus = "completed"
	SupplyDeliveryStatusAbandoned      SupplyDeliveryStatus = "abandoned"
	SupplyDeliveryStatusEnteredInError SupplyDeliveryStatus = "entered-in-error"
)

// MedicinalProductManufactured is The manufactured item as contained in the packaged medicinal product.
type MedicinalProductManufactured struct {
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The “real world” units in which the quantity of the manufactured item is
	// described.
	UnitOfPresentation *CodeableConcept `json:"unitOfPresentation"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The quantity or "count number" of the manufactured item.
	Quantity *Quantity `json:"quantity,omitempty"`
	// Ingredient.
	Ingredient []*Reference `json:"ingredient"`
	// Other codeable characteristics.
	OtherCharacteristics []*CodeableConcept `json:"otherCharacteristics"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Dose form as manufactured and before any transformation into the pharmaceutical
	// product.
	ManufacturedDoseForm *CodeableConcept `json:"manufacturedDoseForm,omitempty"`
	// Manufacturer of the item (Note that this should be named "manufacturer" but it
	// currently causes technical issues).
	Manufacturer []*Reference `json:"manufacturer"`
	// Dimensions, color etc.
	PhysicalCharacteristics *ProdCharacteristic `json:"physicalCharacteristics"`
	// The base language in which the resource is written.
	Language string `json:"language"`
}

func (t *MedicinalProductManufactured) ResourceType() string {
	return "MedicinalProductManufactured"
}
func (t *MedicinalProductManufactured) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MedicinalProductManufactured
		ResourceType string `json:"resourceType"`
	}{
		MedicinalProductManufactured: *t,
		ResourceType:                 t.ResourceType(),
	})
}

// MedicinalProductPharmaceutical is A pharmaceutical product described in terms of its composition and dose form.
type MedicinalProductPharmaceutical struct {
	// Ingredient.
	Ingredient []*Reference `json:"ingredient"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An identifier for the pharmaceutical medicinal product.
	Identifier []*Identifier `json:"identifier"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The administrable dose form, after necessary reconstitution.
	AdministrableDoseForm *CodeableConcept `json:"administrableDoseForm,omitempty"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Todo.
	UnitOfPresentation *CodeableConcept `json:"unitOfPresentation"`
	// Characteristics e.g. a products onset of action.
	Characteristics []*MedicinalProductPharmaceutical_Characteristics `json:"characteristics"`
	// The path by which the pharmaceutical product is taken into or makes contact with the
	// body.
	RouteOfAdministration []*MedicinalProductPharmaceutical_RouteOfAdministration `json:"routeOfAdministration,omitempty"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Accompanying device.
	Device []*Reference `json:"device"`
}

func (t *MedicinalProductPharmaceutical) ResourceType() string {
	return "MedicinalProductPharmaceutical"
}
func (t *MedicinalProductPharmaceutical) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MedicinalProductPharmaceutical
		ResourceType string `json:"resourceType"`
	}{
		MedicinalProductPharmaceutical: *t,
		ResourceType:                   t.ResourceType(),
	})
}

// NamingSystem is A curated namespace that issues unique symbols within that namespace for the
// identification of concepts, people, devices, etc.  Represents a "System" used within
// the Identifier and Coding data types.
type NamingSystem struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A natural language name identifying the naming system. This name should be usable as
	// an identifier for the module by machine processing applications such as code
	// generation.
	Name string `json:"name"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Categorizes a naming system for easier search by grouping related naming systems.
	Type *CodeableConcept `json:"type"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate naming system instances.
	UseContext []*UsageContext `json:"useContext"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The status of this naming system. Enables tracking the life-cycle of the content.
	Status NamingSystemStatus `json:"status"`
	// Indicates the purpose for the naming system - what kinds of things does it make
	// unique?
	Kind NamingSystemKind `json:"kind"`
	// The date  (and optionally time) when the naming system was published. The date must
	// change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the naming
	// system changes.
	Date string `json:"date"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// A free text natural language description of the naming system from a consumer's
	// perspective. Details about what the namespace identifies including scope,
	// granularity, version labeling, etc.
	Description string `json:"description"`
	// Extensions for usage
	Usage_ext *Element `json:"_usage"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The name of the organization or individual that published the naming system.
	Publisher string `json:"publisher"`
	// Extensions for responsible
	Responsible_ext *Element `json:"_responsible"`
	// A legal or geographic region in which the naming system is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// Provides guidance on the use of the namespace, including the handling of formatting
	// characters, use of upper vs. lower case, etc.
	Usage string `json:"usage"`
	// Indicates how the system may be identified when referenced in electronic exchange.
	UniqueId []*NamingSystem_UniqueId `json:"uniqueId,omitempty"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The name of the organization that is responsible for issuing identifiers or codes
	// for this namespace and ensuring their non-collision.
	Responsible string `json:"responsible"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for kind
	Kind_ext *Element `json:"_kind"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
}

func (t *NamingSystem) ResourceType() string {
	return "NamingSystem"
}
func (t *NamingSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		NamingSystem
		ResourceType string `json:"resourceType"`
	}{
		NamingSystem: *t,
		ResourceType: t.ResourceType(),
	})
}

type NamingSystemStatus string
type NamingSystemKind string

const (
	NamingSystemStatusDraft    NamingSystemStatus = "draft"
	NamingSystemStatusActive   NamingSystemStatus = "active"
	NamingSystemStatusRetired  NamingSystemStatus = "retired"
	NamingSystemStatusUnknown  NamingSystemStatus = "unknown"
	NamingSystemKindCodesystem NamingSystemKind   = "codesystem"
	NamingSystemKindIdentifier NamingSystemKind   = "identifier"
	NamingSystemKindRoot       NamingSystemKind   = "root"
)

// StructureDefinition is A definition of a FHIR structure. This resource is used to describe the underlying
// resources, data types defined in FHIR, and also for describing extensions and
// constraints on resources and data types.
type StructureDefinition struct {
	// A natural language name identifying the structure definition. This name should be
	// usable as an identifier for the module by machine processing applications such as
	// code generation.
	Name string `json:"name"`
	// A copyright statement relating to the structure definition and/or its contents.
	// Copyright statements are generally legal restrictions on the use and publishing of
	// the structure definition.
	Copyright string `json:"copyright"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate structure definition instances.
	UseContext []*UsageContext `json:"useContext"`
	// Extensions for fhirVersion
	FhirVersion_ext *Element `json:"_fhirVersion"`
	// An external specification that the content is mapped to.
	Mapping []*StructureDefinition_Mapping `json:"mapping"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Identifies the types of resource or data type elements to which the extension can be
	// applied.
	Context []*StructureDefinition_Context `json:"context"`
	// The date  (and optionally time) when the structure definition was published. The
	// date must change when the business version changes and it must change if the status
	// code changes. In addition, it should change when the substantive content of the
	// structure definition changes.
	Date string `json:"date"`
	// The name of the organization or individual that published the structure definition.
	Publisher string `json:"publisher"`
	// A set of key words or terms from external terminologies that may be used to assist
	// with indexing and searching of templates nby describing the use of this structure
	// definition, or the content it describes.
	Keyword []*Coding `json:"keyword"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// How the type relates to the baseDefinition.
	Derivation StructureDefinitionDerivation `json:"derivation"`
	// Extensions for kind
	Kind_ext *Element `json:"_kind"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Defines the kind of structure that this definition is describing.
	Kind StructureDefinitionKind `json:"kind"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Extensions for contextInvariant
	ContextInvariant_ext []*Element `json:"_contextInvariant"`
	// A formal identifier that is used to identify this structure definition when it is
	// represented in other formats, or referenced in a specification, model, design or an
	// instance.
	Identifier []*Identifier `json:"identifier"`
	// A differential view is expressed relative to the base StructureDefinition - a
	// statement of differences that it applies.
	Differential *StructureDefinition_Differential `json:"differential"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The identifier that is used to identify this version of the structure definition
	// when it is referenced in a specification, model, design or instance. This is an
	// arbitrary value managed by the structure definition author and is not expected to be
	// globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed
	// version is not available. There is also no expectation that versions can be placed
	// in a lexicographical sequence.
	Version string `json:"version"`
	// A Boolean value to indicate that this structure definition is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used for
	// genuine usage.
	Experimental bool `json:"experimental"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// The version of the FHIR specification on which this StructureDefinition is based -
	// this is the formal version of the specification, without the revision number, e.g.
	// [publication].[major].[minor], which is 4.0.0. for this version.
	FhirVersion StructureDefinitionFhirVersion `json:"fhirVersion"`
	// A set of rules as FHIRPath Invariants about when the extension can be used (e.g.
	// co-occurrence variants for the extension). All the rules must be true.
	ContextInvariant []string `json:"contextInvariant"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// An absolute URI that is the base structure from which this type is derived, either
	// by specialization or constraint.
	BaseDefinition string `json:"baseDefinition"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// A legal or geographic region in which the structure definition is intended to be
	// used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// The type this structure describes. If the derivation kind is 'specialization' then
	// this is the master definition for a type, and there is always one of these (a data
	// type, an extension, a resource, including abstract ones). Otherwise the structure
	// definition is a constraint on the stated type (and in this case, the type cannot be
	// an abstract type).  References are URLs that are relative to
	// http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to
	// http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in
	// logical models.
	Type string `json:"type"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// A free text natural language description of the structure definition from a
	// consumer's perspective.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// An absolute URI that is used to identify this structure definition when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal address
	// at which at which an authoritative instance of this structure definition is (or will
	// be) published. This URL can be the target of a canonical reference. It SHALL remain
	// the same when the structure definition is stored on different servers.
	Url string `json:"url"`
	// Extensions for abstract
	Abstract_ext *Element `json:"_abstract"`
	// The status of this structure definition. Enables tracking the life-cycle of the
	// content.
	Status StructureDefinitionStatus `json:"status"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for derivation
	Derivation_ext *Element `json:"_derivation"`
	// Whether structure this definition describes is abstract or not  - that is, whether
	// the structure is not intended to be instantiated. For Resources and Data types,
	// abstract types will never be exchanged  between systems.
	Abstract bool `json:"abstract"`
	// A short, descriptive, user-friendly title for the structure definition.
	Title string `json:"title"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Explanation of why this structure definition is needed and why it has been designed
	// as it has.
	Purpose string `json:"purpose"`
	// A snapshot view is expressed in a standalone form that can be used and interpreted
	// without considering the base StructureDefinition.
	Snapshot *StructureDefinition_Snapshot `json:"snapshot"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

func (t *StructureDefinition) ResourceType() string {
	return "StructureDefinition"
}
func (t *StructureDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		StructureDefinition
		ResourceType string `json:"resourceType"`
	}{
		StructureDefinition: *t,
		ResourceType:        t.ResourceType(),
	})
}

type StructureDefinitionStatus string
type StructureDefinitionDerivation string
type StructureDefinitionKind string
type StructureDefinitionFhirVersion string

const (
	StructureDefinitionStatusDraft              StructureDefinitionStatus      = "draft"
	StructureDefinitionStatusActive             StructureDefinitionStatus      = "active"
	StructureDefinitionStatusRetired            StructureDefinitionStatus      = "retired"
	StructureDefinitionStatusUnknown            StructureDefinitionStatus      = "unknown"
	StructureDefinitionDerivationSpecialization StructureDefinitionDerivation  = "specialization"
	StructureDefinitionDerivationConstraint     StructureDefinitionDerivation  = "constraint"
	StructureDefinitionKindPrimitiveType        StructureDefinitionKind        = "primitive-type"
	StructureDefinitionKindComplexType          StructureDefinitionKind        = "complex-type"
	StructureDefinitionKindResource             StructureDefinitionKind        = "resource"
	StructureDefinitionKindLogical              StructureDefinitionKind        = "logical"
	StructureDefinitionFhirVersion0_01          StructureDefinitionFhirVersion = "0.01"
	StructureDefinitionFhirVersion0_05          StructureDefinitionFhirVersion = "0.05"
	StructureDefinitionFhirVersion0_06          StructureDefinitionFhirVersion = "0.06"
	StructureDefinitionFhirVersion0_11          StructureDefinitionFhirVersion = "0.11"
	StructureDefinitionFhirVersion0_0_80        StructureDefinitionFhirVersion = "0.0.80"
	StructureDefinitionFhirVersion0_0_81        StructureDefinitionFhirVersion = "0.0.81"
	StructureDefinitionFhirVersion0_0_82        StructureDefinitionFhirVersion = "0.0.82"
	StructureDefinitionFhirVersion0_4_0         StructureDefinitionFhirVersion = "0.4.0"
	StructureDefinitionFhirVersion0_5_0         StructureDefinitionFhirVersion = "0.5.0"
	StructureDefinitionFhirVersion1_0_0         StructureDefinitionFhirVersion = "1.0.0"
	StructureDefinitionFhirVersion1_0_1         StructureDefinitionFhirVersion = "1.0.1"
	StructureDefinitionFhirVersion1_0_2         StructureDefinitionFhirVersion = "1.0.2"
	StructureDefinitionFhirVersion1_1_0         StructureDefinitionFhirVersion = "1.1.0"
	StructureDefinitionFhirVersion1_4_0         StructureDefinitionFhirVersion = "1.4.0"
	StructureDefinitionFhirVersion1_6_0         StructureDefinitionFhirVersion = "1.6.0"
	StructureDefinitionFhirVersion1_8_0         StructureDefinitionFhirVersion = "1.8.0"
	StructureDefinitionFhirVersion3_0_0         StructureDefinitionFhirVersion = "3.0.0"
	StructureDefinitionFhirVersion3_0_1         StructureDefinitionFhirVersion = "3.0.1"
	StructureDefinitionFhirVersion3_3_0         StructureDefinitionFhirVersion = "3.3.0"
	StructureDefinitionFhirVersion3_5_0         StructureDefinitionFhirVersion = "3.5.0"
	StructureDefinitionFhirVersion4_0_0         StructureDefinitionFhirVersion = "4.0.0"
)

// ClinicalImpression is A record of a clinical assessment performed to determine what problem(s) may affect
// the patient and before planning the treatments or management strategies that are
// best to manage a patient's condition. Assessments are often 1:1 with a clinical
// consultation / encounter,  but this varies greatly depending on the clinical
// workflow. This resource is called "ClinicalImpression" rather than
// "ClinicalAssessment" to avoid confusion with the recording of assessment tools such
// as Apgar score.
type ClinicalImpression struct {
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The point in time or period over which the subject was assessed.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// A list of the relevant problems/conditions for a patient.
	Problem []*Reference `json:"problem"`
	// Extensions for summary
	Summary_ext *Element `json:"_summary"`
	// Information supporting the clinical impression.
	SupportingInfo []*Reference `json:"supportingInfo"`
	// Commentary about the impression, typically recorded after the impression itself was
	// made, though supplemental notes by the original author could also appear.
	Note []*Annotation `json:"note"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Business identifiers assigned to this clinical impression by the performer or other
	// systems which remain constant as the resource is updated and propagates from server
	// to server.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// A summary of the context and/or cause of the assessment - why / where it was
	// performed, and what patient events/status prompted it.
	Description string `json:"description"`
	// The Encounter during which this ClinicalImpression was created or to which the
	// creation of this record is tightly associated.
	Encounter *Reference `json:"encounter"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The patient or group of individuals assessed as part of this record.
	Subject *Reference `json:"subject,omitempty"`
	// A text summary of the investigations and the diagnosis.
	Summary string `json:"summary"`
	// Specific findings or diagnoses that were considered likely or relevant to ongoing
	// treatment.
	Finding []*ClinicalImpression_Finding `json:"finding"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Captures the reason for the current state of the ClinicalImpression.
	StatusReason *CodeableConcept `json:"statusReason"`
	// The point in time or period over which the subject was assessed.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	EffectiveDateTime string `json:"effectiveDateTime"`
	// Indicates when the documentation of the assessment was complete.
	Date string `json:"date"`
	// The clinician performing the assessment.
	Assessor *Reference `json:"assessor"`
	// One or more sets of investigations (signs, symptoms, etc.). The actual grouping of
	// investigations varies greatly depending on the type and context of the assessment.
	// These investigations may include data generated during the assessment process, or
	// data previously generated and recorded that is pertinent to the outcomes.
	Investigation []*ClinicalImpression_Investigation `json:"investigation"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for effectiveDateTime
	EffectiveDateTime_ext *Element `json:"_effectiveDateTime"`
	// A reference to the last assessment that was conducted on this patient. Assessments
	// are often/usually ongoing in nature; a care provider (practitioner or team) will
	// make new assessments on an ongoing basis as new data arises or the patient's
	// conditions changes.
	Previous *Reference `json:"previous"`
	// Reference to a specific published clinical protocol that was followed during this
	// assessment, and/or that provides evidence in support of the diagnosis.
	Protocol []string `json:"protocol"`
	// Estimate of likely outcome.
	PrognosisCodeableConcept []*CodeableConcept `json:"prognosisCodeableConcept"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifies the workflow status of the assessment.
	Status string `json:"status"`
	// Categorizes the type of clinical assessment performed.
	Code *CodeableConcept `json:"code"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for protocol
	Protocol_ext []*Element `json:"_protocol"`
	// RiskAssessment expressing likely outcome.
	PrognosisReference []*Reference `json:"prognosisReference"`
}

func (t *ClinicalImpression) ResourceType() string {
	return "ClinicalImpression"
}
func (t *ClinicalImpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ClinicalImpression
		ResourceType string `json:"resourceType"`
	}{
		ClinicalImpression: *t,
		ResourceType:       t.ResourceType(),
	})
}

// Condition is A clinical condition, problem, diagnosis, or other event, situation, issue, or
// clinical concept that has risen to a level of concern.
type Condition struct {
	// Individual who recorded the record and takes responsibility for its content.
	Recorder *Reference `json:"recorder"`
	// Clinical stage or grade of a condition. May include formal severity assessments.
	Stage []*Condition_Stage `json:"stage"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The anatomical location where this condition manifests itself.
	BodySite []*CodeableConcept `json:"bodySite"`
	// The Encounter during which this Condition was created or to which the creation of
	// this record is tightly associated.
	Encounter *Reference `json:"encounter"`
	// The date or estimated date that the condition resolved or went into remission. This
	// is called "abatement" because of the many overloaded connotations associated with
	// "remission" or "resolution" - Conditions are never really resolved, but they can
	// abate.
	AbatementAge *Age `json:"abatementAge"`
	// The recordedDate represents when this particular Condition record was created in the
	// system, which is often a system-generated date.
	RecordedDate string `json:"recordedDate"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Business identifiers assigned to this condition by the performer or other systems
	// which remain constant as the resource is updated and propagates from server to
	// server.
	Identifier []*Identifier `json:"identifier"`
	// The clinical status of the condition.
	ClinicalStatus *CodeableConcept `json:"clinicalStatus"`
	// Indicates the patient or group who the condition record is associated with.
	Subject *Reference `json:"subject,omitempty"`
	// Extensions for onsetString
	OnsetString_ext *Element `json:"_onsetString"`
	// Individual who is making the condition statement.
	Asserter *Reference `json:"asserter"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Estimated or actual date or date-time  the condition began, in the opinion of the
	// clinician.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	OnsetDateTime string `json:"onsetDateTime"`
	// Estimated or actual date or date-time  the condition began, in the opinion of the
	// clinician.
	OnsetRange *Range `json:"onsetRange"`
	// Extensions for abatementDateTime
	AbatementDateTime_ext *Element `json:"_abatementDateTime"`
	// Extensions for abatementString
	AbatementString_ext *Element `json:"_abatementString"`
	// Identification of the condition, problem or diagnosis.
	Code *CodeableConcept `json:"code"`
	// The date or estimated date that the condition resolved or went into remission. This
	// is called "abatement" because of the many overloaded connotations associated with
	// "remission" or "resolution" - Conditions are never really resolved, but they can
	// abate.
	AbatementRange *Range `json:"abatementRange"`
	// Additional information about the Condition. This is a general notes/comments entry
	// for description of the Condition, its diagnosis and prognosis.
	Note []*Annotation `json:"note"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for onsetDateTime
	OnsetDateTime_ext *Element `json:"_onsetDateTime"`
	// Estimated or actual date or date-time  the condition began, in the opinion of the
	// clinician.
	// pattern ^[ \r\n\t\S]+$
	OnsetString string `json:"onsetString"`
	// Estimated or actual date or date-time  the condition began, in the opinion of the
	// clinician.
	OnsetAge *Age `json:"onsetAge"`
	// The date or estimated date that the condition resolved or went into remission. This
	// is called "abatement" because of the many overloaded connotations associated with
	// "remission" or "resolution" - Conditions are never really resolved, but they can
	// abate.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	AbatementDateTime string `json:"abatementDateTime"`
	// Extensions for recordedDate
	RecordedDate_ext *Element `json:"_recordedDate"`
	// Supporting evidence / manifestations that are the basis of the Condition's
	// verification status, such as evidence that confirmed or refuted the condition.
	Evidence []*Condition_Evidence `json:"evidence"`
	// The verification status to support the clinical status of the condition.
	VerificationStatus *CodeableConcept `json:"verificationStatus"`
	// A category assigned to the condition.
	Category []*CodeableConcept `json:"category"`
	// A subjective assessment of the severity of the condition as evaluated by the
	// clinician.
	Severity *CodeableConcept `json:"severity"`
	// The date or estimated date that the condition resolved or went into remission. This
	// is called "abatement" because of the many overloaded connotations associated with
	// "remission" or "resolution" - Conditions are never really resolved, but they can
	// abate.
	// pattern ^[ \r\n\t\S]+$
	AbatementString string `json:"abatementString"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Estimated or actual date or date-time  the condition began, in the opinion of the
	// clinician.
	OnsetPeriod *Period `json:"onsetPeriod"`
	// The date or estimated date that the condition resolved or went into remission. This
	// is called "abatement" because of the many overloaded connotations associated with
	// "remission" or "resolution" - Conditions are never really resolved, but they can
	// abate.
	AbatementPeriod *Period `json:"abatementPeriod"`
}

func (t *Condition) ResourceType() string {
	return "Condition"
}
func (t *Condition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Condition
		ResourceType string `json:"resourceType"`
	}{
		Condition:    *t,
		ResourceType: t.ResourceType(),
	})
}

// GraphDefinition is A formal computable definition of a graph of resources - that is, a coherent set of
// resources that form a graph by following references. The Graph Definition resource
// defines a set and makes rules about the set.
type GraphDefinition struct {
	// A legal or geographic region in which the graph definition is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// Extensions for start
	Start_ext *Element `json:"_start"`
	// An absolute URI that is used to identify this graph definition when it is referenced
	// in a specification, model, design or an instance; also called its canonical
	// identifier. This SHOULD be globally unique and SHOULD be a literal address at which
	// at which an authoritative instance of this graph definition is (or will be)
	// published. This URL can be the target of a canonical reference. It SHALL remain the
	// same when the graph definition is stored on different servers.
	Url string `json:"url"`
	// The date  (and optionally time) when the graph definition was published. The date
	// must change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the graph
	// definition changes.
	Date string `json:"date"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Links this graph makes rules about.
	Link []*GraphDefinition_Link `json:"link"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate graph definition instances.
	UseContext []*UsageContext `json:"useContext"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// A natural language name identifying the graph definition. This name should be usable
	// as an identifier for the module by machine processing applications such as code
	// generation.
	Name string `json:"name"`
	// The status of this graph definition. Enables tracking the life-cycle of the content.
	Status GraphDefinitionStatus `json:"status"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Explanation of why this graph definition is needed and why it has been designed as
	// it has.
	Purpose string `json:"purpose"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// The type of FHIR resource at which instances of this graph start.
	Start string `json:"start"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A free text natural language description of the graph definition from a consumer's
	// perspective.
	Description string `json:"description"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// The name of the organization or individual that published the graph definition.
	Publisher string `json:"publisher"`
	// The profile that describes the use of the base resource.
	Profile string `json:"profile"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// The identifier that is used to identify this version of the graph definition when it
	// is referenced in a specification, model, design or instance. This is an arbitrary
	// value managed by the graph definition author and is not expected to be globally
	// unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is
	// not available. There is also no expectation that versions can be placed in a
	// lexicographical sequence.
	Version string `json:"version"`
	// A Boolean value to indicate that this graph definition is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used for
	// genuine usage.
	Experimental bool `json:"experimental"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
}

func (t *GraphDefinition) ResourceType() string {
	return "GraphDefinition"
}
func (t *GraphDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		GraphDefinition
		ResourceType string `json:"resourceType"`
	}{
		GraphDefinition: *t,
		ResourceType:    t.ResourceType(),
	})
}

type GraphDefinitionStatus string

const (
	GraphDefinitionStatusDraft   GraphDefinitionStatus = "draft"
	GraphDefinitionStatusActive  GraphDefinitionStatus = "active"
	GraphDefinitionStatusRetired GraphDefinitionStatus = "retired"
	GraphDefinitionStatusUnknown GraphDefinitionStatus = "unknown"
)

// MedicationAdministration is Describes the event of a patient consuming or otherwise being administered a
// medication.  This may be as simple as swallowing a tablet or it may be a long
// running infusion.  Related resources tie this event to the authorizing prescription,
// and the specific encounter between patient and health care practitioner.
type MedicationAdministration struct {
	// The visit, admission, or other contact between patient and health care provider
	// during which the medication administration was performed.
	Context *Reference `json:"context"`
	// Extra information about the medication administration that is not conveyed by the
	// other attributes.
	Note []*Annotation `json:"note"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// A specific date/time or interval of time during which the administration took place
	// (or did not take place, when the 'notGiven' attribute is true). For many
	// administrations, such as swallowing a tablet the use of dateTime is more appropriate.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	EffectiveDateTime string `json:"effectiveDateTime"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A specific date/time or interval of time during which the administration took place
	// (or did not take place, when the 'notGiven' attribute is true). For many
	// administrations, such as swallowing a tablet the use of dateTime is more appropriate.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// Condition or observation that supports why the medication was administered.
	ReasonReference []*Reference `json:"reasonReference"`
	// The original request, instruction or authority to perform the administration.
	Request *Reference `json:"request"`
	// A summary of the events of interest that have occurred, such as when the
	// administration was verified.
	EventHistory []*Reference `json:"eventHistory"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A protocol, guideline, orderset, or other definition that was adhered to in whole or
	// in part by this event.
	Instantiates []string `json:"instantiates"`
	// Identifies the medication that was administered. This is either a link to a resource
	// representing the details of the medication or a simple attribute carrying a code
	// that identifies the medication from a known list of medications.
	MedicationCodeableConcept *CodeableConcept `json:"medicationCodeableConcept"`
	// Indicates where the medication is expected to be consumed or administered.
	Category *CodeableConcept `json:"category"`
	// Identifies the medication that was administered. This is either a link to a resource
	// representing the details of the medication or a simple attribute carrying a code
	// that identifies the medication from a known list of medications.
	MedicationReference *Reference `json:"medicationReference"`
	// The person or animal or group receiving the medication.
	Subject *Reference `json:"subject,omitempty"`
	// Additional information (for example, patient height and weight) that supports the
	// administration of the medication.
	SupportingInformation []*Reference `json:"supportingInformation"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Will generally be set to show that the administration has been completed.  For some
	// long running administrations such as infusions, it is possible for an administration
	// to be started but not completed or it may be paused while some other process is
	// under way.
	Status string `json:"status"`
	// Extensions for instantiates
	Instantiates_ext []*Element `json:"_instantiates"`
	// Extensions for effectiveDateTime
	EffectiveDateTime_ext *Element `json:"_effectiveDateTime"`
	// Indicates who or what performed the medication administration and how they were
	// involved.
	Performer []*MedicationAdministration_Performer `json:"performer"`
	// Describes the medication dosage information details e.g. dose, rate, site, route,
	// etc.
	Dosage *MedicationAdministration_Dosage `json:"dosage"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Identifiers associated with this Medication Administration that are defined by
	// business processes and/or used to refer to it when a direct URL reference to the
	// resource itself is not appropriate. They are business identifiers assigned to this
	// resource by the performer or other systems and remain constant as the resource is
	// updated and propagates from server to server.
	Identifier []*Identifier `json:"identifier"`
	// The device used in administering the medication to the patient.  For example, a
	// particular infusion pump.
	Device []*Reference `json:"device"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A larger event of which this particular event is a component or step.
	PartOf []*Reference `json:"partOf"`
	// A code indicating why the medication was given.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// A code indicating why the administration was not performed.
	StatusReason []*CodeableConcept `json:"statusReason"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
}

func (t *MedicationAdministration) ResourceType() string {
	return "MedicationAdministration"
}
func (t *MedicationAdministration) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MedicationAdministration
		ResourceType string `json:"resourceType"`
	}{
		MedicationAdministration: *t,
		ResourceType:             t.ResourceType(),
	})
}

// StructureMap is A Map of relationships between 2 structures that can be used to transform data.
type StructureMap struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// A structure definition used by this map. The structure definition may describe
	// instances that are converted, or the instances that are produced.
	Structure []*StructureMap_Structure `json:"structure"`
	// A free text natural language description of the structure map from a consumer's
	// perspective.
	Description string `json:"description"`
	// Organizes the mapping into manageable chunks for human review/ease of maintenance.
	Group []*StructureMap_Group `json:"group,omitempty"`
	// A short, descriptive, user-friendly title for the structure map.
	Title string `json:"title"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// The name of the organization or individual that published the structure map.
	Publisher string `json:"publisher"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// The identifier that is used to identify this version of the structure map when it is
	// referenced in a specification, model, design or instance. This is an arbitrary value
	// managed by the structure map author and is not expected to be globally unique. For
	// example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not
	// available. There is also no expectation that versions can be placed in a
	// lexicographical sequence.
	Version string `json:"version"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// A Boolean value to indicate that this structure map is authored for testing purposes
	// (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Experimental bool `json:"experimental"`
	// Other maps used by this map (canonical URLs).
	Import []string `json:"import"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate structure map instances.
	UseContext []*UsageContext `json:"useContext"`
	// A copyright statement relating to the structure map and/or its contents. Copyright
	// statements are generally legal restrictions on the use and publishing of the
	// structure map.
	Copyright string `json:"copyright"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// An absolute URI that is used to identify this structure map when it is referenced in
	// a specification, model, design or an instance; also called its canonical identifier.
	// This SHOULD be globally unique and SHOULD be a literal address at which at which an
	// authoritative instance of this structure map is (or will be) published. This URL can
	// be the target of a canonical reference. It SHALL remain the same when the structure
	// map is stored on different servers.
	Url string `json:"url"`
	// The date  (and optionally time) when the structure map was published. The date must
	// change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the structure
	// map changes.
	Date string `json:"date"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A formal identifier that is used to identify this structure map when it is
	// represented in other formats, or referenced in a specification, model, design or an
	// instance.
	Identifier []*Identifier `json:"identifier"`
	// The status of this structure map. Enables tracking the life-cycle of the content.
	Status StructureMapStatus `json:"status"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Explanation of why this structure map is needed and why it has been designed as it
	// has.
	Purpose string `json:"purpose"`
	// A natural language name identifying the structure map. This name should be usable as
	// an identifier for the module by machine processing applications such as code
	// generation.
	Name string `json:"name"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A legal or geographic region in which the structure map is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
}

func (t *StructureMap) ResourceType() string {
	return "StructureMap"
}
func (t *StructureMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		StructureMap
		ResourceType string `json:"resourceType"`
	}{
		StructureMap: *t,
		ResourceType: t.ResourceType(),
	})
}

type StructureMapStatus string

const (
	StructureMapStatusDraft   StructureMapStatus = "draft"
	StructureMapStatusActive  StructureMapStatus = "active"
	StructureMapStatusRetired StructureMapStatus = "retired"
	StructureMapStatusUnknown StructureMapStatus = "unknown"
)

// VerificationResult is Describes validation requirements, source(s), status and dates for one or more
// elements.
type VerificationResult struct {
	// The date when target is next validated, if appropriate.
	NextScheduled string `json:"nextScheduled"`
	// Information about the entity attesting to information.
	Attestation *VerificationResult_Attestation `json:"attestation"`
	// The fhirpath location(s) within the resource that was validated.
	TargetLocation []string `json:"targetLocation"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for statusDate
	StatusDate_ext *Element `json:"_statusDate"`
	// Frequency of revalidation.
	Frequency *Timing `json:"frequency"`
	// Information about the entity validating information.
	Validator []*VerificationResult_Validator `json:"validator"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The validation status of the target (attested; validated; in process; requires
	// revalidation; validation failed; revalidation failed).
	Status string `json:"status"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for lastPerformed
	LastPerformed_ext *Element `json:"_lastPerformed"`
	// What the target is validated against (nothing; primary source; multiple sources).
	ValidationType *CodeableConcept `json:"validationType"`
	// The result if validation fails (fatal; warning; record only; none).
	FailureAction *CodeableConcept `json:"failureAction"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for nextScheduled
	NextScheduled_ext *Element `json:"_nextScheduled"`
	// Information about the primary source(s) involved in validation.
	PrimarySource []*VerificationResult_PrimarySource `json:"primarySource"`
	// Extensions for targetLocation
	TargetLocation_ext []*Element `json:"_targetLocation"`
	// The date/time validation was last completed (including failed validations).
	LastPerformed string `json:"lastPerformed"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The frequency with which the target must be validated (none; initial; periodic).
	Need *CodeableConcept `json:"need"`
	// The primary process by which the target is validated (edit check; value set; primary
	// source; multiple sources; standalone; in context).
	ValidationProcess []*CodeableConcept `json:"validationProcess"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A resource that was validated.
	Target []*Reference `json:"target"`
	// When the validation status was updated.
	StatusDate string `json:"statusDate"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
}

func (t *VerificationResult) ResourceType() string {
	return "VerificationResult"
}
func (t *VerificationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		VerificationResult
		ResourceType string `json:"resourceType"`
	}{
		VerificationResult: *t,
		ResourceType:       t.ResourceType(),
	})
}

// AdverseEvent is Actual or  potential/avoided event causing unintended physical injury resulting from
// or contributed to by medical care, a research study or other healthcare setting
// factors that requires additional monitoring, treatment, or hospitalization, or that
// results in death.
type AdverseEvent struct {
	// The Encounter during which AdverseEvent was created or to which the creation of this
	// record is tightly associated.
	Encounter *Reference `json:"encounter"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The date on which the existence of the AdverseEvent was first recorded.
	RecordedDate string `json:"recordedDate"`
	// Includes information about the reaction that occurred as a result of exposure to a
	// substance (for example, a drug or a chemical).
	ResultingCondition []*Reference `json:"resultingCondition"`
	// Assessment whether this event was of real importance.
	Seriousness *CodeableConcept `json:"seriousness"`
	// Describes the type of outcome from the adverse event.
	Outcome *CodeableConcept `json:"outcome"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Business identifiers assigned to this adverse event by the performer or other
	// systems which remain constant as the resource is updated and propagates from server
	// to server.
	Identifier *Identifier `json:"identifier"`
	// The date (and perhaps time) when the adverse event occurred.
	Date string `json:"date"`
	// Whether the event actually happened, or just had the potential to. Note that this is
	// independent of whether anyone was affected or harmed or how severely.
	Actuality AdverseEventActuality `json:"actuality"`
	// Extensions for detected
	Detected_ext *Element `json:"_detected"`
	// AdverseEvent.referenceDocument.
	ReferenceDocument []*Reference `json:"referenceDocument"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Describes the severity of the adverse event, in relation to the subject. Contrast to
	// AdverseEvent.seriousness - a severe rash might not be serious, but a mild heart
	// problem is.
	Severity *CodeableConcept `json:"severity"`
	// Information on who recorded the adverse event.  May be the patient or a practitioner.
	Recorder *Reference `json:"recorder"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The overall type of event, intended for search and filtering purposes.
	Category []*CodeableConcept `json:"category"`
	// Extensions for recordedDate
	RecordedDate_ext *Element `json:"_recordedDate"`
	// Describes the entity that is suspected to have caused the adverse event.
	SuspectEntity []*AdverseEvent_SuspectEntity `json:"suspectEntity"`
	// This subject or group impacted by the event.
	Subject *Reference `json:"subject,omitempty"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Estimated or actual date the AdverseEvent began, in the opinion of the reporter.
	Detected string `json:"detected"`
	// The information about where the adverse event occurred.
	Location *Reference `json:"location"`
	// Parties that may or should contribute or have contributed information to the adverse
	// event, which can consist of one or more activities.  Such information includes
	// information leading to the decision to perform the activity and how to perform the
	// activity (e.g. consultant), information that the activity itself seeks to reveal
	// (e.g. informant of clinical history), or information about what activity was
	// performed (e.g. informant witness).
	Contributor []*Reference `json:"contributor"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for actuality
	Actuality_ext *Element `json:"_actuality"`
	// This element defines the specific type of event that occurred or that was prevented
	// from occurring.
	Event *CodeableConcept `json:"event"`
	// AdverseEvent.subjectMedicalHistory.
	SubjectMedicalHistory []*Reference `json:"subjectMedicalHistory"`
	// AdverseEvent.study.
	Study []*Reference `json:"study"`
}

func (t *AdverseEvent) ResourceType() string {
	return "AdverseEvent"
}
func (t *AdverseEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		AdverseEvent
		ResourceType string `json:"resourceType"`
	}{
		AdverseEvent: *t,
		ResourceType: t.ResourceType(),
	})
}

type AdverseEventActuality string

const (
	AdverseEventActualityActual    AdverseEventActuality = "actual"
	AdverseEventActualityPotential AdverseEventActuality = "potential"
)

// Bundle is A container for a collection of resources.
type Bundle struct {
	// Indicates the purpose of this bundle - how it is intended to be used.
	Type BundleType `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// If a set of search matches, this is the total number of entries of type 'match'
	// across all pages in the search.  It does not include search.mode = 'include' or
	// 'outcome' entries and it does not provide a count of the number of entries in the
	// Bundle.
	Total uint64 `json:"total"`
	// Extensions for total
	Total_ext *Element `json:"_total"`
	// A persistent identifier for the bundle that won't change as a bundle is copied from
	// server to server.
	Identifier *Identifier `json:"identifier"`
	// Extensions for timestamp
	Timestamp_ext *Element `json:"_timestamp"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The date/time that the bundle was assembled - i.e. when the resources were placed in
	// the bundle.
	Timestamp string `json:"timestamp"`
	// An entry in a bundle resource - will either contain a resource or information about
	// a resource (transactions and history only).
	Entry []*Bundle_Entry `json:"entry"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A series of links that provide context to this bundle.
	Link []*Bundle_Link `json:"link"`
	// Digital Signature - base64 encoded. XML-DSig or a JWT.
	Signature *Signature `json:"signature"`
}

func (t *Bundle) ResourceType() string {
	return "Bundle"
}
func (t *Bundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Bundle
		ResourceType string `json:"resourceType"`
	}{
		Bundle:       *t,
		ResourceType: t.ResourceType(),
	})
}

type BundleType string

const (
	BundleTypeDocument            BundleType = "document"
	BundleTypeMessage             BundleType = "message"
	BundleTypeTransaction         BundleType = "transaction"
	BundleTypeTransactionResponse BundleType = "transaction-response"
	BundleTypeBatch               BundleType = "batch"
	BundleTypeBatchResponse       BundleType = "batch-response"
	BundleTypeHistory             BundleType = "history"
	BundleTypeSearchset           BundleType = "searchset"
	BundleTypeCollection          BundleType = "collection"
)

// CatalogEntry is Catalog entries are wrappers that contextualize items included in a catalog.
type CatalogEntry struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The type of item - medication, device, service, protocol or other.
	Type *CodeableConcept `json:"type"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for orderable
	Orderable_ext *Element `json:"_orderable"`
	// User for example for ATC classification, or.
	AdditionalClassification []*CodeableConcept `json:"additionalClassification"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Typically date of issue is different from the beginning of the validity. This can be
	// used to see when an item was last updated.
	LastUpdated string `json:"lastUpdated"`
	// Used in supporting different identifiers for the same product, e.g. manufacturer
	// code and retailer code.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Used for examplefor Out of Formulary, or any specifics.
	AdditionalCharacteristic []*CodeableConcept `json:"additionalCharacteristic"`
	// Whether the entry represents an orderable item.
	Orderable bool `json:"orderable"`
	// Used in supporting related concepts, e.g. NDC to RxNorm.
	AdditionalIdentifier []*Identifier `json:"additionalIdentifier"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for validTo
	ValidTo_ext *Element `json:"_validTo"`
	// Classes of devices, or ATC for medication.
	Classification []*CodeableConcept `json:"classification"`
	// Used to support catalog exchange even for unsupported products, e.g. getting list of
	// medications even if not prescribable.
	Status CatalogEntryStatus `json:"status"`
	// The time period in which this catalog entry is expected to be active.
	ValidityPeriod *Period `json:"validityPeriod"`
	// The date until which this catalog entry is expected to be active.
	ValidTo string `json:"validTo"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The item in a catalog or definition.
	ReferencedItem *Reference `json:"referencedItem,omitempty"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for lastUpdated
	LastUpdated_ext *Element `json:"_lastUpdated"`
	// Used for example, to point to a substance, or to a device used to administer a
	// medication.
	RelatedEntry []*CatalogEntry_RelatedEntry `json:"relatedEntry"`
}

func (t *CatalogEntry) ResourceType() string {
	return "CatalogEntry"
}
func (t *CatalogEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		CatalogEntry
		ResourceType string `json:"resourceType"`
	}{
		CatalogEntry: *t,
		ResourceType: t.ResourceType(),
	})
}

type CatalogEntryStatus string

const (
	CatalogEntryStatusDraft   CatalogEntryStatus = "draft"
	CatalogEntryStatusActive  CatalogEntryStatus = "active"
	CatalogEntryStatusRetired CatalogEntryStatus = "retired"
	CatalogEntryStatusUnknown CatalogEntryStatus = "unknown"
)

// CodeSystem is The CodeSystem resource is used to declare the existence of and describe a code
// system or code system supplement and its key properties, and optionally define a
// part or all of its content.
type CodeSystem struct {
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// The identifier that is used to identify this version of the code system when it is
	// referenced in a specification, model, design or instance. This is an arbitrary value
	// managed by the code system author and is not expected to be globally unique. For
	// example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not
	// available. There is also no expectation that versions can be placed in a
	// lexicographical sequence. This is used in [Coding](datatypes.html#Coding).version.
	Version string `json:"version"`
	// Extensions for hierarchyMeaning
	HierarchyMeaning_ext *Element `json:"_hierarchyMeaning"`
	// A property defines an additional slot through which additional information can be
	// provided about a concept.
	Property []*CodeSystem_Property `json:"property"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for content
	Content_ext *Element `json:"_content"`
	// The extent of the content of the code system (the concepts and codes it defines) are
	// represented in this resource instance.
	Content CodeSystemContent `json:"content"`
	// The date (and optionally time) when the code system resource was created or revised.
	Status CodeSystemStatus `json:"status"`
	// The meaning of the hierarchy of concepts as represented in this resource.
	HierarchyMeaning CodeSystemHierarchyMeaning `json:"hierarchyMeaning"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// A free text natural language description of the code system from a consumer's
	// perspective.
	Description string `json:"description"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// A Boolean value to indicate that this code system is authored for testing purposes
	// (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Experimental bool `json:"experimental"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for count
	Count_ext *Element `json:"_count"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// The date  (and optionally time) when the code system was published. The date must
	// change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the code
	// system changes.
	Date string `json:"date"`
	// This flag is used to signify that the code system does not commit to concept
	// permanence across versions. If true, a version must be specified when referencing
	// this code system.
	VersionNeeded bool `json:"versionNeeded"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The name of the organization or individual that published the code system.
	Publisher string `json:"publisher"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// If code comparison is case sensitive when codes within this system are compared to
	// each other.
	CaseSensitive bool `json:"caseSensitive"`
	// Canonical reference to the value set that contains the entire code system.
	ValueSet string `json:"valueSet"`
	// The total number of concepts defined by the code system. Where the code system has a
	// compositional grammar, the basis of this count is defined by the system steward.
	Count uint64 `json:"count"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A short, descriptive, user-friendly title for the code system.
	Title string `json:"title"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate code system instances.
	UseContext []*UsageContext `json:"useContext"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// Extensions for versionNeeded
	VersionNeeded_ext *Element `json:"_versionNeeded"`
	// A filter that can be used in a value set compose statement when selecting concepts
	// using a filter.
	Filter []*CodeSystem_Filter `json:"filter"`
	// A natural language name identifying the code system. This name should be usable as
	// an identifier for the module by machine processing applications such as code
	// generation.
	Name string `json:"name"`
	// A copyright statement relating to the code system and/or its contents. Copyright
	// statements are generally legal restrictions on the use and publishing of the code
	// system.
	Copyright string `json:"copyright"`
	// An absolute URI that is used to identify this code system when it is referenced in a
	// specification, model, design or an instance; also called its canonical identifier.
	// This SHOULD be globally unique and SHOULD be a literal address at which at which an
	// authoritative instance of this code system is (or will be) published. This URL can
	// be the target of a canonical reference. It SHALL remain the same when the code
	// system is stored on different servers. This is used in
	// [Coding](datatypes.html#Coding).system.
	Url string `json:"url"`
	// A formal identifier that is used to identify this code system when it is represented
	// in other formats, or referenced in a specification, model, design or an instance.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// Explanation of why this code system is needed and why it has been designed as it has.
	Purpose string `json:"purpose"`
	// Extensions for caseSensitive
	CaseSensitive_ext *Element `json:"_caseSensitive"`
	// The code system defines a compositional (post-coordination) grammar.
	Compositional bool `json:"compositional"`
	// Extensions for compositional
	Compositional_ext *Element `json:"_compositional"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A legal or geographic region in which the code system is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// The canonical URL of the code system that this code system supplement is adding
	// designations and properties to.
	Supplements string `json:"supplements"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Concepts that are in the code system. The concept definitions are inherently
	// hierarchical, but the definitions must be consulted to determine what the meanings
	// of the hierarchical relationships are.
	Concept []*CodeSystem_Concept `json:"concept"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
}

func (t *CodeSystem) ResourceType() string {
	return "CodeSystem"
}
func (t *CodeSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		CodeSystem
		ResourceType string `json:"resourceType"`
	}{
		CodeSystem:   *t,
		ResourceType: t.ResourceType(),
	})
}

type CodeSystemContent string
type CodeSystemStatus string
type CodeSystemHierarchyMeaning string

const (
	CodeSystemContentNotPresent              CodeSystemContent          = "not-present"
	CodeSystemContentExample                 CodeSystemContent          = "example"
	CodeSystemContentFragment                CodeSystemContent          = "fragment"
	CodeSystemContentComplete                CodeSystemContent          = "complete"
	CodeSystemContentSupplement              CodeSystemContent          = "supplement"
	CodeSystemStatusDraft                    CodeSystemStatus           = "draft"
	CodeSystemStatusActive                   CodeSystemStatus           = "active"
	CodeSystemStatusRetired                  CodeSystemStatus           = "retired"
	CodeSystemStatusUnknown                  CodeSystemStatus           = "unknown"
	CodeSystemHierarchyMeaningGroupedBy      CodeSystemHierarchyMeaning = "grouped-by"
	CodeSystemHierarchyMeaningIsA            CodeSystemHierarchyMeaning = "is-a"
	CodeSystemHierarchyMeaningPartOf         CodeSystemHierarchyMeaning = "part-of"
	CodeSystemHierarchyMeaningClassifiedWith CodeSystemHierarchyMeaning = "classified-with"
)

// EvidenceVariable is The EvidenceVariable resource describes a "PICO" element that knowledge (evidence,
// assertion, recommendation) is about.
type EvidenceVariable struct {
	// A legal or geographic region in which the evidence variable is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// A formal identifier that is used to identify this evidence variable when it is
	// represented in other formats, or referenced in a specification, model, design or an
	// instance.
	Identifier []*Identifier `json:"identifier"`
	// The status of this evidence variable. Enables tracking the life-cycle of the content.
	Status EvidenceVariableStatus `json:"status"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A natural language name identifying the evidence variable. This name should be
	// usable as an identifier for the module by machine processing applications such as
	// code generation.
	Name string `json:"name"`
	// An individual or organization primarily responsible for review of some aspect of the
	// content.
	Reviewer []*ContactDetail `json:"reviewer"`
	// A copyright statement relating to the evidence variable and/or its contents.
	// Copyright statements are generally legal restrictions on the use and publishing of
	// the evidence variable.
	Copyright string `json:"copyright"`
	// Descriptive topics related to the content of the EvidenceVariable. Topics provide a
	// high-level categorization grouping types of EvidenceVariables that can be useful for
	// filtering and searching.
	Topic []*CodeableConcept `json:"topic"`
	// The identifier that is used to identify this version of the evidence variable when
	// it is referenced in a specification, model, design or instance. This is an arbitrary
	// value managed by the evidence variable author and is not expected to be globally
	// unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is
	// not available. There is also no expectation that versions can be placed in a
	// lexicographical sequence. To provide a version consistent with the Decision Support
	// Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more
	// information on versioning knowledge assets, refer to the Decision Support Service
	// specification. Note that a version is required for non-experimental active artifacts.
	Version string `json:"version"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// The date on which the resource content was approved by the publisher. Approval
	// happens once when the content is officially approved for usage.
	ApprovalDate string `json:"approvalDate"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Extensions for subtitle
	Subtitle_ext *Element `json:"_subtitle"`
	// The name of the organization or individual that published the evidence variable.
	Publisher string `json:"publisher"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate evidence variable instances.
	UseContext []*UsageContext `json:"useContext"`
	// Extensions for approvalDate
	ApprovalDate_ext *Element `json:"_approvalDate"`
	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate string `json:"lastReviewDate"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// An individiual or organization primarily involved in the creation and maintenance of
	// the content.
	Author []*ContactDetail `json:"author"`
	// Related artifacts such as additional documentation, justification, or bibliographic
	// references.
	RelatedArtifact []*RelatedArtifact `json:"relatedArtifact"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The date  (and optionally time) when the evidence variable was published. The date
	// must change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the evidence
	// variable changes.
	Date string `json:"date"`
	// The type of evidence element, a population, an exposure, or an outcome.
	Type EvidenceVariableType `json:"type"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// A short, descriptive, user-friendly title for the evidence variable.
	Title string `json:"title"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A free text natural language description of the evidence variable from a consumer's
	// perspective.
	Description string `json:"description"`
	// The period during which the evidence variable content was or is planned to be in
	// active use.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// An individual or organization primarily responsible for internal coherence of the
	// content.
	Editor []*ContactDetail `json:"editor"`
	// An individual or organization responsible for officially endorsing the content for
	// use in some setting.
	Endorser []*ContactDetail `json:"endorser"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// The short title provides an alternate title for use in informal descriptive contexts
	// where the full, formal title is not necessary.
	ShortTitle string `json:"shortTitle"`
	// Extensions for shortTitle
	ShortTitle_ext *Element `json:"_shortTitle"`
	// An explanatory or alternate title for the EvidenceVariable giving additional
	// information about its content.
	Subtitle string `json:"subtitle"`
	// A human-readable string to clarify or explain concepts about the resource.
	Note []*Annotation `json:"note"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An absolute URI that is used to identify this evidence variable when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal address
	// at which at which an authoritative instance of this evidence variable is (or will
	// be) published. This URL can be the target of a canonical reference. It SHALL remain
	// the same when the evidence variable is stored on different servers.
	Url string `json:"url"`
	// Extensions for lastReviewDate
	LastReviewDate_ext *Element `json:"_lastReviewDate"`
	// A characteristic that defines the members of the evidence element. Multiple
	// characteristics are applied with "and" semantics.
	Characteristic []*EvidenceVariable_Characteristic `json:"characteristic,omitempty"`
}

func (t *EvidenceVariable) ResourceType() string {
	return "EvidenceVariable"
}
func (t *EvidenceVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		EvidenceVariable
		ResourceType string `json:"resourceType"`
	}{
		EvidenceVariable: *t,
		ResourceType:     t.ResourceType(),
	})
}

type EvidenceVariableStatus string
type EvidenceVariableType string

const (
	EvidenceVariableStatusDraft     EvidenceVariableStatus = "draft"
	EvidenceVariableStatusActive    EvidenceVariableStatus = "active"
	EvidenceVariableStatusRetired   EvidenceVariableStatus = "retired"
	EvidenceVariableStatusUnknown   EvidenceVariableStatus = "unknown"
	EvidenceVariableTypeDichotomous EvidenceVariableType   = "dichotomous"
	EvidenceVariableTypeContinuous  EvidenceVariableType   = "continuous"
	EvidenceVariableTypeDescriptive EvidenceVariableType   = "descriptive"
)

// MedicinalProductInteraction is The interactions of the medicinal product with other medicinal products, or other
// forms of interactions.
type MedicinalProductInteraction struct {
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The medication for which this is a described interaction.
	Subject []*Reference `json:"subject"`
	// The interaction described.
	Description string `json:"description"`
	// Actions for managing the interaction.
	Management *CodeableConcept `json:"management"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The effect of the interaction, for example "reduced gastric absorption of primary
	// medication".
	Effect *CodeableConcept `json:"effect"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The specific medication, food or laboratory test that interacts.
	Interactant []*MedicinalProductInteraction_Interactant `json:"interactant"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// The type of the interaction e.g. drug-drug interaction, drug-food interaction,
	// drug-lab test interaction.
	Type *CodeableConcept `json:"type"`
	// The incidence of the interaction, e.g. theoretical, observed.
	Incidence *CodeableConcept `json:"incidence"`
}

func (t *MedicinalProductInteraction) ResourceType() string {
	return "MedicinalProductInteraction"
}
func (t *MedicinalProductInteraction) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MedicinalProductInteraction
		ResourceType string `json:"resourceType"`
	}{
		MedicinalProductInteraction: *t,
		ResourceType:                t.ResourceType(),
	})
}

// Library is The Library resource is a general-purpose container for knowledge asset definitions.
// It can be used to describe and expose existing knowledge assets such as logic
// libraries and information model descriptions, as well as to describe a collection of
// knowledge assets.
type Library struct {
	// A formal identifier that is used to identify this library when it is represented in
	// other formats, or referenced in a specification, model, design or an instance. e.g.
	// CMS or NQF identifiers for a measure artifact. Note that at least one identifier is
	// required for non-experimental active artifacts.
	Identifier []*Identifier `json:"identifier"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate library instances.
	UseContext []*UsageContext `json:"useContext"`
	// Explanation of why this library is needed and why it has been designed as it has.
	Purpose string `json:"purpose"`
	// An individual or organization primarily responsible for internal coherence of the
	// content.
	Editor []*ContactDetail `json:"editor"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for lastReviewDate
	LastReviewDate_ext *Element `json:"_lastReviewDate"`
	// Identifies the type of library such as a Logic Library, Model Definition, Asset
	// Collection, or Module Definition.
	Type *CodeableConcept `json:"type,omitempty"`
	// An individiual or organization primarily involved in the creation and maintenance of
	// the content.
	Author []*ContactDetail `json:"author"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A short, descriptive, user-friendly title for the library.
	Title string `json:"title"`
	// The date  (and optionally time) when the library was published. The date must change
	// when the business version changes and it must change if the status code changes. In
	// addition, it should change when the substantive content of the library changes.
	Date string `json:"date"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Extensions for approvalDate
	ApprovalDate_ext *Element `json:"_approvalDate"`
	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate string `json:"lastReviewDate"`
	// Descriptive topics related to the content of the library. Topics provide a
	// high-level categorization of the library that can be useful for filtering and
	// searching.
	Topic []*CodeableConcept `json:"topic"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// A legal or geographic region in which the library is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// The date on which the resource content was approved by the publisher. Approval
	// happens once when the content is officially approved for usage.
	ApprovalDate string `json:"approvalDate"`
	// An individual or organization primarily responsible for review of some aspect of the
	// content.
	Reviewer []*ContactDetail `json:"reviewer"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// An absolute URI that is used to identify this library when it is referenced in a
	// specification, model, design or an instance; also called its canonical identifier.
	// This SHOULD be globally unique and SHOULD be a literal address at which at which an
	// authoritative instance of this library is (or will be) published. This URL can be
	// the target of a canonical reference. It SHALL remain the same when the library is
	// stored on different servers.
	Url string `json:"url"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// An explanatory or alternate title for the library giving additional information
	// about its content.
	Subtitle string `json:"subtitle"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// A detailed description of how the library is used from a clinical perspective.
	Usage string `json:"usage"`
	// The period during which the library content was or is planned to be in active use.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// A free text natural language description of the library from a consumer's
	// perspective.
	Description string `json:"description"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A code or group definition that describes the intended subject of the contents of
	// the library.
	SubjectReference *Reference `json:"subjectReference"`
	// Extensions for usage
	Usage_ext *Element `json:"_usage"`
	// A copyright statement relating to the library and/or its contents. Copyright
	// statements are generally legal restrictions on the use and publishing of the library.
	Copyright string `json:"copyright"`
	// The parameter element defines parameters used by the library.
	Parameter []*ParameterDefinition `json:"parameter"`
	// Describes a set of data that must be provided in order to be able to successfully
	// perform the computations defined by the library.
	DataRequirement []*DataRequirement `json:"dataRequirement"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The identifier that is used to identify this version of the library when it is
	// referenced in a specification, model, design or instance. This is an arbitrary value
	// managed by the library author and is not expected to be globally unique. For
	// example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not
	// available. There is also no expectation that versions can be placed in a
	// lexicographical sequence. To provide a version consistent with the Decision Support
	// Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more
	// information on versioning knowledge assets, refer to the Decision Support Service
	// specification. Note that a version is required for non-experimental active artifacts.
	Version string `json:"version"`
	// Extensions for subtitle
	Subtitle_ext *Element `json:"_subtitle"`
	// The status of this library. Enables tracking the life-cycle of the content.
	Status LibraryStatus `json:"status"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// An individual or organization responsible for officially endorsing the content for
	// use in some setting.
	Endorser []*ContactDetail `json:"endorser"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The name of the organization or individual that published the library.
	Publisher string `json:"publisher"`
	// A natural language name identifying the library. This name should be usable as an
	// identifier for the module by machine processing applications such as code generation.
	Name string `json:"name"`
	// A Boolean value to indicate that this library is authored for testing purposes (or
	// education/evaluation/marketing) and is not intended to be used for genuine usage.
	Experimental bool `json:"experimental"`
	// Related artifacts such as additional documentation, justification, or bibliographic
	// references.
	RelatedArtifact []*RelatedArtifact `json:"relatedArtifact"`
	// A code or group definition that describes the intended subject of the contents of
	// the library.
	SubjectCodeableConcept *CodeableConcept `json:"subjectCodeableConcept"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// The content of the library as an Attachment. The content may be a reference to a
	// url, or may be directly embedded as a base-64 string. Either way, the contentType of
	// the attachment determines how to interpret the content.
	Content []*Attachment `json:"content"`
}

func (t *Library) ResourceType() string {
	return "Library"
}
func (t *Library) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Library
		ResourceType string `json:"resourceType"`
	}{
		Library:      *t,
		ResourceType: t.ResourceType(),
	})
}

type LibraryStatus string

const (
	LibraryStatusDraft   LibraryStatus = "draft"
	LibraryStatusActive  LibraryStatus = "active"
	LibraryStatusRetired LibraryStatus = "retired"
	LibraryStatusUnknown LibraryStatus = "unknown"
)

// Measure is The Measure resource provides the definition of a quality measure.
type Measure struct {
	// A natural language name identifying the measure. This name should be usable as an
	// identifier for the module by machine processing applications such as code generation.
	Name string `json:"name"`
	// The status of this measure. Enables tracking the life-cycle of the content.
	Status MeasureStatus `json:"status"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// A legal or geographic region in which the measure is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// Descriptive topics related to the content of the measure. Topics provide a
	// high-level categorization grouping types of measures that can be useful for
	// filtering and searching.
	Topic []*CodeableConcept `json:"topic"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// An individiual or organization primarily involved in the creation and maintenance of
	// the content.
	Author []*ContactDetail `json:"author"`
	// A formal identifier that is used to identify this measure when it is represented in
	// other formats, or referenced in a specification, model, design or an instance.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The name of the organization or individual that published the measure.
	Publisher string `json:"publisher"`
	// Extensions for rationale
	Rationale_ext *Element `json:"_rationale"`
	// Extensions for clinicalRecommendationStatement
	ClinicalRecommendationStatement_ext *Element `json:"_clinicalRecommendationStatement"`
	// A group of population criteria for the measure.
	Group []*Measure_Group `json:"group"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Extensions for usage
	Usage_ext *Element `json:"_usage"`
	// A copyright statement relating to the measure and/or its contents. Copyright
	// statements are generally legal restrictions on the use and publishing of the measure.
	Copyright string `json:"copyright"`
	// Related artifacts such as additional documentation, justification, or bibliographic
	// references.
	RelatedArtifact []*RelatedArtifact `json:"relatedArtifact"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate measure instances.
	UseContext []*UsageContext `json:"useContext"`
	// Provides a succinct statement of the need for the measure. Usually includes
	// statements pertaining to importance criterion: impact, gap in care, and evidence.
	Rationale string `json:"rationale"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A short, descriptive, user-friendly title for the measure.
	Title string `json:"title"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// A free text natural language description of the measure from a consumer's
	// perspective.
	Description string `json:"description"`
	// The date on which the resource content was approved by the publisher. Approval
	// happens once when the content is officially approved for usage.
	ApprovalDate string `json:"approvalDate"`
	// A reference to a Library resource containing the formal logic used by the measure.
	Library []string `json:"library"`
	// Notices and disclaimers regarding the use of the measure or related to intellectual
	// property (such as code systems) referenced by the measure.
	Disclaimer string `json:"disclaimer"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Provides a description of an individual term used within the measure.
	Definition []string `json:"definition"`
	// Indicates how the calculation is performed for the measure, including proportion,
	// ratio, continuous-variable, and cohort. The value set is extensible, allowing
	// additional measure scoring types to be represented.
	Scoring *CodeableConcept `json:"scoring"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// A Boolean value to indicate that this measure is authored for testing purposes (or
	// education/evaluation/marketing) and is not intended to be used for genuine usage.
	Experimental bool `json:"experimental"`
	// The period during which the measure content was or is planned to be in active use.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// An individual or organization primarily responsible for review of some aspect of the
	// content.
	Reviewer []*ContactDetail `json:"reviewer"`
	// A description of the risk adjustment factors that may impact the resulting score for
	// the measure and how they may be accounted for when computing and reporting measure
	// results.
	RiskAdjustment string `json:"riskAdjustment"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The intended subjects for the measure. If this element is not provided, a Patient
	// subject is assumed, but the subject of the measure can be anything.
	SubjectCodeableConcept *CodeableConcept `json:"subjectCodeableConcept"`
	// Provides a summary of relevant clinical guidelines or other clinical recommendations
	// supporting the measure.
	ClinicalRecommendationStatement string `json:"clinicalRecommendationStatement"`
	// Information on whether an increase or decrease in score is the preferred result
	// (e.g., a higher score indicates better quality OR a lower score indicates better
	// quality OR quality is within a range).
	ImprovementNotation *CodeableConcept `json:"improvementNotation"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// A detailed description, from a clinical perspective, of how the measure is used.
	Usage string `json:"usage"`
	// Additional guidance for the measure including how it can be used in a clinical
	// context, and the intent of the measure.
	Guidance string `json:"guidance"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// The identifier that is used to identify this version of the measure when it is
	// referenced in a specification, model, design or instance. This is an arbitrary value
	// managed by the measure author and is not expected to be globally unique. For
	// example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not
	// available. There is also no expectation that versions can be placed in a
	// lexicographical sequence. To provide a version consistent with the Decision Support
	// Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more
	// information on versioning knowledge assets, refer to the Decision Support Service
	// specification. Note that a version is required for non-experimental active artifacts.
	Version string `json:"version"`
	// An individual or organization primarily responsible for internal coherence of the
	// content.
	Editor []*ContactDetail `json:"editor"`
	// Extensions for rateAggregation
	RateAggregation_ext *Element `json:"_rateAggregation"`
	// Extensions for definition
	Definition_ext []*Element `json:"_definition"`
	// Extensions for guidance
	Guidance_ext *Element `json:"_guidance"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for approvalDate
	ApprovalDate_ext *Element `json:"_approvalDate"`
	// Indicates whether the measure is used to examine a process, an outcome over time, a
	// patient-reported outcome, or a structure measure such as utilization.
	Type []*CodeableConcept `json:"type"`
	// The intended subjects for the measure. If this element is not provided, a Patient
	// subject is assumed, but the subject of the measure can be anything.
	SubjectReference *Reference `json:"subjectReference"`
	// Explanation of why this measure is needed and why it has been designed as it has.
	Purpose string `json:"purpose"`
	// Extensions for disclaimer
	Disclaimer_ext *Element `json:"_disclaimer"`
	// Extensions for riskAdjustment
	RiskAdjustment_ext *Element `json:"_riskAdjustment"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for subtitle
	Subtitle_ext *Element `json:"_subtitle"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// An absolute URI that is used to identify this measure when it is referenced in a
	// specification, model, design or an instance; also called its canonical identifier.
	// This SHOULD be globally unique and SHOULD be a literal address at which at which an
	// authoritative instance of this measure is (or will be) published. This URL can be
	// the target of a canonical reference. It SHALL remain the same when the measure is
	// stored on different servers.
	Url string `json:"url"`
	// An explanatory or alternate title for the measure giving additional information
	// about its content.
	Subtitle string `json:"subtitle"`
	// If this is a composite measure, the scoring method used to combine the component
	// measures to determine the composite score.
	CompositeScoring *CodeableConcept `json:"compositeScoring"`
	// The date  (and optionally time) when the measure was published. The date must change
	// when the business version changes and it must change if the status code changes. In
	// addition, it should change when the substantive content of the measure changes.
	Date string `json:"date"`
	// Describes how to combine the information calculated, based on logic in each of
	// several populations, into one summarized result.
	RateAggregation string `json:"rateAggregation"`
	// The supplemental data criteria for the measure report, specified as either the name
	// of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.
	SupplementalData []*Measure_SupplementalData `json:"supplementalData"`
	// Extensions for lastReviewDate
	LastReviewDate_ext *Element `json:"_lastReviewDate"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate string `json:"lastReviewDate"`
	// An individual or organization responsible for officially endorsing the content for
	// use in some setting.
	Endorser []*ContactDetail `json:"endorser"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
}

func (t *Measure) ResourceType() string {
	return "Measure"
}
func (t *Measure) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Measure
		ResourceType string `json:"resourceType"`
	}{
		Measure:      *t,
		ResourceType: t.ResourceType(),
	})
}

type MeasureStatus string

const (
	MeasureStatusDraft   MeasureStatus = "draft"
	MeasureStatusActive  MeasureStatus = "active"
	MeasureStatusRetired MeasureStatus = "retired"
	MeasureStatusUnknown MeasureStatus = "unknown"
)

// OrganizationAffiliation is Defines an affiliation/assotiation/relationship between 2 distinct oganizations,
// that is not a part-of relationship/sub-division relationship.
type OrganizationAffiliation struct {
	// Extensions for active
	Active_ext *Element `json:"_active"`
	// Definition of the role the participatingOrganization plays in the association.
	Code []*CodeableConcept `json:"code"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Whether this organization affiliation record is in active use.
	Active bool `json:"active"`
	// The period during which the participatingOrganization is affiliated with the primary
	// organization.
	Period *Period `json:"period"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The Participating Organization provides/performs the role(s) defined by the code to
	// the Primary Organization (e.g. providing services or is a member of).
	ParticipatingOrganization *Reference `json:"participatingOrganization"`
	// Healthcare services provided through the role.
	HealthcareService []*Reference `json:"healthcareService"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Business identifiers that are specific to this role.
	Identifier []*Identifier `json:"identifier"`
	// Organization where the role is available (primary organization/has members).
	Organization *Reference `json:"organization"`
	// Health insurance provider network in which the participatingOrganization provides
	// the role's services (if defined) at the indicated locations (if defined).
	Network []*Reference `json:"network"`
	// Specific specialty of the participatingOrganization in the context of the role.
	Specialty []*CodeableConcept `json:"specialty"`
	// The location(s) at which the role occurs.
	Location []*Reference `json:"location"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Contact details at the participatingOrganization relevant to this Affiliation.
	Telecom []*ContactPoint `json:"telecom"`
	// Technical endpoints providing access to services operated for this role.
	Endpoint []*Reference `json:"endpoint"`
}

func (t *OrganizationAffiliation) ResourceType() string {
	return "OrganizationAffiliation"
}
func (t *OrganizationAffiliation) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OrganizationAffiliation
		ResourceType string `json:"resourceType"`
	}{
		OrganizationAffiliation: *t,
		ResourceType:            t.ResourceType(),
	})
}

// SubstanceSourceMaterial is Source material shall capture information on the taxonomic and anatomical origins as
// well as the fraction of a material that can result in or can be modified to form a
// substance. This set of data elements shall be used to define polymer substances
// isolated from biological matrices. Taxonomic and anatomical origins shall be
// described using a controlled vocabulary as required. This information is captured
// for naturally derived polymers ( . starch) and structurally diverse substances. For
// Organisms belonging to the Kingdom Plantae the Substance level defines the fresh
// material of a single species or infraspecies, the Herbal Drug and the Herbal
// preparation. For Herbal preparations, the fraction information will be captured at
// the Substance information level and additional information for herbal extracts will
// be captured at the Specified Substance Group 1 information level. See for further
// explanation the Substance Class: Structurally Diverse and the herbal annex.
type SubstanceSourceMaterial struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The type of the source material shall be specified based on a controlled vocabulary.
	// For vaccines, this subclause refers to the class of infectious agent.
	SourceMaterialType *CodeableConcept `json:"sourceMaterialType"`
	// The place/region where the plant is harvested or the places/regions where the animal
	// source material has its habitat.
	GeographicalLocation []string `json:"geographicalLocation"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for organismName
	OrganismName_ext *Element `json:"_organismName"`
	// The parent substance of the Herbal Drug, or Herbal preparation.
	ParentSubstanceName []string `json:"parentSubstanceName"`
	// To do.
	PartDescription []*SubstanceSourceMaterial_PartDescription `json:"partDescription"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the
	// substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant).
	ParentSubstanceId []*Identifier `json:"parentSubstanceId"`
	// The state of the source material when extracted.
	SourceMaterialState *CodeableConcept `json:"sourceMaterialState"`
	// Many complex materials are fractions of parts of plants, animals, or minerals.
	// Fraction elements are often necessary to define both Substances and Specified Group
	// 1 Substances. For substances derived from Plants, fraction information will be
	// captured at the Substance information level ( . Oils, Juices and Exudates).
	// Additional information for Extracts, such as extraction solvent composition, will be
	// captured at the Specified Substance Group 1 information level. For plasma-derived
	// products fraction information will be captured at the Substance and the Specified
	// Substance Group 1 levels.
	FractionDescription []*SubstanceSourceMaterial_FractionDescription `json:"fractionDescription"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Stage of life for animals, plants, insects and microorganisms. This information
	// shall be provided only when the substance is significantly different in these stages
	// (e.g. foetal bovine serum).
	DevelopmentStage *CodeableConcept `json:"developmentStage"`
	// The country where the plant material is harvested or the countries where the plasma
	// is sourced from as laid down in accordance with the Plasma Master File. For
	// “Plasma-derived substances” the attribute country of origin provides information
	// about the countries used for the manufacturing of the Cryopoor plama or
	// Crioprecipitate.
	CountryOfOrigin []*CodeableConcept `json:"countryOfOrigin"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// General high level classification of the source material specific to the origin of
	// the material.
	SourceMaterialClass *CodeableConcept `json:"sourceMaterialClass"`
	// The unique identifier associated with the source material parent organism shall be
	// specified.
	OrganismId *Identifier `json:"organismId"`
	// This subclause describes the organism which the substance is derived from. For
	// vaccines, the parent organism shall be specified based on these subclause elements.
	// As an example, full taxonomy will be described for the Substance Name: ., Leaf.
	Organism *SubstanceSourceMaterial_Organism `json:"organism"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The organism accepted Scientific name shall be provided based on the organism
	// taxonomy.
	OrganismName string `json:"organismName"`
	// Extensions for parentSubstanceName
	ParentSubstanceName_ext []*Element `json:"_parentSubstanceName"`
	// Extensions for geographicalLocation
	GeographicalLocation_ext []*Element `json:"_geographicalLocation"`
}

func (t *SubstanceSourceMaterial) ResourceType() string {
	return "SubstanceSourceMaterial"
}
func (t *SubstanceSourceMaterial) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		SubstanceSourceMaterial
		ResourceType string `json:"resourceType"`
	}{
		SubstanceSourceMaterial: *t,
		ResourceType:            t.ResourceType(),
	})
}

// ActivityDefinition is This resource allows for the definition of some activity to be performed,
// independent of a particular patient, practitioner, or other performance context.
type ActivityDefinition struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The date on which the resource content was approved by the publisher. Approval
	// happens once when the content is officially approved for usage.
	ApprovalDate string `json:"approvalDate"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// Extensions for priority
	Priority_ext *Element `json:"_priority"`
	// Identifies the food, drug or other product being consumed or supplied in the
	// activity.
	ProductReference *Reference `json:"productReference"`
	// Extensions for lastReviewDate
	LastReviewDate_ext *Element `json:"_lastReviewDate"`
	// Descriptive topics related to the content of the activity. Topics provide a
	// high-level categorization of the activity that can be useful for filtering and
	// searching.
	Topic []*CodeableConcept `json:"topic"`
	// An individual or organization responsible for officially endorsing the content for
	// use in some setting.
	Endorser []*ContactDetail `json:"endorser"`
	// Extensions for kind
	Kind_ext *Element `json:"_kind"`
	// The status of this activity definition. Enables tracking the life-cycle of the
	// content.
	Status ActivityDefinitionStatus `json:"status"`
	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate string `json:"lastReviewDate"`
	// Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).
	Quantity *Quantity `json:"quantity"`
	// Provides detailed dosage instructions in the same way that they are described for
	// MedicationRequest resources.
	Dosage []*Dosage `json:"dosage"`
	// Indicates the sites on the subject's body where the procedure should be performed
	// (I.e. the target sites).
	BodySite []*CodeableConcept `json:"bodySite"`
	// Identifies the facility where the activity will occur; e.g. home, hospital, specific
	// clinic, etc.
	Location *Reference `json:"location"`
	// An absolute URI that is used to identify this activity definition when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal address
	// at which at which an authoritative instance of this activity definition is (or will
	// be) published. This URL can be the target of a canonical reference. It SHALL remain
	// the same when the activity definition is stored on different servers.
	Url string `json:"url"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for approvalDate
	ApprovalDate_ext *Element `json:"_approvalDate"`
	// The period, timing or frequency upon which the described activity is to occur.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	TimingDateTime string `json:"timingDateTime"`
	// The period, timing or frequency upon which the described activity is to occur.
	TimingPeriod *Period `json:"timingPeriod"`
	// The period, timing or frequency upon which the described activity is to occur.
	TimingDuration *Duration `json:"timingDuration"`
	// Defines observation requirements for the action to be performed, such as body weight
	// or surface area.
	ObservationRequirement []*Reference `json:"observationRequirement"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A natural language name identifying the activity definition. This name should be
	// usable as an identifier for the module by machine processing applications such as
	// code generation.
	Name string `json:"name"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// Detailed description of the type of activity; e.g. What lab test, what procedure,
	// what kind of encounter.
	Code *CodeableConcept `json:"code"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Extensions for subtitle
	Subtitle_ext *Element `json:"_subtitle"`
	// A code or group definition that describes the intended subject of the activity being
	// defined.
	SubjectReference *Reference `json:"subjectReference"`
	// The period during which the activity definition content was or is planned to be in
	// active use.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// The period, timing or frequency upon which the described activity is to occur.
	TimingAge *Age `json:"timingAge"`
	// Set this to true if the definition is to indicate that a particular activity should
	// NOT be performed. If true, this element should be interpreted to reinforce a
	// negative coding. For example NPO as a code with a doNotPerform of true would still
	// indicate to NOT perform the action.
	DoNotPerform bool `json:"doNotPerform"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A formal identifier that is used to identify this activity definition when it is
	// represented in other formats, or referenced in a specification, model, design or an
	// instance.
	Identifier []*Identifier `json:"identifier"`
	// The name of the organization or individual that published the activity definition.
	Publisher string `json:"publisher"`
	// An individiual or organization primarily involved in the creation and maintenance of
	// the content.
	Author []*ContactDetail `json:"author"`
	// An individual or organization primarily responsible for internal coherence of the
	// content.
	Editor []*ContactDetail `json:"editor"`
	// A Boolean value to indicate that this activity definition is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used for
	// genuine usage.
	Experimental bool `json:"experimental"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// A legal or geographic region in which the activity definition is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// Related artifacts such as additional documentation, justification, or bibliographic
	// references.
	RelatedArtifact []*RelatedArtifact `json:"relatedArtifact"`
	// A reference to a Library resource containing any formal logic used by the activity
	// definition.
	Library []string `json:"library"`
	// Extensions for timingDateTime
	TimingDateTime_ext *Element `json:"_timingDateTime"`
	// Indicates who should participate in performing the action described.
	Participant []*ActivityDefinition_Participant `json:"participant"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate activity definition instances.
	UseContext []*UsageContext `json:"useContext"`
	// A detailed description of how the activity definition is used from a clinical
	// perspective.
	Usage string `json:"usage"`
	// An individual or organization primarily responsible for review of some aspect of the
	// content.
	Reviewer []*ContactDetail `json:"reviewer"`
	// Extensions for intent
	Intent_ext *Element `json:"_intent"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The period, timing or frequency upon which the described activity is to occur.
	TimingRange *Range `json:"timingRange"`
	// Defines the observations that are expected to be produced by the action.
	ObservationResultRequirement []*Reference `json:"observationResultRequirement"`
	// The identifier that is used to identify this version of the activity definition when
	// it is referenced in a specification, model, design or instance. This is an arbitrary
	// value managed by the activity definition author and is not expected to be globally
	// unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is
	// not available. There is also no expectation that versions can be placed in a
	// lexicographical sequence. To provide a version consistent with the Decision Support
	// Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more
	// information on versioning knowledge assets, refer to the Decision Support Service
	// specification. Note that a version is required for non-experimental active assets.
	Version string `json:"version"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Explanation of why this activity definition is needed and why it has been designed
	// as it has.
	Purpose string `json:"purpose"`
	// A copyright statement relating to the activity definition and/or its contents.
	// Copyright statements are generally legal restrictions on the use and publishing of
	// the activity definition.
	Copyright string `json:"copyright"`
	// A description of the kind of resource the activity definition is representing. For
	// example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest.
	// Typically, but not always, this is a Request resource.
	Kind string `json:"kind"`
	// Indicates the level of authority/intentionality associated with the activity and
	// where the request should fit into the workflow chain.
	Intent string `json:"intent"`
	// A reference to a StructureMap resource that defines a transform that can be executed
	// to produce the intent resource using the ActivityDefinition instance as the input.
	Transform string `json:"transform"`
	// Dynamic values that will be evaluated to produce values for elements of the
	// resulting resource. For example, if the dosage of a medication must be computed
	// based on the patient's weight, a dynamic value would be used to specify an
	// expression that calculated the weight, and the path on the request resource that
	// would contain the result.
	DynamicValue []*ActivityDefinition_DynamicValue `json:"dynamicValue"`
	// A short, descriptive, user-friendly title for the activity definition.
	Title string `json:"title"`
	// The date  (and optionally time) when the activity definition was published. The date
	// must change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the activity
	// definition changes.
	Date string `json:"date"`
	// Extensions for usage
	Usage_ext *Element `json:"_usage"`
	// Extensions for doNotPerform
	DoNotPerform_ext *Element `json:"_doNotPerform"`
	// Identifies the food, drug or other product being consumed or supplied in the
	// activity.
	ProductCodeableConcept *CodeableConcept `json:"productCodeableConcept"`
	// Defines specimen requirements for the action to be performed, such as required
	// specimens for a lab test.
	SpecimenRequirement []*Reference `json:"specimenRequirement"`
	// A code or group definition that describes the intended subject of the activity being
	// defined.
	SubjectCodeableConcept *CodeableConcept `json:"subjectCodeableConcept"`
	// A free text natural language description of the activity definition from a
	// consumer's perspective.
	Description string `json:"description"`
	// A profile to which the target of the activity definition is expected to conform.
	Profile string `json:"profile"`
	// The period, timing or frequency upon which the described activity is to occur.
	TimingTiming *Timing `json:"timingTiming"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// An explanatory or alternate title for the activity definition giving additional
	// information about its content.
	Subtitle string `json:"subtitle"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// Indicates how quickly the activity  should be addressed with respect to other
	// requests.
	Priority string `json:"priority"`
}

func (t *ActivityDefinition) ResourceType() string {
	return "ActivityDefinition"
}
func (t *ActivityDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ActivityDefinition
		ResourceType string `json:"resourceType"`
	}{
		ActivityDefinition: *t,
		ResourceType:       t.ResourceType(),
	})
}

type ActivityDefinitionStatus string

const (
	ActivityDefinitionStatusDraft   ActivityDefinitionStatus = "draft"
	ActivityDefinitionStatusActive  ActivityDefinitionStatus = "active"
	ActivityDefinitionStatusRetired ActivityDefinitionStatus = "retired"
	ActivityDefinitionStatusUnknown ActivityDefinitionStatus = "unknown"
)

// DeviceUseStatement is A record of a device being used by a patient where the record is the result of a
// report from the patient or another clinician.
type DeviceUseStatement struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The time at which the statement was made/recorded.
	RecordedOn string `json:"recordedOn"`
	// The details of the device used.
	Device *Reference `json:"device,omitempty"`
	// Indicates another resource whose existence justifies this DeviceUseStatement.
	ReasonReference []*Reference `json:"reasonReference"`
	// A plan, proposal or order that is fulfilled in whole or in part by this
	// DeviceUseStatement.
	BasedOn []*Reference `json:"basedOn"`
	// Allows linking the DeviceUseStatement to the underlying Request, or to other
	// information that supports or is used to derive the DeviceUseStatement.
	DerivedFrom []*Reference `json:"derivedFrom"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// How often the device was used.
	TimingPeriod *Period `json:"timingPeriod"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A code representing the patient or other source's judgment about the state of the
	// device used that this statement is about.  Generally this will be active or
	// completed.
	Status DeviceUseStatementStatus `json:"status"`
	// The patient who used the device.
	Subject *Reference `json:"subject,omitempty"`
	// Extensions for timingDateTime
	TimingDateTime_ext *Element `json:"_timingDateTime"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// How often the device was used.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	TimingDateTime string `json:"timingDateTime"`
	// Reason or justification for the use of the device.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// Indicates the anotomic location on the subject's body where the device was used (
	// i.e. the target).
	BodySite *CodeableConcept `json:"bodySite"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Who reported the device was being used by the patient.
	Source *Reference `json:"source"`
	// Details about the device statement that were not represented at all or sufficiently
	// in one of the attributes provided in a class. These may include for example a
	// comment, an instruction, or a note associated with the statement.
	Note []*Annotation `json:"note"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// How often the device was used.
	TimingTiming *Timing `json:"timingTiming"`
	// Extensions for recordedOn
	RecordedOn_ext *Element `json:"_recordedOn"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// An external identifier for this statement such as an IRI.
	Identifier []*Identifier `json:"identifier"`
}

func (t *DeviceUseStatement) ResourceType() string {
	return "DeviceUseStatement"
}
func (t *DeviceUseStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		DeviceUseStatement
		ResourceType string `json:"resourceType"`
	}{
		DeviceUseStatement: *t,
		ResourceType:       t.ResourceType(),
	})
}

type DeviceUseStatementStatus string

const (
	DeviceUseStatementStatusActive         DeviceUseStatementStatus = "active"
	DeviceUseStatementStatusCompleted      DeviceUseStatementStatus = "completed"
	DeviceUseStatementStatusEnteredInError DeviceUseStatementStatus = "entered-in-error"
	DeviceUseStatementStatusIntended       DeviceUseStatementStatus = "intended"
	DeviceUseStatementStatusStopped        DeviceUseStatementStatus = "stopped"
	DeviceUseStatementStatusOnHold         DeviceUseStatementStatus = "on-hold"
)

// MedicinalProduct is Detailed definition of a medicinal product, typically for uses other than direct
// patient care (e.g. regulatory use).
type MedicinalProduct struct {
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Whether the Medicinal Product is subject to additional monitoring for regulatory
	// reasons.
	AdditionalMonitoringIndicator *CodeableConcept `json:"additionalMonitoringIndicator"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The legal status of supply of the medicinal product as classified by the regulator.
	LegalStatusOfSupply *CodeableConcept `json:"legalStatusOfSupply"`
	// If this medicine applies to human or veterinary uses.
	Domain *Coding `json:"domain"`
	// If authorised for use in children.
	PaediatricUseIndicator *CodeableConcept `json:"paediatricUseIndicator"`
	// Marketing status of the medicinal product, in contrast to marketing authorizaton.
	MarketingStatus []*MarketingStatus `json:"marketingStatus"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Regulatory type, e.g. Investigational or Authorized.
	Type *CodeableConcept `json:"type"`
	// Extensions for specialMeasures
	SpecialMeasures_ext []*Element `json:"_specialMeasures"`
	// Indicates if the medicinal product has an orphan designation for the treatment of a
	// rare disease.
	SpecialDesignation []*MedicinalProduct_SpecialDesignation `json:"specialDesignation"`
	// Whether the Medicinal Product is subject to special measures for regulatory reasons.
	SpecialMeasures []string `json:"specialMeasures"`
	// Pharmaceutical aspects of product.
	PharmaceuticalProduct []*Reference `json:"pharmaceuticalProduct"`
	// Package representation for the product.
	PackagedMedicinalProduct []*Reference `json:"packagedMedicinalProduct"`
	// A product specific contact, person (in a role), or an organization.
	Contact []*Reference `json:"contact"`
	// Reference to another product, e.g. for linking authorised to investigational product.
	CrossReference []*Identifier `json:"crossReference"`
	// Clinical trials or studies that this product is involved in.
	ClinicalTrial []*Reference `json:"clinicalTrial"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The dose form for a single part product, or combined form of a multiple part product.
	CombinedPharmaceuticalDoseForm *CodeableConcept `json:"combinedPharmaceuticalDoseForm"`
	// Allows the product to be classified by various systems.
	ProductClassification []*CodeableConcept `json:"productClassification"`
	// Supporting documentation, typically for regulatory submission.
	AttachedDocument []*Reference `json:"attachedDocument"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Business identifier for this product. Could be an MPID.
	Identifier []*Identifier `json:"identifier"`
	// A master file for to the medicinal product (e.g. Pharmacovigilance System Master
	// File).
	MasterFile []*Reference `json:"masterFile"`
	// The product's name, including full name and possibly coded parts.
	Name []*MedicinalProduct_Name `json:"name,omitempty"`
	// An operation applied to the product, for manufacturing or adminsitrative purpose.
	ManufacturingBusinessOperation []*MedicinalProduct_ManufacturingBusinessOperation `json:"manufacturingBusinessOperation"`
}

func (t *MedicinalProduct) ResourceType() string {
	return "MedicinalProduct"
}
func (t *MedicinalProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MedicinalProduct
		ResourceType string `json:"resourceType"`
	}{
		MedicinalProduct: *t,
		ResourceType:     t.ResourceType(),
	})
}

// SubstanceProtein is A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a
// combination of subunits that are either covalently linked or have a defined
// invariant stoichiometric relationship. This includes all synthetic, recombinant and
// purified SubstanceProteins of defined sequence, whether the use is therapeutic or
// prophylactic. This set of elements will be used to describe albumins, coagulation
// factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes,
// toxins, toxoids, recombinant vaccines, and immunomodulators.
type SubstanceProtein struct {
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The SubstanceProtein descriptive elements will only be used when a complete or
	// partial amino acid sequence is available or derivable from a nucleic acid sequence.
	SequenceType *CodeableConcept `json:"sequenceType"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for numberOfSubunits
	NumberOfSubunits_ext *Element `json:"_numberOfSubunits"`
	// Extensions for disulfideLinkage
	DisulfideLinkage_ext []*Element `json:"_disulfideLinkage"`
	// This subclause refers to the description of each subunit constituting the
	// SubstanceProtein. A subunit is a linear sequence of amino acids linked through
	// peptide bonds. The Subunit information shall be provided when the finished
	// SubstanceProtein is a complex of multiple sequences; subunits are not used to
	// delineate domains within a single sequence. Subunits are listed in order of
	// decreasing length; sequences of the same length will be ordered by decreasing
	// molecular weight; subunits that have identical sequences will be repeated multiple
	// times.
	Subunit []*SubstanceProtein_Subunit `json:"subunit"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Number of linear sequences of amino acids linked through peptide bonds. The number
	// of subunits constituting the SubstanceProtein shall be described. It is possible
	// that the number of subunits can be variable.
	NumberOfSubunits int64 `json:"numberOfSubunits"`
	// The disulphide bond between two cysteine residues either on the same subunit or on
	// two different subunits shall be described. The position of the disulfide bonds in
	// the SubstanceProtein shall be listed in increasing order of subunit number and
	// position within subunit followed by the abbreviation of the amino acids involved.
	// The disulfide linkage positions shall actually contain the amino acid Cysteine at
	// the respective positions.
	DisulfideLinkage []string `json:"disulfideLinkage"`
}

func (t *SubstanceProtein) ResourceType() string {
	return "SubstanceProtein"
}
func (t *SubstanceProtein) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		SubstanceProtein
		ResourceType string `json:"resourceType"`
	}{
		SubstanceProtein: *t,
		ResourceType:     t.ResourceType(),
	})
}

// PaymentNotice is This resource provides the status of the payment for goods and services rendered,
// and the request and response resource references.
type PaymentNotice struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A unique identifier assigned to this payment notice.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for created
	Created_ext *Element `json:"_created"`
	// A code indicating whether payment has been sent or cleared.
	PaymentStatus *CodeableConcept `json:"paymentStatus"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The amount sent to the payee.
	Amount *Money `json:"amount,omitempty"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Reference of resource for which payment is being made.
	Request *Reference `json:"request"`
	// The practitioner who is responsible for the services rendered to the patient.
	Provider *Reference `json:"provider"`
	// The date when the above payment action occurred.
	PaymentDate string `json:"paymentDate"`
	// The party who will receive or has received payment that is the subject of this
	// notification.
	Payee *Reference `json:"payee"`
	// The status of the resource instance.
	Status string `json:"status"`
	// Reference of response to resource for which payment is being made.
	Response *Reference `json:"response"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The date when this resource was created.
	Created string `json:"created"`
	// A reference to the payment which is the subject of this notice.
	Payment *Reference `json:"payment,omitempty"`
	// Extensions for paymentDate
	PaymentDate_ext *Element `json:"_paymentDate"`
	// The party who is notified of the payment status.
	Recipient *Reference `json:"recipient,omitempty"`
}

func (t *PaymentNotice) ResourceType() string {
	return "PaymentNotice"
}
func (t *PaymentNotice) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		PaymentNotice
		ResourceType string `json:"resourceType"`
	}{
		PaymentNotice: *t,
		ResourceType:  t.ResourceType(),
	})
}

// Patient is Demographics and other administrative information about an individual or animal
// receiving care or other health-related services.
type Patient struct {
	// The date of birth for the individual.
	BirthDate string `json:"birthDate"`
	// Indicates if the individual is deceased or not.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	DeceasedDateTime string `json:"deceasedDateTime"`
	// Link to another patient resource that concerns the same actual patient.
	Link []*Patient_Link `json:"link"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A contact party (e.g. guardian, partner, friend) for the patient.
	Contact []*Patient_Contact `json:"contact"`
	// Patient's nominated care provider.
	GeneralPractitioner []*Reference `json:"generalPractitioner"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Whether this patient record is in active use.
	// Many systems use this property to mark as non-current patients, such as those that
	// have not been seen for a period of time based on an organization's business rules.
	//
	// It is often used to filter patient lists to exclude inactive patients
	//
	// Deceased patients may also be marked as inactive for the same reasons, but may be
	// active for some time after death.
	Active bool `json:"active"`
	// A name associated with the individual.
	Name []*HumanName `json:"name"`
	// Organization that is the custodian of the patient record.
	ManagingOrganization *Reference `json:"managingOrganization"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Indicates if the individual is deceased or not.
	// pattern ^true|false$
	DeceasedBoolean bool `json:"deceasedBoolean"`
	// Extensions for deceasedDateTime
	DeceasedDateTime_ext *Element `json:"_deceasedDateTime"`
	// Indicates whether the patient is part of a multiple (boolean) or indicates the
	// actual birth order (integer).
	// pattern ^-?([0]|([1-9][0-9]*))$
	MultipleBirthInteger int64 `json:"multipleBirthInteger"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// An identifier for this patient.
	Identifier []*Identifier `json:"identifier"`
	// An address for the individual.
	Address []*Address `json:"address"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for active
	Active_ext *Element `json:"_active"`
	// A contact detail (e.g. a telephone number or an email address) by which the
	// individual may be contacted.
	Telecom []*ContactPoint `json:"telecom"`
	// Extensions for birthDate
	BirthDate_ext *Element `json:"_birthDate"`
	// Extensions for deceasedBoolean
	DeceasedBoolean_ext *Element `json:"_deceasedBoolean"`
	// Indicates whether the patient is part of a multiple (boolean) or indicates the
	// actual birth order (integer).
	// pattern ^true|false$
	MultipleBirthBoolean bool `json:"multipleBirthBoolean"`
	// Extensions for multipleBirthInteger
	MultipleBirthInteger_ext *Element `json:"_multipleBirthInteger"`
	// A language which may be used to communicate with the patient about his or her health.
	Communication []*Patient_Communication `json:"communication"`
	// This field contains a patient's most recent marital (civil) status.
	MaritalStatus *CodeableConcept `json:"maritalStatus"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Administrative Gender - the gender that the patient is considered to have for
	// administration and record keeping purposes.
	Gender PatientGender `json:"gender"`
	// Extensions for gender
	Gender_ext *Element `json:"_gender"`
	// Extensions for multipleBirthBoolean
	MultipleBirthBoolean_ext *Element `json:"_multipleBirthBoolean"`
	// Image of the patient.
	Photo []*Attachment `json:"photo"`
}

func (t *Patient) ResourceType() string {
	return "Patient"
}
func (t *Patient) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Patient
		ResourceType string `json:"resourceType"`
	}{
		Patient:      *t,
		ResourceType: t.ResourceType(),
	})
}

type PatientGender string

const (
	PatientGenderMale    PatientGender = "male"
	PatientGenderFemale  PatientGender = "female"
	PatientGenderOther   PatientGender = "other"
	PatientGenderUnknown PatientGender = "unknown"
)

// PlanDefinition is This resource allows for the definition of various types of plans as a sharable,
// consumable, and executable artifact. The resource is general enough to support the
// description of a broad range of clinical artifacts such as clinical decision support
// rules, order sets and protocols.
type PlanDefinition struct {
	// The period during which the plan definition content was or is planned to be in
	// active use.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// An explanatory or alternate title for the plan definition giving additional
	// information about its content.
	Subtitle string `json:"subtitle"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate plan definition instances.
	UseContext []*UsageContext `json:"useContext"`
	// A legal or geographic region in which the plan definition is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// Extensions for approvalDate
	ApprovalDate_ext *Element `json:"_approvalDate"`
	// Extensions for lastReviewDate
	LastReviewDate_ext *Element `json:"_lastReviewDate"`
	// An individual or organization primarily responsible for review of some aspect of the
	// content.
	Reviewer []*ContactDetail `json:"reviewer"`
	// A free text natural language description of the plan definition from a consumer's
	// perspective.
	Description string `json:"description"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// An individual or organization responsible for officially endorsing the content for
	// use in some setting.
	Endorser []*ContactDetail `json:"endorser"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An absolute URI that is used to identify this plan definition when it is referenced
	// in a specification, model, design or an instance; also called its canonical
	// identifier. This SHOULD be globally unique and SHOULD be a literal address at which
	// at which an authoritative instance of this plan definition is (or will be)
	// published. This URL can be the target of a canonical reference. It SHALL remain the
	// same when the plan definition is stored on different servers.
	Url string `json:"url"`
	// The identifier that is used to identify this version of the plan definition when it
	// is referenced in a specification, model, design or instance. This is an arbitrary
	// value managed by the plan definition author and is not expected to be globally
	// unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is
	// not available. There is also no expectation that versions can be placed in a
	// lexicographical sequence. To provide a version consistent with the Decision Support
	// Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more
	// information on versioning knowledge assets, refer to the Decision Support Service
	// specification. Note that a version is required for non-experimental active artifacts.
	Version string `json:"version"`
	// An individual or organization primarily responsible for internal coherence of the
	// content.
	Editor []*ContactDetail `json:"editor"`
	// Goals that describe what the activities within the plan are intended to achieve. For
	// example, weight loss, restoring an activity of daily living, obtaining herd immunity
	// via immunization, meeting a process improvement objective, etc.
	Goal []*PlanDefinition_Goal `json:"goal"`
	// A formal identifier that is used to identify this plan definition when it is
	// represented in other formats, or referenced in a specification, model, design or an
	// instance.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// A copyright statement relating to the plan definition and/or its contents. Copyright
	// statements are generally legal restrictions on the use and publishing of the plan
	// definition.
	Copyright string `json:"copyright"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// An action or group of actions to be taken as part of the plan.
	Action []*PlanDefinition_Action `json:"action"`
	// Extensions for usage
	Usage_ext *Element `json:"_usage"`
	// Descriptive topics related to the content of the plan definition. Topics provide a
	// high-level categorization of the definition that can be useful for filtering and
	// searching.
	Topic []*CodeableConcept `json:"topic"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// A high-level category for the plan definition that distinguishes the kinds of
	// systems that would be interested in the plan definition.
	Type *CodeableConcept `json:"type"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A code or group definition that describes the intended subject of the plan
	// definition.
	SubjectReference *Reference `json:"subjectReference"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate string `json:"lastReviewDate"`
	// A reference to a Library resource containing any formal logic used by the plan
	// definition.
	Library []string `json:"library"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// A short, descriptive, user-friendly title for the plan definition.
	Title string `json:"title"`
	// The date  (and optionally time) when the plan definition was published. The date
	// must change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the plan
	// definition changes.
	Date string `json:"date"`
	// A detailed description of how the plan definition is used from a clinical
	// perspective.
	Usage string `json:"usage"`
	// An individiual or organization primarily involved in the creation and maintenance of
	// the content.
	Author []*ContactDetail `json:"author"`
	// The date on which the resource content was approved by the publisher. Approval
	// happens once when the content is officially approved for usage.
	ApprovalDate string `json:"approvalDate"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A natural language name identifying the plan definition. This name should be usable
	// as an identifier for the module by machine processing applications such as code
	// generation.
	Name string `json:"name"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Extensions for subtitle
	Subtitle_ext *Element `json:"_subtitle"`
	// A Boolean value to indicate that this plan definition is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used for
	// genuine usage.
	Experimental bool `json:"experimental"`
	// A code or group definition that describes the intended subject of the plan
	// definition.
	SubjectCodeableConcept *CodeableConcept `json:"subjectCodeableConcept"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// Related artifacts such as additional documentation, justification, or bibliographic
	// references.
	RelatedArtifact []*RelatedArtifact `json:"relatedArtifact"`
	// The status of this plan definition. Enables tracking the life-cycle of the content.
	Status PlanDefinitionStatus `json:"status"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Explanation of why this plan definition is needed and why it has been designed as it
	// has.
	Purpose string `json:"purpose"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The name of the organization or individual that published the plan definition.
	Publisher string `json:"publisher"`
}

func (t *PlanDefinition) ResourceType() string {
	return "PlanDefinition"
}
func (t *PlanDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		PlanDefinition
		ResourceType string `json:"resourceType"`
	}{
		PlanDefinition: *t,
		ResourceType:   t.ResourceType(),
	})
}

type PlanDefinitionStatus string

const (
	PlanDefinitionStatusDraft   PlanDefinitionStatus = "draft"
	PlanDefinitionStatusActive  PlanDefinitionStatus = "active"
	PlanDefinitionStatusRetired PlanDefinitionStatus = "retired"
	PlanDefinitionStatusUnknown PlanDefinitionStatus = "unknown"
)

// Slot is A slot of time on a schedule that may be available for booking appointments.
type Slot struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// External Ids for this item.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for start
	Start_ext *Element `json:"_start"`
	// The schedule resource that this slot defines an interval of status information.
	Schedule *Reference `json:"schedule,omitempty"`
	// Date/Time that the slot is to conclude.
	End string `json:"end"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A broad categorization of the service that is to be performed during this
	// appointment.
	ServiceCategory []*CodeableConcept `json:"serviceCategory"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Date/Time that the slot is to begin.
	Start string `json:"start"`
	// Comments on the slot to describe any extended information. Such as custom
	// constraints on the slot.
	Comment string `json:"comment"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The style of appointment or patient that may be booked in the slot (not service
	// type).
	AppointmentType *CodeableConcept `json:"appointmentType"`
	// The specialty of a practitioner that would be required to perform the service
	// requested in this appointment.
	Specialty []*CodeableConcept `json:"specialty"`
	// busy | free | busy-unavailable | busy-tentative | entered-in-error.
	Status SlotStatus `json:"status"`
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for end
	End_ext *Element `json:"_end"`
	// This slot has already been overbooked, appointments are unlikely to be accepted for
	// this time.
	Overbooked bool `json:"overbooked"`
	// Extensions for overbooked
	Overbooked_ext *Element `json:"_overbooked"`
	// The type of appointments that can be booked into this slot (ideally this would be an
	// identifiable service - which is at a location, rather than the location itself). If
	// provided then this overrides the value provided on the availability resource.
	ServiceType []*CodeableConcept `json:"serviceType"`
}

func (t *Slot) ResourceType() string {
	return "Slot"
}
func (t *Slot) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Slot
		ResourceType string `json:"resourceType"`
	}{
		Slot:         *t,
		ResourceType: t.ResourceType(),
	})
}

type SlotStatus string

const (
	SlotStatusBusy            SlotStatus = "busy"
	SlotStatusFree            SlotStatus = "free"
	SlotStatusBusyUnavailable SlotStatus = "busy-unavailable"
	SlotStatusBusyTentative   SlotStatus = "busy-tentative"
	SlotStatusEnteredInError  SlotStatus = "entered-in-error"
)

// ChargeItemDefinition is The ChargeItemDefinition resource provides the properties that apply to the
// (billing) codes necessary to calculate costs and prices. The properties may differ
// largely depending on type and realm, therefore this resource gives only a rough
// structure and requires profiling for each type of billing code system.
type ChargeItemDefinition struct {
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Extensions for approvalDate
	ApprovalDate_ext *Element `json:"_approvalDate"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// A short, descriptive, user-friendly title for the charge item definition.
	Title string `json:"title"`
	// A Boolean value to indicate that this charge item definition is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used for
	// genuine usage.
	Experimental bool `json:"experimental"`
	// Extensions for lastReviewDate
	LastReviewDate_ext *Element `json:"_lastReviewDate"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// The identifier that is used to identify this version of the charge item definition
	// when it is referenced in a specification, model, design or instance. This is an
	// arbitrary value managed by the charge item definition author and is not expected to
	// be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
	// managed version is not available. There is also no expectation that versions can be
	// placed in a lexicographical sequence. To provide a version consistent with the
	// Decision Support Service specification, use the format Major.Minor.Revision (e.g.
	// 1.0.0). For more information on versioning knowledge assets, refer to the Decision
	// Support Service specification. Note that a version is required for non-experimental
	// active assets.
	Version string `json:"version"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate string `json:"lastReviewDate"`
	// The period during which the charge item definition content was or is planned to be
	// in active use.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// Group of properties which are applicable under the same conditions. If no
	// applicability rules are established for the group, then all properties always apply.
	PropertyGroup []*ChargeItemDefinition_PropertyGroup `json:"propertyGroup"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A formal identifier that is used to identify this charge item definition when it is
	// represented in other formats, or referenced in a specification, model, design or an
	// instance.
	Identifier []*Identifier `json:"identifier"`
	// A larger definition of which this particular definition is a component or step.
	PartOf []string `json:"partOf"`
	// The name of the organization or individual that published the charge item definition.
	Publisher string `json:"publisher"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// The date on which the resource content was approved by the publisher. Approval
	// happens once when the content is officially approved for usage.
	ApprovalDate string `json:"approvalDate"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The URL pointing to an externally-defined charge item definition that is adhered to
	// in whole or in part by this definition.
	DerivedFromUri []string `json:"derivedFromUri"`
	// Extensions for derivedFromUri
	DerivedFromUri_ext []*Element `json:"_derivedFromUri"`
	// As new versions of a protocol or guideline are defined, allows identification of
	// what versions are replaced by a new instance.
	Replaces []string `json:"replaces"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate charge item definition instances.
	UseContext []*UsageContext `json:"useContext"`
	// The defined billing details in this resource pertain to the given billing code.
	Code *CodeableConcept `json:"code"`
	// A copyright statement relating to the charge item definition and/or its contents.
	// Copyright statements are generally legal restrictions on the use and publishing of
	// the charge item definition.
	Copyright string `json:"copyright"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// The defined billing details in this resource pertain to the given product
	// instance(s).
	Instance []*Reference `json:"instance"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The date  (and optionally time) when the charge item definition was published. The
	// date must change when the business version changes and it must change if the status
	// code changes. In addition, it should change when the substantive content of the
	// charge item definition changes.
	Date string `json:"date"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// A legal or geographic region in which the charge item definition is intended to be
	// used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// Expressions that describe applicability criteria for the billing code.
	Applicability []*ChargeItemDefinition_Applicability `json:"applicability"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// An absolute URI that is used to identify this charge item definition when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal address
	// at which at which an authoritative instance of this charge item definition is (or
	// will be) published. This URL can be the target of a canonical reference. It SHALL
	// remain the same when the charge item definition is stored on different servers.
	Url string `json:"url"`
	// The current state of the ChargeItemDefinition.
	Status ChargeItemDefinitionStatus `json:"status"`
	// A free text natural language description of the charge item definition from a
	// consumer's perspective.
	Description string `json:"description"`
}

func (t *ChargeItemDefinition) ResourceType() string {
	return "ChargeItemDefinition"
}
func (t *ChargeItemDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ChargeItemDefinition
		ResourceType string `json:"resourceType"`
	}{
		ChargeItemDefinition: *t,
		ResourceType:         t.ResourceType(),
	})
}

type ChargeItemDefinitionStatus string

const (
	ChargeItemDefinitionStatusDraft   ChargeItemDefinitionStatus = "draft"
	ChargeItemDefinitionStatusActive  ChargeItemDefinitionStatus = "active"
	ChargeItemDefinitionStatusRetired ChargeItemDefinitionStatus = "retired"
	ChargeItemDefinitionStatusUnknown ChargeItemDefinitionStatus = "unknown"
)

// ClaimResponse is This resource provides the adjudication details from the processing of a Claim
// resource.
type ClaimResponse struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for use
	Use_ext *Element `json:"_use"`
	// A human readable description of the status of the adjudication.
	Disposition string `json:"disposition"`
	// The adjudication results which are presented at the header level rather than at the
	// line-item or add-item levels.
	Adjudication []*ClaimResponse_Adjudication `json:"adjudication"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A finer grained suite of claim type codes which may convey additional information
	// such as Inpatient vs Outpatient and/or a specialty service.
	Type *CodeableConcept `json:"type,omitempty"`
	// A code, used only on a response to a preauthorization, to indicate whether the
	// benefits payable have been reserved and for whom.
	FundsReserve *CodeableConcept `json:"fundsReserve"`
	// Request for additional supporting or authorizing information.
	CommunicationRequest []*Reference `json:"communicationRequest"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The status of the resource instance.
	Status string `json:"status"`
	// A finer grained suite of claim type codes which may convey additional information
	// such as Inpatient vs Outpatient and/or a specialty service.
	SubType *CodeableConcept `json:"subType"`
	// The date this resource was created.
	Created string `json:"created"`
	// Extensions for disposition
	Disposition_ext *Element `json:"_disposition"`
	// The first-tier service adjudications for payor added product or service lines.
	AddItem []*ClaimResponse_AddItem `json:"addItem"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// A code to indicate whether the nature of the request is: to request adjudication of
	// products and services previously rendered; or requesting authorization and
	// adjudication for provision in the future; or requesting the non-binding adjudication
	// of the listed products and services which could be provided in the future.
	Use string `json:"use"`
	// The party responsible for authorization, adjudication and reimbursement.
	Insurer *Reference `json:"insurer,omitempty"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The outcome of the claim, predetermination, or preauthorization processing.
	Outcome string `json:"outcome"`
	// Type of Party to be reimbursed: subscriber, provider, other.
	PayeeType *CodeableConcept `json:"payeeType"`
	// A code for the form to be used for printing the content.
	FormCode *CodeableConcept `json:"formCode"`
	// Errors encountered during the processing of the adjudication.
	Error []*ClaimResponse_Error `json:"error"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A unique identifier assigned to this claim response.
	Identifier []*Identifier `json:"identifier"`
	// The provider which is responsible for the claim, predetermination or
	// preauthorization.
	Requestor *Reference `json:"requestor"`
	// Original request resource reference.
	Request *Reference `json:"request"`
	// A claim line. Either a simple (a product or service) or a 'group' of details which
	// can also be a simple items or groups of sub-details.
	Item []*ClaimResponse_Item `json:"item"`
	// Categorized monetary totals for the adjudication.
	Total []*ClaimResponse_Total `json:"total"`
	// Financial instruments for reimbursement for the health care products and services
	// specified on the claim.
	Insurance []*ClaimResponse_Insurance `json:"insurance"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for created
	Created_ext *Element `json:"_created"`
	// Extensions for outcome
	Outcome_ext *Element `json:"_outcome"`
	// Reference from the Insurer which is used in later communications which refers to
	// this adjudication.
	PreAuthRef string `json:"preAuthRef"`
	// Extensions for preAuthRef
	PreAuthRef_ext *Element `json:"_preAuthRef"`
	// Payment details for the adjudication of the claim.
	Payment *ClaimResponse_Payment `json:"payment"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The party to whom the professional services and/or products have been supplied or
	// are being considered and for whom actual for facast reimbursement is sought.
	Patient *Reference `json:"patient,omitempty"`
	// The time frame during which this authorization is effective.
	PreAuthPeriod *Period `json:"preAuthPeriod"`
	// The actual form, by reference or inclusion, for printing the content or an EOB.
	Form *Attachment `json:"form"`
	// A note that describes or explains adjudication results in a human readable form.
	ProcessNote []*ClaimResponse_ProcessNote `json:"processNote"`
}

func (t *ClaimResponse) ResourceType() string {
	return "ClaimResponse"
}
func (t *ClaimResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ClaimResponse
		ResourceType string `json:"resourceType"`
	}{
		ClaimResponse: *t,
		ResourceType:  t.ResourceType(),
	})
}

// Coverage is Financial instrument which may be used to reimburse or pay for health care products
// and services. Includes both insurance and self-payment.
type Coverage struct {
	// A unique identifier for a dependent under the coverage.
	Dependent string `json:"dependent"`
	// When 'subrogation=true' this insurance instance has been included not for
	// adjudication but to provide insurers with the details to recover costs.
	Subrogation bool `json:"subrogation"`
	// The type of coverage: social program, medical plan, accident coverage (workers
	// compensation, auto), group health or payment by an individual or organization.
	Type *CodeableConcept `json:"type"`
	// The insurer assigned ID for the Subscriber.
	SubscriberId string `json:"subscriberId"`
	// The party who benefits from the insurance coverage; the patient when products and/or
	// services are provided.
	Beneficiary *Reference `json:"beneficiary,omitempty"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A unique identifier assigned to this coverage.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for dependent
	Dependent_ext *Element `json:"_dependent"`
	// Time period during which the coverage is in force. A missing start date indicates
	// the start date isn't known, a missing end date means the coverage is continuing to
	// be in force.
	Period *Period `json:"period"`
	// A suite of underwriter specific classifiers.
	Class []*Coverage_Class `json:"class"`
	// The insurer-specific identifier for the insurer-defined network of providers to
	// which the beneficiary may seek treatment which will be covered at the 'in-network'
	// rate, otherwise 'out of network' terms and conditions apply.
	Network string `json:"network"`
	// A suite of codes indicating the cost category and associated amount which have been
	// detailed in the policy and may have been  included on the health card.
	CostToBeneficiary []*Coverage_CostToBeneficiary `json:"costToBeneficiary"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The party who has signed-up for or 'owns' the contractual relationship to the policy
	// or to whom the benefit of the policy for services rendered to them or their family
	// is due.
	Subscriber *Reference `json:"subscriber"`
	// The order of applicability of this coverage relative to other coverages which are
	// currently in force. Note, there may be gaps in the numbering and this does not imply
	// primary, secondary etc. as the specific positioning of coverages depends upon the
	// episode of care.
	Order uint64 `json:"order"`
	// Extensions for order
	Order_ext *Element `json:"_order"`
	// The status of the resource instance.
	Status string `json:"status"`
	// The party who 'owns' the insurance policy.
	PolicyHolder *Reference `json:"policyHolder"`
	// The program or plan underwriter or payor including both insurance and non-insurance
	// agreements, such as patient-pay agreements.
	Payor []*Reference `json:"payor,omitempty"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The relationship of beneficiary (patient) to the subscriber.
	Relationship *CodeableConcept `json:"relationship"`
	// Extensions for subrogation
	Subrogation_ext *Element `json:"_subrogation"`
	// The policy(s) which constitute this insurance coverage.
	Contract []*Reference `json:"contract"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for subscriberId
	SubscriberId_ext *Element `json:"_subscriberId"`
	// Extensions for network
	Network_ext *Element `json:"_network"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
}

func (t *Coverage) ResourceType() string {
	return "Coverage"
}
func (t *Coverage) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Coverage
		ResourceType string `json:"resourceType"`
	}{
		Coverage:     *t,
		ResourceType: t.ResourceType(),
	})
}

// Immunization is Describes the event of a patient being administered a vaccine or a record of an
// immunization as reported by a patient, a clinician or another party.
type Immunization struct {
	// The quantity of vaccine product that was administered.
	DoseQuantity *Quantity `json:"doseQuantity"`
	// Indicates who performed the immunization event.
	Performer []*Immunization_Performer `json:"performer"`
	// Indicates the current status of the immunization event.
	Status string `json:"status"`
	// Date vaccine administered or was to be administered.
	// pattern ^[ \r\n\t\S]+$
	OccurrenceString string `json:"occurrenceString"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The visit or admission or other contact between patient and health care provider the
	// immunization was performed as part of.
	Encounter *Reference `json:"encounter"`
	// Extensions for primarySource
	PrimarySource_ext *Element `json:"_primarySource"`
	// Lot number of the  vaccine product.
	LotNumber string `json:"lotNumber"`
	// Extensions for lotNumber
	LotNumber_ext *Element `json:"_lotNumber"`
	// Body site where vaccine was administered.
	Site *CodeableConcept `json:"site"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Categorical data indicating that an adverse event is associated in time to an
	// immunization.
	Reaction []*Immunization_Reaction `json:"reaction"`
	// The protocol (set of recommendations) being followed by the provider who
	// administered the dose.
	ProtocolApplied []*Immunization_ProtocolApplied `json:"protocolApplied"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// An indication that the content of the record is based on information from the person
	// who administered the vaccine. This reflects the context under which the data was
	// originally recorded.
	PrimarySource bool `json:"primarySource"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The patient who either received or did not receive the immunization.
	Patient *Reference `json:"patient,omitempty"`
	// The date the occurrence of the immunization was first captured in the record -
	// potentially significantly after the occurrence of the event.
	Recorded string `json:"recorded"`
	// Indication if a dose is considered to be subpotent. By default, a dose should be
	// considered to be potent.
	IsSubpotent bool `json:"isSubpotent"`
	// Indicates a patient's eligibility for a funding program.
	ProgramEligibility []*CodeableConcept `json:"programEligibility"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for occurrenceString
	OccurrenceString_ext *Element `json:"_occurrenceString"`
	// The service delivery location where the vaccine administration occurred.
	Location *Reference `json:"location"`
	// Reasons why the vaccine was administered.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A unique identifier assigned to this immunization record.
	Identifier []*Identifier `json:"identifier"`
	// Date vaccine administered or was to be administered.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	OccurrenceDateTime string `json:"occurrenceDateTime"`
	// Extensions for occurrenceDateTime
	OccurrenceDateTime_ext *Element `json:"_occurrenceDateTime"`
	// Date vaccine batch expires.
	ExpirationDate string `json:"expirationDate"`
	// The path by which the vaccine product is taken into the body.
	Route *CodeableConcept `json:"route"`
	// Reason why a dose is considered to be subpotent.
	SubpotentReason []*CodeableConcept `json:"subpotentReason"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for expirationDate
	ExpirationDate_ext *Element `json:"_expirationDate"`
	// Extra information about the immunization that is not conveyed by the other
	// attributes.
	Note []*Annotation `json:"note"`
	// Condition, Observation or DiagnosticReport that supports why the immunization was
	// administered.
	ReasonReference []*Reference `json:"reasonReference"`
	// Extensions for isSubpotent
	IsSubpotent_ext *Element `json:"_isSubpotent"`
	// Indicates the source of the vaccine actually administered. This may be different
	// than the patient eligibility (e.g. the patient may be eligible for a publically
	// purchased vaccine but due to inventory issues, vaccine purchased with private funds
	// was actually administered).
	FundingSource *CodeableConcept `json:"fundingSource"`
	// Indicates the reason the immunization event was not performed.
	StatusReason *CodeableConcept `json:"statusReason"`
	// Vaccine that was administered or was to be administered.
	VaccineCode *CodeableConcept `json:"vaccineCode,omitempty"`
	// Name of vaccine manufacturer.
	Manufacturer *Reference `json:"manufacturer"`
	// Educational material presented to the patient (or guardian) at the time of vaccine
	// administration.
	Education []*Immunization_Education `json:"education"`
	// Extensions for recorded
	Recorded_ext *Element `json:"_recorded"`
	// The source of the data when the report of the immunization event is not based on
	// information from the person who administered the vaccine.
	ReportOrigin *CodeableConcept `json:"reportOrigin"`
}

func (t *Immunization) ResourceType() string {
	return "Immunization"
}
func (t *Immunization) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Immunization
		ResourceType string `json:"resourceType"`
	}{
		Immunization: *t,
		ResourceType: t.ResourceType(),
	})
}

// EpisodeOfCare is An association between a patient and an organization / healthcare provider(s) during
// which time encounters may occur. The managing organization assumes a level of
// responsibility for the patient during this time.
type EpisodeOfCare struct {
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The history of statuses that the EpisodeOfCare has been through (without requiring
	// processing the history of the resource).
	StatusHistory []*EpisodeOfCare_StatusHistory `json:"statusHistory"`
	// The patient who is the focus of this episode of care.
	Patient *Reference `json:"patient,omitempty"`
	// The set of accounts that may be used for billing for this EpisodeOfCare.
	Account []*Reference `json:"account"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The EpisodeOfCare may be known by different identifiers for different contexts of
	// use, such as when an external agency is tracking the Episode for funding purposes.
	Identifier []*Identifier `json:"identifier"`
	// The practitioner that is the care manager/care coordinator for this patient.
	CareManager *Reference `json:"careManager"`
	// The list of practitioners that may be facilitating this episode of care for specific
	// purposes.
	Team []*Reference `json:"team"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The interval during which the managing organization assumes the defined
	// responsibility.
	Period *Period `json:"period"`
	// Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
	ReferralRequest []*Reference `json:"referralRequest"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A classification of the type of episode of care; e.g. specialist referral, disease
	// management, type of funded care.
	Type []*CodeableConcept `json:"type"`
	// The list of diagnosis relevant to this episode of care.
	Diagnosis []*EpisodeOfCare_Diagnosis `json:"diagnosis"`
	// The organization that has assumed the specific responsibilities for the specified
	// duration.
	ManagingOrganization *Reference `json:"managingOrganization"`
	// planned | waitlist | active | onhold | finished | cancelled.
	Status EpisodeOfCareStatus `json:"status"`
}

func (t *EpisodeOfCare) ResourceType() string {
	return "EpisodeOfCare"
}
func (t *EpisodeOfCare) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		EpisodeOfCare
		ResourceType string `json:"resourceType"`
	}{
		EpisodeOfCare: *t,
		ResourceType:  t.ResourceType(),
	})
}

type EpisodeOfCareStatus string

const (
	EpisodeOfCareStatusPlanned        EpisodeOfCareStatus = "planned"
	EpisodeOfCareStatusWaitlist       EpisodeOfCareStatus = "waitlist"
	EpisodeOfCareStatusActive         EpisodeOfCareStatus = "active"
	EpisodeOfCareStatusOnhold         EpisodeOfCareStatus = "onhold"
	EpisodeOfCareStatusFinished       EpisodeOfCareStatus = "finished"
	EpisodeOfCareStatusCancelled      EpisodeOfCareStatus = "cancelled"
	EpisodeOfCareStatusEnteredInError EpisodeOfCareStatus = "entered-in-error"
)

// Evidence is The Evidence resource describes the conditional state (population and any exposures
// being compared within the population) and outcome (if specified) that the knowledge
// (evidence, assertion, recommendation) is about.
type Evidence struct {
	// Related artifacts such as additional documentation, justification, or bibliographic
	// references.
	RelatedArtifact []*RelatedArtifact `json:"relatedArtifact"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The short title provides an alternate title for use in informal descriptive contexts
	// where the full, formal title is not necessary.
	ShortTitle string `json:"shortTitle"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// Extensions for approvalDate
	ApprovalDate_ext *Element `json:"_approvalDate"`
	// Descriptive topics related to the content of the Evidence. Topics provide a
	// high-level categorization grouping types of Evidences that can be useful for
	// filtering and searching.
	Topic []*CodeableConcept `json:"topic"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The date on which the resource content was approved by the publisher. Approval
	// happens once when the content is officially approved for usage.
	ApprovalDate string `json:"approvalDate"`
	// An individual or organization primarily responsible for review of some aspect of the
	// content.
	Reviewer []*ContactDetail `json:"reviewer"`
	// A reference to a EvidenceVariable resource that defines the population for the
	// research.
	ExposureBackground *Reference `json:"exposureBackground,omitempty"`
	// An absolute URI that is used to identify this evidence when it is referenced in a
	// specification, model, design or an instance; also called its canonical identifier.
	// This SHOULD be globally unique and SHOULD be a literal address at which at which an
	// authoritative instance of this evidence is (or will be) published. This URL can be
	// the target of a canonical reference. It SHALL remain the same when the evidence is
	// stored on different servers.
	Url string `json:"url"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// An individual or organization responsible for officially endorsing the content for
	// use in some setting.
	Endorser []*ContactDetail `json:"endorser"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Extensions for shortTitle
	ShortTitle_ext *Element `json:"_shortTitle"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate evidence instances.
	UseContext []*UsageContext `json:"useContext"`
	// The period during which the evidence content was or is planned to be in active use.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// An individiual or organization primarily involved in the creation and maintenance of
	// the content.
	Author []*ContactDetail `json:"author"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A formal identifier that is used to identify this evidence when it is represented in
	// other formats, or referenced in a specification, model, design or an instance.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// A reference to a EvidenceVariable resomece that defines the outcome for the research.
	Outcome []*Reference `json:"outcome"`
	// The identifier that is used to identify this version of the evidence when it is
	// referenced in a specification, model, design or instance. This is an arbitrary value
	// managed by the evidence author and is not expected to be globally unique. For
	// example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not
	// available. There is also no expectation that versions can be placed in a
	// lexicographical sequence. To provide a version consistent with the Decision Support
	// Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more
	// information on versioning knowledge assets, refer to the Decision Support Service
	// specification. Note that a version is required for non-experimental active artifacts.
	Version string `json:"version"`
	// An explanatory or alternate title for the Evidence giving additional information
	// about its content.
	Subtitle string `json:"subtitle"`
	// The date  (and optionally time) when the evidence was published. The date must
	// change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the evidence
	// changes.
	Date string `json:"date"`
	// A legal or geographic region in which the evidence is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// A copyright statement relating to the evidence and/or its contents. Copyright
	// statements are generally legal restrictions on the use and publishing of the
	// evidence.
	Copyright string `json:"copyright"`
	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate string `json:"lastReviewDate"`
	// An individual or organization primarily responsible for internal coherence of the
	// content.
	Editor []*ContactDetail `json:"editor"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A natural language name identifying the evidence. This name should be usable as an
	// identifier for the module by machine processing applications such as code generation.
	Name string `json:"name"`
	// A short, descriptive, user-friendly title for the evidence.
	Title string `json:"title"`
	// Extensions for subtitle
	Subtitle_ext *Element `json:"_subtitle"`
	// The status of this evidence. Enables tracking the life-cycle of the content.
	Status EvidenceStatus `json:"status"`
	// Extensions for lastReviewDate
	LastReviewDate_ext *Element `json:"_lastReviewDate"`
	// A reference to a EvidenceVariable resource that defines the exposure for the
	// research.
	ExposureVariant []*Reference `json:"exposureVariant"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The name of the organization or individual that published the evidence.
	Publisher string `json:"publisher"`
	// A free text natural language description of the evidence from a consumer's
	// perspective.
	Description string `json:"description"`
	// A human-readable string to clarify or explain concepts about the resource.
	Note []*Annotation `json:"note"`
}

func (t *Evidence) ResourceType() string {
	return "Evidence"
}
func (t *Evidence) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Evidence
		ResourceType string `json:"resourceType"`
	}{
		Evidence:     *t,
		ResourceType: t.ResourceType(),
	})
}

type EvidenceStatus string

const (
	EvidenceStatusDraft   EvidenceStatus = "draft"
	EvidenceStatusActive  EvidenceStatus = "active"
	EvidenceStatusRetired EvidenceStatus = "retired"
	EvidenceStatusUnknown EvidenceStatus = "unknown"
)

// MeasureReport is The MeasureReport resource contains the results of the calculation of a measure; and
// optionally a reference to the resources involved in that calculation.
type MeasureReport struct {
	// The date this measure report was generated.
	Date string `json:"date"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The MeasureReport status. No data will be available until the MeasureReport status
	// is complete.
	Status MeasureReportStatus `json:"status"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A formal identifier that is used to identify this MeasureReport when it is
	// represented in other formats or referenced in a specification, model, design or an
	// instance.
	Identifier []*Identifier `json:"identifier"`
	// A reference to a Bundle containing the Resources that were used in the calculation
	// of this measure.
	EvaluatedResource []*Reference `json:"evaluatedResource"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A reference to the Measure that was calculated to produce this report.
	Measure string `json:"measure,omitempty"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Whether improvement in the measure is noted by an increase or decrease in the
	// measure score.
	ImprovementNotation *CodeableConcept `json:"improvementNotation"`
	// The results of the calculation, one for each population group in the measure.
	Group []*MeasureReport_Group `json:"group"`
	// The type of measure report. This may be an individual report, which provides the
	// score for the measure for an individual member of the population; a subject-listing,
	// which returns the list of members that meet the various criteria in the measure; a
	// summary report, which returns a population count for each of the criteria in the
	// measure; or a data-collection, which enables the MeasureReport to be used to
	// exchange the data-of-interest for a quality measure.
	Type MeasureReportType `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Optional subject identifying the individual or individuals the report is for.
	Subject *Reference `json:"subject"`
	// The individual, location, or organization that is reporting the data.
	Reporter *Reference `json:"reporter"`
	// The reporting period for which the report was calculated.
	Period *Period `json:"period,omitempty"`
}

func (t *MeasureReport) ResourceType() string {
	return "MeasureReport"
}
func (t *MeasureReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MeasureReport
		ResourceType string `json:"resourceType"`
	}{
		MeasureReport: *t,
		ResourceType:  t.ResourceType(),
	})
}

type MeasureReportStatus string
type MeasureReportType string

const (
	MeasureReportStatusComplete     MeasureReportStatus = "complete"
	MeasureReportStatusPending      MeasureReportStatus = "pending"
	MeasureReportStatusError        MeasureReportStatus = "error"
	MeasureReportTypeIndividual     MeasureReportType   = "individual"
	MeasureReportTypeSubjectList    MeasureReportType   = "subject-list"
	MeasureReportTypeSummary        MeasureReportType   = "summary"
	MeasureReportTypeDataCollection MeasureReportType   = "data-collection"
)

// OperationDefinition is A formal computable definition of an operation (on the RESTful interface) or a named
// query (using the search interaction).
type OperationDefinition struct {
	// The date  (and optionally time) when the operation definition was published. The
	// date must change when the business version changes and it must change if the status
	// code changes. In addition, it should change when the substantive content of the
	// operation definition changes.
	Date string `json:"date"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// The name used to invoke the operation.
	Code string `json:"code"`
	// Indicates that this operation definition is a constraining profile on the base.
	Base string `json:"base"`
	// Defines an appropriate combination of parameters to use when invoking this
	// operation, to help code generators when generating overloaded parameter sets for
	// this operation.
	Overload []*OperationDefinition_Overload `json:"overload"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for kind
	Kind_ext *Element `json:"_kind"`
	// A Boolean value to indicate that this operation definition is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used for
	// genuine usage.
	Experimental bool `json:"experimental"`
	// Additional information about how to use this operation or named query.
	Comment string `json:"comment"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The identifier that is used to identify this version of the operation definition
	// when it is referenced in a specification, model, design or instance. This is an
	// arbitrary value managed by the operation definition author and is not expected to be
	// globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed
	// version is not available. There is also no expectation that versions can be placed
	// in a lexicographical sequence.
	Version string `json:"version"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate operation definition instances.
	UseContext []*UsageContext `json:"useContext"`
	// Extensions for resource
	Resource_ext []*Element `json:"_resource"`
	// Indicates whether this operation can be invoked on a particular instance of one of
	// the given types.
	Instance bool `json:"instance"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// Extensions for affectsState
	AffectsState_ext *Element `json:"_affectsState"`
	// Indicates whether this operation or named query can be invoked at the system level
	// (e.g. without needing to choose a resource type for the context).
	System bool `json:"system"`
	// Additional validation information for the in parameters - a single profile that
	// covers all the parameters. The profile is a constraint on the parameters resource as
	// a whole.
	InputProfile string `json:"inputProfile"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// A free text natural language description of the operation definition from a
	// consumer's perspective.
	Description string `json:"description"`
	// Whether the operation affects state. Side effects such as producing audit trail
	// entries do not count as 'affecting  state'.
	AffectsState bool `json:"affectsState"`
	// A short, descriptive, user-friendly title for the operation definition.
	Title string `json:"title"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Indicates whether this operation or named query can be invoked at the resource type
	// level for any given resource type level (e.g. without needing to choose a specific
	// resource id for the context).
	Type bool `json:"type"`
	// Extensions for instance
	Instance_ext *Element `json:"_instance"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Whether this is an operation or a named query.
	Kind OperationDefinitionKind `json:"kind"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// The types on which this operation can be executed.
	Resource []string `json:"resource"`
	// A legal or geographic region in which the operation definition is intended to be
	// used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// Explanation of why this operation definition is needed and why it has been designed
	// as it has.
	Purpose string `json:"purpose"`
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// A natural language name identifying the operation definition. This name should be
	// usable as an identifier for the module by machine processing applications such as
	// code generation.
	Name string `json:"name"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Additional validation information for the out parameters - a single profile that
	// covers all the parameters. The profile is a constraint on the parameters resource.
	OutputProfile string `json:"outputProfile"`
	// The parameters for the operation/query.
	Parameter []*OperationDefinition_Parameter `json:"parameter"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The name of the organization or individual that published the operation definition.
	Publisher string `json:"publisher"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// The status of this operation definition. Enables tracking the life-cycle of the
	// content.
	Status OperationDefinitionStatus `json:"status"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// An absolute URI that is used to identify this operation definition when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal address
	// at which at which an authoritative instance of this operation definition is (or will
	// be) published. This URL can be the target of a canonical reference. It SHALL remain
	// the same when the operation definition is stored on different servers.
	Url string `json:"url"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// Extensions for system
	System_ext *Element `json:"_system"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
}

func (t *OperationDefinition) ResourceType() string {
	return "OperationDefinition"
}
func (t *OperationDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OperationDefinition
		ResourceType string `json:"resourceType"`
	}{
		OperationDefinition: *t,
		ResourceType:        t.ResourceType(),
	})
}

type OperationDefinitionKind string
type OperationDefinitionStatus string

const (
	OperationDefinitionKindOperation OperationDefinitionKind   = "operation"
	OperationDefinitionKindQuery     OperationDefinitionKind   = "query"
	OperationDefinitionStatusDraft   OperationDefinitionStatus = "draft"
	OperationDefinitionStatusActive  OperationDefinitionStatus = "active"
	OperationDefinitionStatusRetired OperationDefinitionStatus = "retired"
	OperationDefinitionStatusUnknown OperationDefinitionStatus = "unknown"
)

// Provenance is Provenance of a resource is a record that describes entities and processes involved
// in producing and delivering or otherwise influencing that resource. Provenance
// provides a critical foundation for assessing authenticity, enabling trust, and
// allowing reproducibility. Provenance assertions are a form of contextual metadata
// and can themselves become important records with their own provenance. Provenance
// statement indicates clinical significance in terms of confidence in authenticity,
// reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document
// Completion - has the artifact been legally authenticated), all of which may impact
// security, privacy, and trust policies.
type Provenance struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// An actor taking a role in an activity  for which it can be assigned some degree of
	// responsibility for the activity taking place.
	Agent []*Provenance_Agent `json:"agent,omitempty"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The period during which the activity occurred.
	OccurredPeriod *Period `json:"occurredPeriod"`
	// Extensions for recorded
	Recorded_ext *Element `json:"_recorded"`
	// Extensions for policy
	Policy_ext []*Element `json:"_policy"`
	// The reason that the activity was taking place.
	Reason []*CodeableConcept `json:"reason"`
	// An entity used in this activity.
	Entity []*Provenance_Entity `json:"entity"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The Reference(s) that were generated or updated by  the activity described in this
	// resource. A provenance can point to more than one target if multiple resources were
	// created/updated by the same activity.
	Target []*Reference `json:"target,omitempty"`
	// The instant of time at which the activity was recorded.
	Recorded string `json:"recorded"`
	// Policy or plan the activity was defined by. Typically, a single activity may have
	// multiple applicable policy documents, such as patient consent, guarantor funding,
	// etc.
	Policy []string `json:"policy"`
	// A digital signature on the target Reference(s). The signer should match a
	// Provenance.agent. The purpose of the signature is indicated.
	Signature []*Signature `json:"signature"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The period during which the activity occurred.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	OccurredDateTime string `json:"occurredDateTime"`
	// Extensions for occurredDateTime
	OccurredDateTime_ext *Element `json:"_occurredDateTime"`
	// Where the activity occurred, if relevant.
	Location *Reference `json:"location"`
	// An activity is something that occurs over a period of time and acts upon or with
	// entities; it may include consuming, processing, transforming, modifying, relocating,
	// using, or generating entities.
	Activity *CodeableConcept `json:"activity"`
}

func (t *Provenance) ResourceType() string {
	return "Provenance"
}
func (t *Provenance) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Provenance
		ResourceType string `json:"resourceType"`
	}{
		Provenance:   *t,
		ResourceType: t.ResourceType(),
	})
}

// VisionPrescription is An authorization for the provision of glasses and/or contact lenses to a patient.
type VisionPrescription struct {
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A unique identifier assigned to this vision prescription.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for dateWritten
	DateWritten_ext *Element `json:"_dateWritten"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The status of the resource instance.
	Status string `json:"status"`
	// A resource reference to the person to whom the vision prescription applies.
	Patient *Reference `json:"patient,omitempty"`
	// A reference to a resource that identifies the particular occurrence of contact
	// between patient and health care provider during which the prescription was issued.
	Encounter *Reference `json:"encounter"`
	// The date (and perhaps time) when the prescription was written.
	DateWritten string `json:"dateWritten"`
	// Extensions for created
	Created_ext *Element `json:"_created"`
	// Contain the details of  the individual lens specifications and serves as the
	// authorization for the fullfillment by certified professionals.
	LensSpecification []*VisionPrescription_LensSpecification `json:"lensSpecification,omitempty"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The date this resource was created.
	Created string `json:"created"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The healthcare professional responsible for authorizing the prescription.
	Prescriber *Reference `json:"prescriber,omitempty"`
}

func (t *VisionPrescription) ResourceType() string {
	return "VisionPrescription"
}
func (t *VisionPrescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		VisionPrescription
		ResourceType string `json:"resourceType"`
	}{
		VisionPrescription: *t,
		ResourceType:       t.ResourceType(),
	})
}

// ChargeItem is The resource ChargeItem describes the provision of healthcare provider products for
// a certain patient, therefore referring not only to the product, but containing in
// addition details of the provision, like date, time, amounts and participating
// organizations and persons. Main Usage of the ChargeItem is to enable the billing
// process and internal cost allocation.
type ChargeItem struct {
	// References the source of pricing information, rules of application for the code this
	// ChargeItem uses.
	DefinitionCanonical []string `json:"definitionCanonical"`
	// Date/time(s) or duration when the charged service was applied.
	OccurrenceTiming *Timing `json:"occurrenceTiming"`
	// Identifies the device, food, drug or other product being charged either by type code
	// or reference to an instance.
	ProductCodeableConcept *CodeableConcept `json:"productCodeableConcept"`
	// ChargeItems can be grouped to larger ChargeItems covering the whole set.
	PartOf []*Reference `json:"partOf"`
	// Date/time(s) or duration when the charged service was applied.
	OccurrencePeriod *Period `json:"occurrencePeriod"`
	// The organization performing the service.
	RequestingOrganization *Reference `json:"requestingOrganization"`
	// Total price of the charge overriding the list price associated with the code.
	PriceOverride *Money `json:"priceOverride"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// References the (external) source of pricing information, rules of application for
	// the code this ChargeItem uses.
	DefinitionUri []string `json:"definitionUri"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// If the list price or the rule-based factor associated with the code is overridden,
	// this attribute can capture a text to indicate the  reason for this action.
	OverrideReason string `json:"overrideReason"`
	// Extensions for enteredDate
	EnteredDate_ext *Element `json:"_enteredDate"`
	// Comments made about the event by the performer, subject or other participants.
	Note []*Annotation `json:"note"`
	// Identifiers assigned to this event performer or other systems.
	Identifier []*Identifier `json:"identifier"`
	// The anatomical location where the related service has been applied.
	Bodysite []*CodeableConcept `json:"bodysite"`
	// Date the charge item was entered.
	EnteredDate string `json:"enteredDate"`
	// Extensions for definitionUri
	DefinitionUri_ext []*Element `json:"_definitionUri"`
	// The individual or set of individuals the action is being or was performed on.
	Subject *Reference `json:"subject,omitempty"`
	// Extensions for overrideReason
	OverrideReason_ext *Element `json:"_overrideReason"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Indicated the rendered service that caused this charge.
	Service []*Reference `json:"service"`
	// The financial cost center permits the tracking of charge attribution.
	CostCenter *Reference `json:"costCenter"`
	// Extensions for factorOverride
	FactorOverride_ext *Element `json:"_factorOverride"`
	// The device, practitioner, etc. who entered the charge item.
	Enterer *Reference `json:"enterer"`
	// Indicates who or what performed or participated in the charged service.
	Performer []*ChargeItem_Performer `json:"performer"`
	// Quantity of which the charge item has been serviced.
	Quantity *Quantity `json:"quantity"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A code that identifies the charge, like a billing code.
	Code *CodeableConcept `json:"code,omitempty"`
	// Date/time(s) or duration when the charged service was applied.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	OccurrenceDateTime string `json:"occurrenceDateTime"`
	// Extensions for occurrenceDateTime
	OccurrenceDateTime_ext *Element `json:"_occurrenceDateTime"`
	// The organization requesting the service.
	PerformingOrganization *Reference `json:"performingOrganization"`
	// Describes why the event occurred in coded or textual form.
	Reason []*CodeableConcept `json:"reason"`
	// Identifies the device, food, drug or other product being charged either by type code
	// or reference to an instance.
	ProductReference *Reference `json:"productReference"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The current state of the ChargeItem.
	Status ChargeItemStatus `json:"status"`
	// The encounter or episode of care that establishes the context for this event.
	Context *Reference `json:"context"`
	// Account into which this ChargeItems belongs.
	Account []*Reference `json:"account"`
	// Factor overriding the factor determined by the rules associated with the code.
	FactorOverride float64 `json:"factorOverride"`
	// Further information supporting this charge.
	SupportingInformation []*Reference `json:"supportingInformation"`
}

func (t *ChargeItem) ResourceType() string {
	return "ChargeItem"
}
func (t *ChargeItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ChargeItem
		ResourceType string `json:"resourceType"`
	}{
		ChargeItem:   *t,
		ResourceType: t.ResourceType(),
	})
}

type ChargeItemStatus string

const (
	ChargeItemStatusPlanned        ChargeItemStatus = "planned"
	ChargeItemStatusBillable       ChargeItemStatus = "billable"
	ChargeItemStatusNotBillable    ChargeItemStatus = "not-billable"
	ChargeItemStatusAborted        ChargeItemStatus = "aborted"
	ChargeItemStatusBilled         ChargeItemStatus = "billed"
	ChargeItemStatusEnteredInError ChargeItemStatus = "entered-in-error"
	ChargeItemStatusUnknown        ChargeItemStatus = "unknown"
)

// Encounter is An interaction between a patient and healthcare provider(s) for the purpose of
// providing healthcare service(s) or assessing the health status of a patient.
type Encounter struct {
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The list of people responsible for providing the service.
	Participant []*Encounter_Participant `json:"participant"`
	// List of locations where  the patient has been during this encounter.
	Location []*Encounter_Location `json:"location"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Identifier(s) by which this encounter is known.
	Identifier []*Identifier `json:"identifier"`
	// Concepts representing classification of patient encounter such as ambulatory
	// (outpatient), inpatient, emergency, home health or others due to local variations.
	Class *Coding `json:"class,omitempty"`
	// Reason the encounter takes place, expressed as a code. For admissions, this can be
	// used for a coded admission diagnosis.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// Details about the admission to a healthcare service.
	Hospitalization *Encounter_Hospitalization `json:"hospitalization"`
	// Another Encounter of which this encounter is a part of (administratively or in time).
	PartOf *Reference `json:"partOf"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
	Status EncounterStatus `json:"status"`
	// The patient or group present at the encounter.
	Subject *Reference `json:"subject"`
	// Where a specific encounter should be classified as a part of a specific episode(s)
	// of care this field should be used. This association can facilitate grouping of
	// related encounters together for a specific purpose, such as government reporting,
	// issue tracking, association via a common problem.  The association is recorded on
	// the encounter as these are typically created after the episode of care and grouped
	// on entry rather than editing the episode of care to append another encounter to it
	// (the episode of care could span years).
	EpisodeOfCare []*Reference `json:"episodeOfCare"`
	// The list of diagnosis relevant to this encounter.
	Diagnosis []*Encounter_Diagnosis `json:"diagnosis"`
	// The appointment that scheduled this encounter.
	Appointment []*Reference `json:"appointment"`
	// The start and end time of the encounter.
	Period *Period `json:"period"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The class history permits the tracking of the encounters transitions without needing
	// to go  through the resource history.  This would be used for a case where an
	// admission starts of as an emergency encounter, then transitions into an inpatient
	// scenario. Doing this and not restarting a new encounter ensures that any
	// lab/diagnostic results can more easily follow the patient and not require
	// re-processing and not get lost or cancelled during a kind of discharge from
	// emergency to inpatient.
	ClassHistory []*Encounter_ClassHistory `json:"classHistory"`
	// Reason the encounter takes place, expressed as a code. For admissions, this can be
	// used for a coded admission diagnosis.
	ReasonReference []*Reference `json:"reasonReference"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Broad categorization of the service that is to be provided (e.g. cardiology).
	ServiceType *CodeableConcept `json:"serviceType"`
	// Indicates the urgency of the encounter.
	Priority *CodeableConcept `json:"priority"`
	// The set of accounts that may be used for billing for this Encounter.
	Account []*Reference `json:"account"`
	// The organization that is primarily responsible for this Encounter's services. This
	// MAY be the same as the organization on the Patient record, however it could be
	// different, such as if the actor performing the services was from an external
	// organization (which may be billed seperately) for an external consultation.  Refer
	// to the example bundle showing an abbreviated set of Encounters for a colonoscopy.
	ServiceProvider *Reference `json:"serviceProvider"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Quantity of time the encounter lasted. This excludes the time during leaves of
	// absence.
	Length *Duration `json:"length"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The status history permits the encounter resource to contain the status history
	// without needing to read through the historical versions of the resource, or even
	// have the server store them.
	StatusHistory []*Encounter_StatusHistory `json:"statusHistory"`
	// Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled
	// nursing, rehabilitation).
	Type []*CodeableConcept `json:"type"`
	// The request this encounter satisfies (e.g. incoming referral or procedure request).
	BasedOn []*Reference `json:"basedOn"`
}

func (t *Encounter) ResourceType() string {
	return "Encounter"
}
func (t *Encounter) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Encounter
		ResourceType string `json:"resourceType"`
	}{
		Encounter:    *t,
		ResourceType: t.ResourceType(),
	})
}

type EncounterStatus string

const (
	EncounterStatusPlanned        EncounterStatus = "planned"
	EncounterStatusArrived        EncounterStatus = "arrived"
	EncounterStatusTriaged        EncounterStatus = "triaged"
	EncounterStatusInProgress     EncounterStatus = "in-progress"
	EncounterStatusOnleave        EncounterStatus = "onleave"
	EncounterStatusFinished       EncounterStatus = "finished"
	EncounterStatusCancelled      EncounterStatus = "cancelled"
	EncounterStatusEnteredInError EncounterStatus = "entered-in-error"
	EncounterStatusUnknown        EncounterStatus = "unknown"
)

// ImmunizationEvaluation is Describes a comparison of an immunization event against published recommendations to
// determine if the administration is "valid" in relation to those  recommendations.
type ImmunizationEvaluation struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Indicates the current status of the evaluation of the vaccination administration
	// event.
	Status string `json:"status"`
	// Indicates if the dose is valid or not valid with respect to the published
	// recommendations.
	DoseStatus *CodeableConcept `json:"doseStatus,omitempty"`
	// One possible path to achieve presumed immunity against a disease - within the
	// context of an authority.
	Series string `json:"series"`
	// The recommended number of doses to achieve immunity.
	// pattern ^[ \r\n\t\S]+$
	SeriesDosesString string `json:"seriesDosesString"`
	// Extensions for seriesDosesString
	SeriesDosesString_ext *Element `json:"_seriesDosesString"`
	// Indicates the authority who published the protocol (e.g. ACIP).
	Authority *Reference `json:"authority"`
	// Nominal position in a series.
	// pattern ^[1-9][0-9]*$
	DoseNumberPositiveInt uint64 `json:"doseNumberPositiveInt"`
	// The vaccine administration event being evaluated.
	ImmunizationEvent *Reference `json:"immunizationEvent,omitempty"`
	// Additional information about the evaluation.
	Description string `json:"description"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A unique identifier assigned to this immunization evaluation record.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The individual for whom the evaluation is being done.
	Patient *Reference `json:"patient,omitempty"`
	// The vaccine preventable disease the dose is being evaluated against.
	TargetDisease *CodeableConcept `json:"targetDisease,omitempty"`
	// Nominal position in a series.
	// pattern ^[ \r\n\t\S]+$
	DoseNumberString string `json:"doseNumberString"`
	// The recommended number of doses to achieve immunity.
	// pattern ^[1-9][0-9]*$
	SeriesDosesPositiveInt uint64 `json:"seriesDosesPositiveInt"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for series
	Series_ext *Element `json:"_series"`
	// Extensions for doseNumberString
	DoseNumberString_ext *Element `json:"_doseNumberString"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The date the evaluation of the vaccine administration event was performed.
	Date string `json:"date"`
	// Provides an explanation as to why the vaccine administration event is valid or not
	// relative to the published recommendations.
	DoseStatusReason []*CodeableConcept `json:"doseStatusReason"`
	// Extensions for doseNumberPositiveInt
	DoseNumberPositiveInt_ext *Element `json:"_doseNumberPositiveInt"`
	// Extensions for seriesDosesPositiveInt
	SeriesDosesPositiveInt_ext *Element `json:"_seriesDosesPositiveInt"`
}

func (t *ImmunizationEvaluation) ResourceType() string {
	return "ImmunizationEvaluation"
}
func (t *ImmunizationEvaluation) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ImmunizationEvaluation
		ResourceType string `json:"resourceType"`
	}{
		ImmunizationEvaluation: *t,
		ResourceType:           t.ResourceType(),
	})
}

// MolecularSequence is Raw data describing a biological sequence.
type MolecularSequence struct {
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// The definition of variant here originates from Sequence ontology
	// ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)).
	// This element can represent amino acid or nucleic sequence change(including
	// insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment
	// variation with the assist of CIGAR string.
	Variant []*MolecularSequence_Variant `json:"variant"`
	// Extensions for observedSeq
	ObservedSeq_ext *Element `json:"_observedSeq"`
	// Configurations of the external repository. The repository shall store target's
	// observedSeq or records related with target's observedSeq.
	Repository []*MolecularSequence_Repository `json:"repository"`
	// Coverage (read depth or depth) is the average number of reads representing a given
	// nucleotide in the reconstructed sequence.
	ReadCoverage int64 `json:"readCoverage"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Amino Acid Sequence/ DNA Sequence / RNA Sequence.
	Type MolecularSequenceType `json:"type"`
	// A sequence that is used as a reference to describe variants that are present in a
	// sequence analyzed.
	ReferenceSeq *MolecularSequence_ReferenceSeq `json:"referenceSeq"`
	// Pointer to next atomic sequence which at most contains one variant.
	Pointer []*Reference `json:"pointer"`
	// The method for sequencing, for example, chip information.
	Device *Reference `json:"device"`
	// Information about chromosome structure variation.
	StructureVariant []*MolecularSequence_StructureVariant `json:"structureVariant"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Sequence that was observed. It is the result marked by referenceSeq along with
	// variant records on referenceSeq. This shall start from referenceSeq.windowStart and
	// end by referenceSeq.windowEnd.
	ObservedSeq string `json:"observedSeq"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Whether the sequence is numbered starting at 0 (0-based numbering or coordinates,
	// inclusive start, exclusive end) or starting at 1 (1-based numbering, inclusive start
	// and inclusive end).
	CoordinateSystem int64 `json:"coordinateSystem"`
	// Specimen used for sequencing.
	Specimen *Reference `json:"specimen"`
	// The number of copies of the sequence of interest. (RNASeq).
	Quantity *Quantity `json:"quantity"`
	// Extensions for readCoverage
	ReadCoverage_ext *Element `json:"_readCoverage"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A unique identifier for this particular sequence instance. This is a FHIR-defined id.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for coordinateSystem
	CoordinateSystem_ext *Element `json:"_coordinateSystem"`
	// The patient whose sequencing results are described by this resource.
	Patient *Reference `json:"patient"`
	// The organization or lab that should be responsible for this result.
	Performer *Reference `json:"performer"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// An experimental feature attribute that defines the quality of the feature in a
	// quantitative way, such as a phred quality score
	// ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
	Quality []*MolecularSequence_Quality `json:"quality"`
}

func (t *MolecularSequence) ResourceType() string {
	return "MolecularSequence"
}
func (t *MolecularSequence) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MolecularSequence
		ResourceType string `json:"resourceType"`
	}{
		MolecularSequence: *t,
		ResourceType:      t.ResourceType(),
	})
}

type MolecularSequenceType string

const (
	MolecularSequenceTypeAa  MolecularSequenceType = "aa"
	MolecularSequenceTypeDna MolecularSequenceType = "dna"
	MolecularSequenceTypeRna MolecularSequenceType = "rna"
)

// Contract is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract struct {
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Sites in which the contract is complied with,  exercised, or in force.
	Site []*Reference `json:"site"`
	// A natural language name identifying this Contract definition, derivative, or
	// instance in any legal state. Provides additional information about its content. This
	// name should be usable as an identifier for the module by machine processing
	// applications such as code generation.
	Name string `json:"name"`
	// A selector of legal concerns for this Contract definition, derivative, or instance
	// in any legal state.
	Scope *CodeableConcept `json:"scope"`
	// One or more Contract Provisions, which may be related and conveyed as a group, and
	// may contain nested groups.
	Term []*Contract_Term `json:"term"`
	// Links to Provenance records for past versions of this Contract definition,
	// derivative, or instance, which identify key state transitions or updates that are
	// likely to be relevant to a user looking at the current version of the Contract.  The
	// Provence.entity indicates the target that was changed in the update.
	// http://build.fhir.org/provenance-definitions.html#Provenance.entity.
	RelevantHistory []*Reference `json:"relevantHistory"`
	// List of Legal expressions or representations of this Contract.
	Legal []*Contract_Legal `json:"legal"`
	// Legal states of the formation of a legal instrument, which is a formally executed
	// written document that can be formally attributed to its author, records and formally
	// expresses a legally enforceable act, process, or contractual duty, obligation, or
	// right, and therefore evidences that act, process, or agreement.
	LegalState *CodeableConcept `json:"legalState"`
	// Narrows the range of legal concerns to focus on the achievement of specific
	// contractual objectives.
	TopicReference *Reference `json:"topicReference"`
	// Precusory content developed with a focus and intent of supporting the formation a
	// Contract instance, which may be associated with and transformable into a Contract.
	ContentDefinition *Contract_ContentDefinition `json:"contentDefinition"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Narrows the range of legal concerns to focus on the achievement of specific
	// contractual objectives.
	TopicCodeableConcept *CodeableConcept `json:"topicCodeableConcept"`
	// Legally binding Contract: This is the signed and legally recognized representation
	// of the Contract, which is considered the "source of truth" and which would be the
	// basis for legal action related to enforcement of this Contract.
	LegallyBindingAttachment *Attachment `json:"legallyBindingAttachment"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// An edition identifier used for business purposes to label business significant
	// variants.
	Version string `json:"version"`
	// The target entity impacted by or of interest to parties to the agreement.
	Subject []*Reference `json:"subject"`
	// A formally or informally recognized grouping of people, principals, organizations,
	// or jurisdictions formed for the purpose of achieving some form of collective action
	// such as the promulgation, administration and enforcement of contracts and policies.
	Authority []*Reference `json:"authority"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// The status of the resource instance.
	Status string `json:"status"`
	// The URL pointing to an externally maintained definition that is adhered to in whole
	// or in part by this Contract.
	InstantiatesUri string `json:"instantiatesUri"`
	// A short, descriptive, user-friendly title for this Contract definition, derivative,
	// or instance in any legal state.t giving additional information about its content.
	Title string `json:"title"`
	// An explanatory or alternate user-friendly title for this Contract definition,
	// derivative, or instance in any legal state.t giving additional information about its
	// content.
	Subtitle string `json:"subtitle"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Unique identifier for this Contract or a derivative that references a Source
	// Contract.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Extensions for alias
	Alias_ext []*Element `json:"_alias"`
	// Extensions for subtitle
	Subtitle_ext *Element `json:"_subtitle"`
	// The individual or organization that authored the Contract definition, derivative, or
	// instance in any legal state.
	Author *Reference `json:"author"`
	// A high-level category for the legal instrument, whether constructed as a Contract
	// definition, derivative, or instance in any legal state.  Provides additional
	// information about its content within the context of the Contract's scope to
	// distinguish the kinds of systems that would be interested in the contract.
	Type *CodeableConcept `json:"type"`
	// Sub-category for the Contract that distinguishes the kinds of systems that would be
	// interested in the Contract within the context of the Contract's scope.
	SubType []*CodeableConcept `json:"subType"`
	// Information that may be needed by/relevant to the performer in their execution of
	// this term action.
	SupportingInfo []*Reference `json:"supportingInfo"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Relevant time or time-period when this Contract is applicable.
	Applies *Period `json:"applies"`
	// Alternative representation of the title for this Contract definition, derivative, or
	// instance in any legal state., e.g., a domain specific contract number related to
	// legislation.
	Alias []string `json:"alias"`
	// List of Computable Policy Rule Language Representations of this Contract.
	Rule []*Contract_Rule `json:"rule"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for issued
	Issued_ext *Element `json:"_issued"`
	// The URL pointing to a FHIR-defined Contract Definition that is adhered to in whole
	// or part by this Contract.
	InstantiatesCanonical *Reference `json:"instantiatesCanonical"`
	// When this  Contract was issued.
	Issued string `json:"issued"`
	// Parties with legal standing in the Contract, including the principal parties, the
	// grantor(s) and grantee(s), which are any person or organization bound by the
	// contract, and any ancillary parties, which facilitate the execution of the contract
	// such as a notary or witness.
	Signer []*Contract_Signer `json:"signer"`
	// Legally binding Contract: This is the signed and legally recognized representation
	// of the Contract, which is considered the "source of truth" and which would be the
	// basis for legal action related to enforcement of this Contract.
	LegallyBindingReference *Reference `json:"legallyBindingReference"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for instantiatesUri
	InstantiatesUri_ext *Element `json:"_instantiatesUri"`
	// Event resulting in discontinuation or termination of this Contract instance by one
	// or more parties to the contract.
	ExpirationType *CodeableConcept `json:"expirationType"`
	// Recognized governance framework or system operating with a circumscribed scope in
	// accordance with specified principles, policies, processes or procedures for managing
	// rights, actions, or behaviors of parties or principals relative to resources.
	Domain []*Reference `json:"domain"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Canonical identifier for this contract, represented as a URI (globally unique).
	Url string `json:"url"`
	// The minimal content derived from the basal information source at a specific stage in
	// its lifecycle.
	ContentDerivative *CodeableConcept `json:"contentDerivative"`
	// The "patient friendly language" versionof the Contract in whole or in parts.
	// "Patient friendly language" means the representation of the Contract and Contract
	// Provisions in a manner that is readily accessible and understandable by a layperson
	// in accordance with best practices for communication styles that ensure that those
	// agreeing to or signing the Contract understand the roles, actions, obligations,
	// responsibilities, and implication of the agreement.
	Friendly []*Contract_Friendly `json:"friendly"`
}

func (t *Contract) ResourceType() string {
	return "Contract"
}
func (t *Contract) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Contract
		ResourceType string `json:"resourceType"`
	}{
		Contract:     *t,
		ResourceType: t.ResourceType(),
	})
}

// InsurancePlan is Details of a Health Insurance product/plan provided by an organization.
type InsurancePlan struct {
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A list of alternate names that the product is known as, or was known as in the past.
	Alias []string `json:"alias"`
	// Extensions for alias
	Alias_ext []*Element `json:"_alias"`
	// Reference to the network included in the health insurance product.
	Network []*Reference `json:"network"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The entity that is providing  the health insurance product and underwriting the
	// risk.  This is typically an insurance carriers, other third-party payers, or health
	// plan sponsors comonly referred to as 'payers'.
	OwnedBy *Reference `json:"ownedBy"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The kind of health insurance product.
	Type []*CodeableConcept `json:"type"`
	// An organization which administer other services such as underwriting, customer
	// service and/or claims processing on behalf of the health insurance product owner.
	AdministeredBy *Reference `json:"administeredBy"`
	// The current state of the health insurance product.
	Status InsurancePlanStatus `json:"status"`
	// The geographic region in which a health insurance product's benefits apply.
	CoverageArea []*Reference `json:"coverageArea"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Business identifiers assigned to this health insurance product which remain constant
	// as the resource is updated and propagates from server to server.
	Identifier []*Identifier `json:"identifier"`
	// Details about the coverage offered by the insurance product.
	Coverage []*InsurancePlan_Coverage `json:"coverage"`
	// The period of time that the health insurance product is available.
	Period *Period `json:"period"`
	// The technical endpoints providing access to services operated for the health
	// insurance product.
	Endpoint []*Reference `json:"endpoint"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Official name of the health insurance product as designated by the owner.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The contact for the health insurance product for a certain purpose.
	Contact []*InsurancePlan_Contact `json:"contact"`
	// Details about an insurance plan.
	Plan []*InsurancePlan_Plan `json:"plan"`
}

func (t *InsurancePlan) ResourceType() string {
	return "InsurancePlan"
}
func (t *InsurancePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		InsurancePlan
		ResourceType string `json:"resourceType"`
	}{
		InsurancePlan: *t,
		ResourceType:  t.ResourceType(),
	})
}

type InsurancePlanStatus string

const (
	InsurancePlanStatusDraft   InsurancePlanStatus = "draft"
	InsurancePlanStatusActive  InsurancePlanStatus = "active"
	InsurancePlanStatusRetired InsurancePlanStatus = "retired"
	InsurancePlanStatusUnknown InsurancePlanStatus = "unknown"
)

// SubstancePolymer is Todo.
type SubstancePolymer struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Todo.
	Geometry *CodeableConcept `json:"geometry"`
	// Todo.
	CopolymerConnectivity []*CodeableConcept `json:"copolymerConnectivity"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Todo.
	Class *CodeableConcept `json:"class"`
	// Todo.
	Modification []string `json:"modification"`
	// Extensions for modification
	Modification_ext []*Element `json:"_modification"`
	// Todo.
	MonomerSet []*SubstancePolymer_MonomerSet `json:"monomerSet"`
	// Todo.
	Repeat []*SubstancePolymer_Repeat `json:"repeat"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
}

func (t *SubstancePolymer) ResourceType() string {
	return "SubstancePolymer"
}
func (t *SubstancePolymer) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		SubstancePolymer
		ResourceType string `json:"resourceType"`
	}{
		SubstancePolymer: *t,
		ResourceType:     t.ResourceType(),
	})
}

// TestReport is A summary of information based on the results of executing a TestScript.
type TestReport struct {
	// Extensions for score
	Score_ext *Element `json:"_score"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The current state of this test report.
	Status TestReportStatus `json:"status"`
	// Extensions for result
	Result_ext *Element `json:"_result"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// A free text natural language name identifying the executed TestScript.
	Name string `json:"name"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The final score (percentage of tests passed) resulting from the execution of the
	// TestScript.
	Score float64 `json:"score"`
	// The results of the series of required setup operations before the tests were
	// executed.
	Setup *TestReport_Setup `json:"setup"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The overall result from the execution of the TestScript.
	Result TestReportResult `json:"result"`
	// Extensions for tester
	Tester_ext *Element `json:"_tester"`
	// When the TestScript was executed and this TestReport was generated.
	Issued string `json:"issued"`
	// Extensions for issued
	Issued_ext *Element `json:"_issued"`
	// A test executed from the test script.
	Test []*TestReport_Test `json:"test"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Ideally this is an absolute URL that is used to identify the version-specific
	// TestScript that was executed, matching the `TestScript.url`.
	TestScript *Reference `json:"testScript,omitempty"`
	// A participant in the test execution, either the execution engine, a client, or a
	// server.
	Participant []*TestReport_Participant `json:"participant"`
	// The results of the series of operations required to clean up after all the tests
	// were executed (successfully or otherwise).
	Teardown *TestReport_Teardown `json:"teardown"`
	// Identifier for the TestScript assigned for external purposes outside the context of
	// FHIR.
	Identifier *Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Name of the tester producing this report (Organization or individual).
	Tester string `json:"tester"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
}

func (t *TestReport) ResourceType() string {
	return "TestReport"
}
func (t *TestReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		TestReport
		ResourceType string `json:"resourceType"`
	}{
		TestReport:   *t,
		ResourceType: t.ResourceType(),
	})
}

type TestReportStatus string
type TestReportResult string

const (
	TestReportStatusCompleted      TestReportStatus = "completed"
	TestReportStatusInProgress     TestReportStatus = "in-progress"
	TestReportStatusWaiting        TestReportStatus = "waiting"
	TestReportStatusStopped        TestReportStatus = "stopped"
	TestReportStatusEnteredInError TestReportStatus = "entered-in-error"
	TestReportResultPass           TestReportResult = "pass"
	TestReportResultFail           TestReportResult = "fail"
	TestReportResultPending        TestReportResult = "pending"
)

// CompartmentDefinition is A compartment definition that defines how resources are accessed on a server.
type CompartmentDefinition struct {
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// An absolute URI that is used to identify this compartment definition when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal address
	// at which at which an authoritative instance of this compartment definition is (or
	// will be) published. This URL can be the target of a canonical reference. It SHALL
	// remain the same when the compartment definition is stored on different servers.
	Url string `json:"url"`
	// Information about how a resource is related to the compartment.
	Resource []*CompartmentDefinition_Resource `json:"resource"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The identifier that is used to identify this version of the compartment definition
	// when it is referenced in a specification, model, design or instance. This is an
	// arbitrary value managed by the compartment definition author and is not expected to
	// be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
	// managed version is not available. There is also no expectation that versions can be
	// placed in a lexicographical sequence.
	Version string `json:"version"`
	// The name of the organization or individual that published the compartment definition.
	Publisher string `json:"publisher"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate compartment definition instances.
	UseContext []*UsageContext `json:"useContext"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The status of this compartment definition. Enables tracking the life-cycle of the
	// content.
	Status CompartmentDefinitionStatus `json:"status"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// Which compartment this definition describes.
	Code CompartmentDefinitionCode `json:"code"`
	// Extensions for search
	Search_ext *Element `json:"_search"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A natural language name identifying the compartment definition. This name should be
	// usable as an identifier for the module by machine processing applications such as
	// code generation.
	Name string `json:"name"`
	// The date  (and optionally time) when the compartment definition was published. The
	// date must change when the business version changes and it must change if the status
	// code changes. In addition, it should change when the substantive content of the
	// compartment definition changes.
	Date string `json:"date"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Whether the search syntax is supported,.
	Search bool `json:"search"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A Boolean value to indicate that this compartment definition is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used for
	// genuine usage.
	Experimental bool `json:"experimental"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// A free text natural language description of the compartment definition from a
	// consumer's perspective.
	Description string `json:"description"`
	// Explanation of why this compartment definition is needed and why it has been
	// designed as it has.
	Purpose string `json:"purpose"`
}

func (t *CompartmentDefinition) ResourceType() string {
	return "CompartmentDefinition"
}
func (t *CompartmentDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		CompartmentDefinition
		ResourceType string `json:"resourceType"`
	}{
		CompartmentDefinition: *t,
		ResourceType:          t.ResourceType(),
	})
}

type CompartmentDefinitionStatus string
type CompartmentDefinitionCode string

const (
	CompartmentDefinitionStatusDraft       CompartmentDefinitionStatus = "draft"
	CompartmentDefinitionStatusActive      CompartmentDefinitionStatus = "active"
	CompartmentDefinitionStatusRetired     CompartmentDefinitionStatus = "retired"
	CompartmentDefinitionStatusUnknown     CompartmentDefinitionStatus = "unknown"
	CompartmentDefinitionCodePatient       CompartmentDefinitionCode   = "Patient"
	CompartmentDefinitionCodeEncounter     CompartmentDefinitionCode   = "Encounter"
	CompartmentDefinitionCodeRelatedPerson CompartmentDefinitionCode   = "RelatedPerson"
	CompartmentDefinitionCodePractitioner  CompartmentDefinitionCode   = "Practitioner"
	CompartmentDefinitionCodeDevice        CompartmentDefinitionCode   = "Device"
)

// ConceptMap is A statement of relationships from one set of concepts to one or more other concepts
// - either concepts in code systems, or data element/data element concepts, or classes
// in class models.
type ConceptMap struct {
	// The identifier that is used to identify this version of the concept map when it is
	// referenced in a specification, model, design or instance. This is an arbitrary value
	// managed by the concept map author and is not expected to be globally unique. For
	// example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not
	// available. There is also no expectation that versions can be placed in a
	// lexicographical sequence.
	Version string `json:"version"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// A short, descriptive, user-friendly title for the concept map.
	Title string `json:"title"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// An absolute URI that is used to identify this concept map when it is referenced in a
	// specification, model, design or an instance; also called its canonical identifier.
	// This SHOULD be globally unique and SHOULD be a literal address at which at which an
	// authoritative instance of this concept map is (or will be) published. This URL can
	// be the target of a canonical reference. It SHALL remain the same when the concept
	// map is stored on different servers.
	Url string `json:"url"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Extensions for sourceCanonical
	SourceCanonical_ext *Element `json:"_sourceCanonical"`
	// The target value set provides context for the mappings. Note that the mapping is
	// made between concepts, not between value sets, but the value set provides important
	// context about how the concept mapping choices are made.
	// pattern ^\S*$
	TargetUri string `json:"targetUri"`
	// A group of mappings that all have the same source and target system.
	Group []*ConceptMap_Group `json:"group"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The status of this concept map. Enables tracking the life-cycle of the content.
	Status ConceptMapStatus `json:"status"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// A legal or geographic region in which the concept map is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// Extensions for sourceUri
	SourceUri_ext *Element `json:"_sourceUri"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// A formal identifier that is used to identify this concept map when it is represented
	// in other formats, or referenced in a specification, model, design or an instance.
	Identifier *Identifier `json:"identifier"`
	// A natural language name identifying the concept map. This name should be usable as
	// an identifier for the module by machine processing applications such as code
	// generation.
	Name string `json:"name"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// A Boolean value to indicate that this concept map is authored for testing purposes
	// (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Experimental bool `json:"experimental"`
	// Extensions for targetCanonical
	TargetCanonical_ext *Element `json:"_targetCanonical"`
	// The name of the organization or individual that published the concept map.
	Publisher string `json:"publisher"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate concept map instances.
	UseContext []*UsageContext `json:"useContext"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// A free text natural language description of the concept map from a consumer's
	// perspective.
	Description string `json:"description"`
	// Explanation of why this concept map is needed and why it has been designed as it has.
	Purpose string `json:"purpose"`
	// Identifier for the source value set that contains the concepts that are being mapped
	// and provides context for the mappings.
	// pattern ^\S*$
	SourceUri string `json:"sourceUri"`
	// The target value set provides context for the mappings. Note that the mapping is
	// made between concepts, not between value sets, but the value set provides important
	// context about how the concept mapping choices are made.
	// pattern ^\S*$
	TargetCanonical string `json:"targetCanonical"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// A copyright statement relating to the concept map and/or its contents. Copyright
	// statements are generally legal restrictions on the use and publishing of the concept
	// map.
	Copyright string `json:"copyright"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The date  (and optionally time) when the concept map was published. The date must
	// change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the concept
	// map changes.
	Date string `json:"date"`
	// Identifier for the source value set that contains the concepts that are being mapped
	// and provides context for the mappings.
	// pattern ^\S*$
	SourceCanonical string `json:"sourceCanonical"`
	// Extensions for targetUri
	TargetUri_ext *Element `json:"_targetUri"`
}

func (t *ConceptMap) ResourceType() string {
	return "ConceptMap"
}
func (t *ConceptMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ConceptMap
		ResourceType string `json:"resourceType"`
	}{
		ConceptMap:   *t,
		ResourceType: t.ResourceType(),
	})
}

type ConceptMapStatus string

const (
	ConceptMapStatusDraft   ConceptMapStatus = "draft"
	ConceptMapStatusActive  ConceptMapStatus = "active"
	ConceptMapStatusRetired ConceptMapStatus = "retired"
	ConceptMapStatusUnknown ConceptMapStatus = "unknown"
)

// DocumentManifest is A collection of documents compiled for a purpose together with metadata that applies
// to the collection.
type DocumentManifest struct {
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Who or what the set of documents is about. The documents can be about a person,
	// (patient or healthcare practitioner), a device (i.e. machine) or even a group of
	// subjects (such as a document about a herd of farm animals, or a set of patients that
	// share a common exposure). If the documents cross more than one subject, then more
	// than one subject is allowed here (unusual use case).
	Subject *Reference `json:"subject"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Related identifiers or resources associated with the DocumentManifest.
	Related []*DocumentManifest_Related `json:"related"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The list of Resources that consist of the parts of this manifest.
	Content []*Reference `json:"content,omitempty"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A single identifier that uniquely identifies this manifest. Principally used to
	// refer to the manifest in non-FHIR contexts.
	MasterIdentifier *Identifier `json:"masterIdentifier"`
	// Human-readable description of the source document. This is sometimes known as the
	// "title".
	Description string `json:"description"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A patient, practitioner, or organization for which this set of documents is intended.
	Recipient []*Reference `json:"recipient"`
	// Identifies the source system, application, or software that produced the document
	// manifest.
	Source string `json:"source"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Other identifiers associated with the document manifest, including version
	// independent  identifiers.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The code specifying the type of clinical activity that resulted in placing the
	// associated content into the DocumentManifest.
	Type *CodeableConcept `json:"type"`
	// Extensions for source
	Source_ext *Element `json:"_source"`
	// The status of this document manifest.
	Status DocumentManifestStatus `json:"status"`
	// When the document manifest was created for submission to the server (not necessarily
	// the same thing as the actual resource last modified time, since it may be modified,
	// replicated, etc.).
	Created string `json:"created"`
	// Extensions for created
	Created_ext *Element `json:"_created"`
	// Identifies who is the author of the manifest. Manifest author is not necessarly the
	// author of the references included.
	Author []*Reference `json:"author"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
}

func (t *DocumentManifest) ResourceType() string {
	return "DocumentManifest"
}
func (t *DocumentManifest) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		DocumentManifest
		ResourceType string `json:"resourceType"`
	}{
		DocumentManifest: *t,
		ResourceType:     t.ResourceType(),
	})
}

type DocumentManifestStatus string

const (
	DocumentManifestStatusCurrent        DocumentManifestStatus = "current"
	DocumentManifestStatusSuperseded     DocumentManifestStatus = "superseded"
	DocumentManifestStatusEnteredInError DocumentManifestStatus = "entered-in-error"
)

// Medication is This resource is primarily used for the identification and definition of a
// medication for the purposes of prescribing, dispensing, and administering a
// medication as well as for making statements about medication use.
type Medication struct {
	// Information that only applies to packages (not products).
	Batch *Medication_Batch `json:"batch"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A code (or set of codes) that specify this medication, or a textual description if
	// no code is available. Usage note: This could be a standard medication code such as a
	// code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local
	// formulary code, optionally with translations to other code systems.
	Code *CodeableConcept `json:"code"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Describes the form of the item.  Powder; tablets; capsule.
	Form *CodeableConcept `json:"form"`
	// Specific amount of the drug in the packaged product.  For example, when specifying a
	// product that has the same strength (For example, Insulin glargine 100 unit per mL
	// solution for injection), this attribute provides additional clarification of the
	// package amount (For example, 3 mL, 10mL, etc.).
	Amount *Ratio `json:"amount"`
	// Business identifier for this medication.
	Identifier []*Identifier `json:"identifier"`
	// A code to indicate if the medication is in active use.
	Status string `json:"status"`
	// Describes the details of the manufacturer of the medication product.  This is not
	// intended to represent the distributor of a medication product.
	Manufacturer *Reference `json:"manufacturer"`
	// Identifies a particular constituent of interest in the product.
	Ingredient []*Medication_Ingredient `json:"ingredient"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
}

func (t *Medication) ResourceType() string {
	return "Medication"
}
func (t *Medication) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Medication
		ResourceType string `json:"resourceType"`
	}{
		Medication:   *t,
		ResourceType: t.ResourceType(),
	})
}

// AuditEvent is A record of an event made for purposes of maintaining a security log. Typical uses
// include detection of intrusion attempts and monitoring for inappropriate usage.
type AuditEvent struct {
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Indicator for type of action performed during the event that generated the audit.
	Action AuditEventAction `json:"action"`
	// The period during which the activity occurred.
	Period *Period `json:"period"`
	// Extensions for recorded
	Recorded_ext *Element `json:"_recorded"`
	// Extensions for outcome
	Outcome_ext *Element `json:"_outcome"`
	// The purposeOfUse (reason) that was used during the event being recorded.
	PurposeOfEvent []*CodeableConcept `json:"purposeOfEvent"`
	// An actor taking an active role in the event or activity that is logged.
	Agent []*AuditEvent_Agent `json:"agent,omitempty"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Indicates whether the event succeeded or failed.
	Outcome AuditEventOutcome `json:"outcome"`
	// A free text description of the outcome of the event.
	OutcomeDesc string `json:"outcomeDesc"`
	// The system that is reporting the event.
	Source *AuditEvent_Source `json:"source,omitempty"`
	// Specific instances of data or objects that have been accessed.
	Entity []*AuditEvent_Entity `json:"entity"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifier for a family of the event.  For example, a menu item, program, rule,
	// policy, function code, application name or URL. It identifies the performed function.
	Type *Coding `json:"type,omitempty"`
	// Identifier for the category of event.
	Subtype []*Coding `json:"subtype"`
	// The time when the event was recorded.
	Recorded string `json:"recorded"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for action
	Action_ext *Element `json:"_action"`
	// Extensions for outcomeDesc
	OutcomeDesc_ext *Element `json:"_outcomeDesc"`
}

func (t *AuditEvent) ResourceType() string {
	return "AuditEvent"
}
func (t *AuditEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		AuditEvent
		ResourceType string `json:"resourceType"`
	}{
		AuditEvent:   *t,
		ResourceType: t.ResourceType(),
	})
}

type AuditEventAction string
type AuditEventOutcome string

const (
	AuditEventActionC   AuditEventAction  = "C"
	AuditEventActionR   AuditEventAction  = "R"
	AuditEventActionU   AuditEventAction  = "U"
	AuditEventActionD   AuditEventAction  = "D"
	AuditEventActionE   AuditEventAction  = "E"
	AuditEventOutcome0  AuditEventOutcome = "0"
	AuditEventOutcome4  AuditEventOutcome = "4"
	AuditEventOutcome8  AuditEventOutcome = "8"
	AuditEventOutcome12 AuditEventOutcome = "12"
)

// Linkage is Identifies two or more records (resource instances) that refer to the same
// real-world "occurrence".
type Linkage struct {
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for active
	Active_ext *Element `json:"_active"`
	// Identifies the user or organization responsible for asserting the linkages as well
	// as the user or organization who establishes the context in which the nature of each
	// linkage is evaluated.
	Author *Reference `json:"author"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Identifies which record considered as the reference to the same real-world
	// occurrence as well as how the items should be evaluated within the collection of
	// linked items.
	Item []*Linkage_Item `json:"item,omitempty"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Indicates whether the asserted set of linkages are considered to be "in effect".
	Active bool `json:"active"`
}

func (t *Linkage) ResourceType() string {
	return "Linkage"
}
func (t *Linkage) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Linkage
		ResourceType string `json:"resourceType"`
	}{
		Linkage:      *t,
		ResourceType: t.ResourceType(),
	})
}

// Practitioner is A person who is directly or indirectly involved in the provisioning of healthcare.
type Practitioner struct {
	// Extensions for gender
	Gender_ext *Element `json:"_gender"`
	// A language the practitioner can use in patient communication.
	Communication []*CodeableConcept `json:"communication"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An identifier that applies to this person in this role.
	Identifier []*Identifier `json:"identifier"`
	// Address(es) of the practitioner that are not role specific (typically home address).
	// Work addresses are not typically entered in this property as they are usually role
	// dependent.
	Address []*Address `json:"address"`
	// Image of the person.
	Photo []*Attachment `json:"photo"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for active
	Active_ext *Element `json:"_active"`
	// Administrative Gender - the gender that the person is considered to have for
	// administration and record keeping purposes.
	Gender PractitionerGender `json:"gender"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for birthDate
	BirthDate_ext *Element `json:"_birthDate"`
	// The official certifications, training, and licenses that authorize or otherwise
	// pertain to the provision of care by the practitioner.  For example, a medical
	// license issued by a medical board authorizing the practitioner to practice medicine
	// within a certian locality.
	Qualification []*Practitioner_Qualification `json:"qualification"`
	// A contact detail for the practitioner, e.g. a telephone number or an email address.
	Telecom []*ContactPoint `json:"telecom"`
	// The date of birth for the practitioner.
	BirthDate string `json:"birthDate"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Whether this practitioner's record is in active use.
	Active bool `json:"active"`
	// The name(s) associated with the practitioner.
	Name []*HumanName `json:"name"`
}

func (t *Practitioner) ResourceType() string {
	return "Practitioner"
}
func (t *Practitioner) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Practitioner
		ResourceType string `json:"resourceType"`
	}{
		Practitioner: *t,
		ResourceType: t.ResourceType(),
	})
}

type PractitionerGender string

const (
	PractitionerGenderMale    PractitionerGender = "male"
	PractitionerGenderFemale  PractitionerGender = "female"
	PractitionerGenderOther   PractitionerGender = "other"
	PractitionerGenderUnknown PractitionerGender = "unknown"
)

// AppointmentResponse is A reply to an appointment request for a patient and/or practitioner(s), such as a
// confirmation or rejection.
type AppointmentResponse struct {
	// Role of participant in the appointment.
	ParticipantType []*CodeableConcept `json:"participantType"`
	// Participation status of the participant. When the status is declined or tentative if
	// the start/end times are different to the appointment, then these times should be
	// interpreted as a requested time change. When the status is accepted, the times can
	// either be the time of the appointment (as a confirmation of the time) or can be
	// empty.
	ParticipantStatus string `json:"participantStatus"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for start
	Start_ext *Element `json:"_start"`
	// This may be either the same as the appointment request to confirm the details of the
	// appointment, or alternately a new time to request a re-negotiation of the end time.
	End string `json:"end"`
	// Additional comments about the appointment.
	Comment string `json:"comment"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for participantStatus
	ParticipantStatus_ext *Element `json:"_participantStatus"`
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// A Person, Location, HealthcareService, or Device that is participating in the
	// appointment.
	Actor *Reference `json:"actor"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Appointment that this response is replying to.
	Appointment *Reference `json:"appointment,omitempty"`
	// Date/Time that the appointment is to take place, or requested new start time.
	Start string `json:"start"`
	// Extensions for end
	End_ext *Element `json:"_end"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// This records identifiers associated with this appointment response concern that are
	// defined by business processes and/ or used to refer to it when a direct URL
	// reference to the resource itself is not appropriate.
	Identifier []*Identifier `json:"identifier"`
}

func (t *AppointmentResponse) ResourceType() string {
	return "AppointmentResponse"
}
func (t *AppointmentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		AppointmentResponse
		ResourceType string `json:"resourceType"`
	}{
		AppointmentResponse: *t,
		ResourceType:        t.ResourceType(),
	})
}

// CapabilityStatement is A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server
// for a particular version of FHIR that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type CapabilityStatement struct {
	// A description of the messaging capabilities of the solution.
	Messaging []*CapabilityStatement_Messaging `json:"messaging"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// Reference to a canonical URL of another CapabilityStatement that this software
	// implements. This capability statement is a published API description that
	// corresponds to a business service. The server may actually implement a subset of the
	// capability statement it claims to implement, so the capability statement must
	// specify the full capability details.
	Instantiates []string `json:"instantiates"`
	// Reference to a canonical URL of another CapabilityStatement that this software adds
	// to. The capability statement automatically includes everything in the other
	// statement, and it is not duplicated, though the server may repeat the same
	// resources, interactions and operations to add additional details to them.
	Imports []string `json:"imports"`
	// The version of the FHIR specification that this CapabilityStatement describes (which
	// SHALL be the same as the FHIR version of the CapabilityStatement itself). There is
	// no default value.
	FhirVersion CapabilityStatementFhirVersion `json:"fhirVersion"`
	// A list of the patch formats supported by this implementation using their content
	// types.
	PatchFormat []string `json:"patchFormat"`
	// A document definition.
	Document []*CapabilityStatement_Document `json:"document"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The name of the organization or individual that published the capability statement.
	Publisher string `json:"publisher"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A short, descriptive, user-friendly title for the capability statement.
	Title string `json:"title"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate capability statement instances.
	UseContext []*UsageContext `json:"useContext"`
	// An absolute URI that is used to identify this capability statement when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal address
	// at which at which an authoritative instance of this capability statement is (or will
	// be) published. This URL can be the target of a canonical reference. It SHALL remain
	// the same when the capability statement is stored on different servers.
	Url string `json:"url"`
	// Software that is covered by this capability statement.  It is used when the
	// capability statement describes the capabilities of a particular software version,
	// independent of an installation.
	Software *CapabilityStatement_Software `json:"software"`
	// Extensions for format
	Format_ext []*Element `json:"_format"`
	// A natural language name identifying the capability statement. This name should be
	// usable as an identifier for the module by machine processing applications such as
	// code generation.
	Name string `json:"name"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The identifier that is used to identify this version of the capability statement
	// when it is referenced in a specification, model, design or instance. This is an
	// arbitrary value managed by the capability statement author and is not expected to be
	// globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed
	// version is not available. There is also no expectation that versions can be placed
	// in a lexicographical sequence.
	Version string `json:"version"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// Extensions for patchFormat
	PatchFormat_ext []*Element `json:"_patchFormat"`
	// The date  (and optionally time) when the capability statement was published. The
	// date must change when the business version changes and it must change if the status
	// code changes. In addition, it should change when the substantive content of the
	// capability statement changes.
	Date string `json:"date"`
	// A copyright statement relating to the capability statement and/or its contents.
	// Copyright statements are generally legal restrictions on the use and publishing of
	// the capability statement.
	Copyright string `json:"copyright"`
	// Identifies a specific implementation instance that is described by the capability
	// statement - i.e. a particular installation, rather than the capabilities of a
	// software program.
	Implementation *CapabilityStatement_Implementation `json:"implementation"`
	// A list of the formats supported by this implementation using their content types.
	Format []string `json:"format"`
	// A list of implementation guides that the server does (or should) support in their
	// entirety.
	ImplementationGuide []string `json:"implementationGuide"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// A legal or geographic region in which the capability statement is intended to be
	// used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// Extensions for fhirVersion
	FhirVersion_ext *Element `json:"_fhirVersion"`
	// The way that this statement is intended to be used, to describe an actual running
	// instance of software, a particular product (kind, not instance of software) or a
	// class of implementation (e.g. a desired purchase).
	Kind CapabilityStatementKind `json:"kind"`
	// Extensions for kind
	Kind_ext *Element `json:"_kind"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The status of this capability statement. Enables tracking the life-cycle of the
	// content.
	Status CapabilityStatementStatus `json:"status"`
	// A Boolean value to indicate that this capability statement is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used for
	// genuine usage.
	Experimental bool `json:"experimental"`
	// A free text natural language description of the capability statement from a
	// consumer's perspective. Typically, this is used when the capability statement
	// describes a desired rather than an actual solution, for example as a formal
	// expression of requirements as part of an RFP.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Explanation of why this capability statement is needed and why it has been designed
	// as it has.
	Purpose string `json:"purpose"`
	// A definition of the restful capabilities of the solution, if any.
	Rest []*CapabilityStatement_Rest `json:"rest"`
}

func (t *CapabilityStatement) ResourceType() string {
	return "CapabilityStatement"
}
func (t *CapabilityStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		CapabilityStatement
		ResourceType string `json:"resourceType"`
	}{
		CapabilityStatement: *t,
		ResourceType:        t.ResourceType(),
	})
}

type CapabilityStatementFhirVersion string
type CapabilityStatementKind string
type CapabilityStatementStatus string

const (
	CapabilityStatementFhirVersion0_01   CapabilityStatementFhirVersion = "0.01"
	CapabilityStatementFhirVersion0_05   CapabilityStatementFhirVersion = "0.05"
	CapabilityStatementFhirVersion0_06   CapabilityStatementFhirVersion = "0.06"
	CapabilityStatementFhirVersion0_11   CapabilityStatementFhirVersion = "0.11"
	CapabilityStatementFhirVersion0_0_80 CapabilityStatementFhirVersion = "0.0.80"
	CapabilityStatementFhirVersion0_0_81 CapabilityStatementFhirVersion = "0.0.81"
	CapabilityStatementFhirVersion0_0_82 CapabilityStatementFhirVersion = "0.0.82"
	CapabilityStatementFhirVersion0_4_0  CapabilityStatementFhirVersion = "0.4.0"
	CapabilityStatementFhirVersion0_5_0  CapabilityStatementFhirVersion = "0.5.0"
	CapabilityStatementFhirVersion1_0_0  CapabilityStatementFhirVersion = "1.0.0"
	CapabilityStatementFhirVersion1_0_1  CapabilityStatementFhirVersion = "1.0.1"
	CapabilityStatementFhirVersion1_0_2  CapabilityStatementFhirVersion = "1.0.2"
	CapabilityStatementFhirVersion1_1_0  CapabilityStatementFhirVersion = "1.1.0"
	CapabilityStatementFhirVersion1_4_0  CapabilityStatementFhirVersion = "1.4.0"
	CapabilityStatementFhirVersion1_6_0  CapabilityStatementFhirVersion = "1.6.0"
	CapabilityStatementFhirVersion1_8_0  CapabilityStatementFhirVersion = "1.8.0"
	CapabilityStatementFhirVersion3_0_0  CapabilityStatementFhirVersion = "3.0.0"
	CapabilityStatementFhirVersion3_0_1  CapabilityStatementFhirVersion = "3.0.1"
	CapabilityStatementFhirVersion3_3_0  CapabilityStatementFhirVersion = "3.3.0"
	CapabilityStatementFhirVersion3_5_0  CapabilityStatementFhirVersion = "3.5.0"
	CapabilityStatementFhirVersion4_0_0  CapabilityStatementFhirVersion = "4.0.0"
	CapabilityStatementKindInstance      CapabilityStatementKind        = "instance"
	CapabilityStatementKindCapability    CapabilityStatementKind        = "capability"
	CapabilityStatementKindRequirements  CapabilityStatementKind        = "requirements"
	CapabilityStatementStatusDraft       CapabilityStatementStatus      = "draft"
	CapabilityStatementStatusActive      CapabilityStatementStatus      = "active"
	CapabilityStatementStatusRetired     CapabilityStatementStatus      = "retired"
	CapabilityStatementStatusUnknown     CapabilityStatementStatus      = "unknown"
)

// ResearchDefinition is The ResearchDefinition resource describes the conditional state (population and any
// exposures being compared within the population) and outcome (if specified) that the
// knowledge (evidence, assertion, recommendation) is about.
type ResearchDefinition struct {
	// An individual or organization primarily responsible for internal coherence of the
	// content.
	Editor []*ContactDetail `json:"editor"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// An absolute URI that is used to identify this research definition when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal address
	// at which at which an authoritative instance of this research definition is (or will
	// be) published. This URL can be the target of a canonical reference. It SHALL remain
	// the same when the research definition is stored on different servers.
	Url string `json:"url"`
	// Extensions for subtitle
	Subtitle_ext *Element `json:"_subtitle"`
	// A Boolean value to indicate that this research definition is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used for
	// genuine usage.
	Experimental bool `json:"experimental"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// Related artifacts such as additional documentation, justification, or bibliographic
	// references.
	RelatedArtifact []*RelatedArtifact `json:"relatedArtifact"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// The date  (and optionally time) when the research definition was published. The date
	// must change when the business version changes and it must change if the status code
	// changes. In addition, it should change when the substantive content of the research
	// definition changes.
	Date string `json:"date"`
	// A reference to a ResearchElementDefinition resource that defines the exposure for
	// the research.
	Exposure *Reference `json:"exposure"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The date on which the resource content was approved by the publisher. Approval
	// happens once when the content is officially approved for usage.
	ApprovalDate string `json:"approvalDate"`
	// The period during which the research definition content was or is planned to be in
	// active use.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// A reference to a ResearchElementDefinition resource that defines the
	// exposureAlternative for the research.
	ExposureAlternative *Reference `json:"exposureAlternative"`
	// The short title provides an alternate title for use in informal descriptive contexts
	// where the full, formal title is not necessary.
	ShortTitle string `json:"shortTitle"`
	// A detailed description, from a clinical perspective, of how the ResearchDefinition
	// is used.
	Usage string `json:"usage"`
	// Extensions for usage
	Usage_ext *Element `json:"_usage"`
	// A reference to a ResearchElementDefinition resomece that defines the outcome for the
	// research.
	Outcome *Reference `json:"outcome"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The identifier that is used to identify this version of the research definition when
	// it is referenced in a specification, model, design or instance. This is an arbitrary
	// value managed by the research definition author and is not expected to be globally
	// unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is
	// not available. There is also no expectation that versions can be placed in a
	// lexicographical sequence. To provide a version consistent with the Decision Support
	// Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more
	// information on versioning knowledge assets, refer to the Decision Support Service
	// specification. Note that a version is required for non-experimental active artifacts.
	Version string `json:"version"`
	// An individual or organization responsible for officially endorsing the content for
	// use in some setting.
	Endorser []*ContactDetail `json:"endorser"`
	// A reference to a ResearchElementDefinition resource that defines the population for
	// the research.
	Population *Reference `json:"population,omitempty"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// The status of this research definition. Enables tracking the life-cycle of the
	// content.
	Status ResearchDefinitionStatus `json:"status"`
	// The name of the organization or individual that published the research definition.
	Publisher string `json:"publisher"`
	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate string `json:"lastReviewDate"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A human-readable string to clarify or explain concepts about the resource.
	Comment []string `json:"comment"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate research definition instances.
	UseContext []*UsageContext `json:"useContext"`
	// Explanation of why this research definition is needed and why it has been designed
	// as it has.
	Purpose string `json:"purpose"`
	// A short, descriptive, user-friendly title for the research definition.
	Title string `json:"title"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Descriptive topics related to the content of the ResearchDefinition. Topics provide
	// a high-level categorization grouping types of ResearchDefinitions that can be useful
	// for filtering and searching.
	Topic []*CodeableConcept `json:"topic"`
	// An individual or organization primarily responsible for review of some aspect of the
	// content.
	Reviewer []*ContactDetail `json:"reviewer"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A free text natural language description of the research definition from a
	// consumer's perspective.
	Description string `json:"description"`
	// Extensions for comment
	Comment_ext []*Element `json:"_comment"`
	// An individiual or organization primarily involved in the creation and maintenance of
	// the content.
	Author []*ContactDetail `json:"author"`
	// A natural language name identifying the research definition. This name should be
	// usable as an identifier for the module by machine processing applications such as
	// code generation.
	Name string `json:"name"`
	// An explanatory or alternate title for the ResearchDefinition giving additional
	// information about its content.
	Subtitle string `json:"subtitle"`
	// The intended subjects for the ResearchDefinition. If this element is not provided, a
	// Patient subject is assumed, but the subject of the ResearchDefinition can be
	// anything.
	SubjectCodeableConcept *CodeableConcept `json:"subjectCodeableConcept"`
	// The intended subjects for the ResearchDefinition. If this element is not provided, a
	// Patient subject is assumed, but the subject of the ResearchDefinition can be
	// anything.
	SubjectReference *Reference `json:"subjectReference"`
	// Extensions for lastReviewDate
	LastReviewDate_ext *Element `json:"_lastReviewDate"`
	// A formal identifier that is used to identify this research definition when it is
	// represented in other formats, or referenced in a specification, model, design or an
	// instance.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for shortTitle
	ShortTitle_ext *Element `json:"_shortTitle"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// A legal or geographic region in which the research definition is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// A copyright statement relating to the research definition and/or its contents.
	// Copyright statements are generally legal restrictions on the use and publishing of
	// the research definition.
	Copyright string `json:"copyright"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Extensions for approvalDate
	ApprovalDate_ext *Element `json:"_approvalDate"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
	// A reference to a Library resource containing the formal logic used by the
	// ResearchDefinition.
	Library []string `json:"library"`
}

func (t *ResearchDefinition) ResourceType() string {
	return "ResearchDefinition"
}
func (t *ResearchDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ResearchDefinition
		ResourceType string `json:"resourceType"`
	}{
		ResearchDefinition: *t,
		ResourceType:       t.ResourceType(),
	})
}

type ResearchDefinitionStatus string

const (
	ResearchDefinitionStatusDraft   ResearchDefinitionStatus = "draft"
	ResearchDefinitionStatusActive  ResearchDefinitionStatus = "active"
	ResearchDefinitionStatusRetired ResearchDefinitionStatus = "retired"
	ResearchDefinitionStatusUnknown ResearchDefinitionStatus = "unknown"
)

// QuestionnaireResponse is A structured set of questions and their answers. The questions are ordered and
// grouped into coherent subsets, corresponding to the structure of the grouping of the
// questionnaire being responded to.
type QuestionnaireResponse struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A procedure or observation that this questionnaire was performed as part of the
	// execution of.  For example, the surgery a checklist was executed as part of.
	PartOf []*Reference `json:"partOf"`
	// The person who answered the questions about the subject.
	Source *Reference `json:"source"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A business identifier assigned to a particular completed (or partially completed)
	// questionnaire.
	Identifier *Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The subject of the questionnaire response.  This could be a patient, organization,
	// practitioner, device, etc.  This is who/what the answers apply to, but is not
	// necessarily the source of information.
	Subject *Reference `json:"subject"`
	// The date and/or time that this set of answers were last changed.
	Authored string `json:"authored"`
	// Person who received the answers to the questions in the QuestionnaireResponse and
	// recorded them in the system.
	Author *Reference `json:"author"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The Encounter during which this questionnaire response was created or to which the
	// creation of this record is tightly associated.
	Encounter *Reference `json:"encounter"`
	// Extensions for authored
	Authored_ext *Element `json:"_authored"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The order, proposal or plan that is fulfilled in whole or in part by this
	// QuestionnaireResponse.  For example, a ServiceRequest seeking an intake assessment
	// or a decision support recommendation to assess for post-partum depression.
	BasedOn []*Reference `json:"basedOn"`
	// The Questionnaire that defines and organizes the questions for which answers are
	// being provided.
	Questionnaire string `json:"questionnaire"`
	// The position of the questionnaire response within its overall lifecycle.
	Status QuestionnaireResponseStatus `json:"status"`
	// A group or question item from the original questionnaire for which answers are
	// provided.
	Item []*QuestionnaireResponse_Item `json:"item"`
}

func (t *QuestionnaireResponse) ResourceType() string {
	return "QuestionnaireResponse"
}
func (t *QuestionnaireResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		QuestionnaireResponse
		ResourceType string `json:"resourceType"`
	}{
		QuestionnaireResponse: *t,
		ResourceType:          t.ResourceType(),
	})
}

type QuestionnaireResponseStatus string

const (
	QuestionnaireResponseStatusInProgress     QuestionnaireResponseStatus = "in-progress"
	QuestionnaireResponseStatusCompleted      QuestionnaireResponseStatus = "completed"
	QuestionnaireResponseStatusAmended        QuestionnaireResponseStatus = "amended"
	QuestionnaireResponseStatusEnteredInError QuestionnaireResponseStatus = "entered-in-error"
	QuestionnaireResponseStatusStopped        QuestionnaireResponseStatus = "stopped"
)

// Account is A financial tool for tracking value accrued for a particular purpose.  In the
// healthcare field, used to track charges for a patient, cost centers, etc.
type Account struct {
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Name used for the account when displaying it to humans in reports, etc.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The date range of services associated with this account.
	ServicePeriod *Period `json:"servicePeriod"`
	// Provides additional information about what the account tracks and how it is used.
	Description string `json:"description"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Unique identifier used to reference the account.  Might or might not be intended for
	// human use (e.g. credit card number).
	Identifier []*Identifier `json:"identifier"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// The parties responsible for balancing the account if other payment options fall
	// short.
	Guarantor []*Account_Guarantor `json:"guarantor"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Indicates whether the account is presently used/usable or not.
	Status AccountStatus `json:"status"`
	// Reference to a parent Account.
	PartOf *Reference `json:"partOf"`
	// Categorizes the account for reporting and searching purposes.
	Type *CodeableConcept `json:"type"`
	// Identifies the entity which incurs the expenses. While the immediate recipients of
	// services or goods might be entities related to the subject, the expenses were
	// ultimately incurred by the subject of the Account.
	Subject []*Reference `json:"subject"`
	// The party(s) that are responsible for covering the payment of this account, and what
	// order should they be applied to the account.
	Coverage []*Account_Coverage `json:"coverage"`
	// Indicates the service area, hospital, department, etc. with responsibility for
	// managing the Account.
	Owner *Reference `json:"owner"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
}

func (t *Account) ResourceType() string {
	return "Account"
}
func (t *Account) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Account
		ResourceType string `json:"resourceType"`
	}{
		Account:      *t,
		ResourceType: t.ResourceType(),
	})
}

type AccountStatus string

const (
	AccountStatusActive         AccountStatus = "active"
	AccountStatusInactive       AccountStatus = "inactive"
	AccountStatusEnteredInError AccountStatus = "entered-in-error"
	AccountStatusOnHold         AccountStatus = "on-hold"
	AccountStatusUnknown        AccountStatus = "unknown"
)

// CarePlan is Describes the intention of how one or more practitioners intend to deliver care for
// a particular patient, group or community for a period of time, possibly limited to
// care for a specific condition or set of conditions.
type CarePlan struct {
	// Indicates the level of authority/intentionality associated with the care plan and
	// where the care plan fits into the workflow chain.
	Intent string `json:"intent"`
	// Describes the intended objective(s) of carrying out the care plan.
	Goal []*Reference `json:"goal"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// A larger care plan of which this particular care plan is a component or step.
	PartOf []*Reference `json:"partOf"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Represents when this particular CarePlan record was created in the system, which is
	// often a system-generated date.
	Created string `json:"created"`
	// Identifies the individual(s) or organization who provided the contents of the care
	// plan.
	Contributor []*Reference `json:"contributor"`
	// Identifies all people and organizations who are expected to be involved in the care
	// envisioned by this plan.
	CareTeam []*Reference `json:"careTeam"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A care plan that is fulfilled in whole or in part by this care plan.
	BasedOn []*Reference `json:"basedOn"`
	// Extensions for intent
	Intent_ext *Element `json:"_intent"`
	// Human-friendly name for the care plan.
	Title string `json:"title"`
	// Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or
	// mitigation are handled by this plan.
	Addresses []*Reference `json:"addresses"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Business identifiers assigned to this care plan by the performer or other systems
	// which remain constant as the resource is updated and propagates from server to
	// server.
	Identifier []*Identifier `json:"identifier"`
	// Identifies the patient or group whose intended care is described by the plan.
	Subject *Reference `json:"subject,omitempty"`
	// The Encounter during which this CarePlan was created or to which the creation of
	// this record is tightly associated.
	Encounter *Reference `json:"encounter"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Identifies what "kind" of plan this is to support differentiation between multiple
	// co-existing plans; e.g. "Home health", "psychiatric", "asthma", "disease
	// management", "wellness plan", etc.
	Category []*CodeableConcept `json:"category"`
	// Identifies portions of the patient's record that specifically influenced the
	// formation of the plan.  These might include comorbidities, recent procedures,
	// limitations, recent assessments, etc.
	SupportingInfo []*Reference `json:"supportingInfo"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Completed or terminated care plan whose function is taken by this new care plan.
	Replaces []*Reference `json:"replaces"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for created
	Created_ext *Element `json:"_created"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for instantiatesUri
	InstantiatesUri_ext []*Element `json:"_instantiatesUri"`
	// The URL pointing to an externally maintained protocol, guideline, questionnaire or
	// other definition that is adhered to in whole or in part by this CarePlan.
	InstantiatesUri []string `json:"instantiatesUri"`
	// Indicates whether the plan is currently being acted upon, represents future
	// intentions or is now a historical record.
	Status string `json:"status"`
	// Indicates when the plan did (or is intended to) come into effect and end.
	Period *Period `json:"period"`
	// General notes about the care plan not covered elsewhere.
	Note []*Annotation `json:"note"`
	// The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other
	// definition that is adhered to in whole or in part by this CarePlan.
	InstantiatesCanonical []string `json:"instantiatesCanonical"`
	// A description of the scope and nature of the plan.
	Description string `json:"description"`
	// When populated, the author is responsible for the care plan.  The care plan is
	// attributed to the author.
	Author *Reference `json:"author"`
	// Identifies a planned action to occur as part of the plan.  For example, a medication
	// to be used, lab tests to perform, self-monitoring, education, etc.
	Activity []*CarePlan_Activity `json:"activity"`
}

func (t *CarePlan) ResourceType() string {
	return "CarePlan"
}
func (t *CarePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		CarePlan
		ResourceType string `json:"resourceType"`
	}{
		CarePlan:     *t,
		ResourceType: t.ResourceType(),
	})
}

// DeviceMetric is Describes a measurement, calculation or setting capability of a medical device.
type DeviceMetric struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Unique instance identifiers assigned to a device by the device or gateway software,
	// manufacturers, other organizations or owners. For example: handle ID.
	Identifier []*Identifier `json:"identifier"`
	// Describes the unit that an observed value determined for this metric will have. For
	// example: Percent, Seconds, etc.
	Unit *CodeableConcept `json:"unit"`
	// Extensions for operationalStatus
	OperationalStatus_ext *Element `json:"_operationalStatus"`
	// Indicates the category of the observation generation process. A DeviceMetric can be
	// for example a setting, measurement, or calculation.
	Category DeviceMetricCategory `json:"category"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Describes the link to the  Device that this DeviceMetric belongs to and that
	// contains administrative device information such as manufacturer, serial number, etc.
	Source *Reference `json:"source"`
	// Extensions for category
	Category_ext *Element `json:"_category"`
	// Describes the measurement repetition time. This is not necessarily the same as the
	// update period. The measurement repetition time can range from milliseconds up to
	// hours. An example for a measurement repetition time in the range of milliseconds is
	// the sampling rate of an ECG. An example for a measurement repetition time in the
	// range of hours is a NIBP that is triggered automatically every hour. The update
	// period may be different than the measurement repetition time, if the device does not
	// update the published observed value with the same frequency as it was measured.
	MeasurementPeriod *Timing `json:"measurementPeriod"`
	// Indicates current operational state of the device. For example: On, Off, Standby,
	// etc.
	OperationalStatus DeviceMetricOperationalStatus `json:"operationalStatus"`
	// Extensions for color
	Color_ext *Element `json:"_color"`
	// Describes the calibrations that have been performed or that are required to be
	// performed.
	Calibration []*DeviceMetric_Calibration `json:"calibration"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.
	Type *CodeableConcept `json:"type,omitempty"`
	// Describes the link to the  Device that this DeviceMetric belongs to and that provide
	// information about the location of this DeviceMetric in the containment structure of
	// the parent Device. An example would be a Device that represents a Channel. This
	// reference can be used by a client application to distinguish DeviceMetrics that have
	// the same type, but should be interpreted based on their containment location.
	Parent *Reference `json:"parent"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Describes the color representation for the metric. This is often used to aid
	// clinicians to track and identify parameter types by color. In practice, consider a
	// Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed
	// in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2-
	// magenta.
	Color DeviceMetricColor `json:"color"`
}

func (t *DeviceMetric) ResourceType() string {
	return "DeviceMetric"
}
func (t *DeviceMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		DeviceMetric
		ResourceType string `json:"resourceType"`
	}{
		DeviceMetric: *t,
		ResourceType: t.ResourceType(),
	})
}

type DeviceMetricCategory string
type DeviceMetricOperationalStatus string
type DeviceMetricColor string

const (
	DeviceMetricCategoryMeasurement             DeviceMetricCategory          = "measurement"
	DeviceMetricCategorySetting                 DeviceMetricCategory          = "setting"
	DeviceMetricCategoryCalculation             DeviceMetricCategory          = "calculation"
	DeviceMetricCategoryUnspecified             DeviceMetricCategory          = "unspecified"
	DeviceMetricOperationalStatusOn             DeviceMetricOperationalStatus = "on"
	DeviceMetricOperationalStatusOff            DeviceMetricOperationalStatus = "off"
	DeviceMetricOperationalStatusStandby        DeviceMetricOperationalStatus = "standby"
	DeviceMetricOperationalStatusEnteredInError DeviceMetricOperationalStatus = "entered-in-error"
	DeviceMetricColorBlack                      DeviceMetricColor             = "black"
	DeviceMetricColorRed                        DeviceMetricColor             = "red"
	DeviceMetricColorGreen                      DeviceMetricColor             = "green"
	DeviceMetricColorYellow                     DeviceMetricColor             = "yellow"
	DeviceMetricColorBlue                       DeviceMetricColor             = "blue"
	DeviceMetricColorMagenta                    DeviceMetricColor             = "magenta"
	DeviceMetricColorCyan                       DeviceMetricColor             = "cyan"
	DeviceMetricColorWhite                      DeviceMetricColor             = "white"
)

// MedicationRequest is An order or request for both supply of the medication and the instructions for
// administration of the medication to a patient. The resource is called
// "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to
// generalize the use across inpatient and outpatient settings, including care plans,
// etc., and to harmonize with workflow patterns.
type MedicationRequest struct {
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Identifies the medication being requested. This is a link to a resource that
	// represents the medication which may be the details of the medication or simply an
	// attribute carrying a code that identifies the medication from a known list of
	// medications.
	MedicationCodeableConcept *CodeableConcept `json:"medicationCodeableConcept"`
	// A link to a resource representing the person or set of individuals to whom the
	// medication will be given.
	Subject *Reference `json:"subject,omitempty"`
	// Extensions for doNotPerform
	DoNotPerform_ext *Element `json:"_doNotPerform"`
	// A shared identifier common to all requests that were authorized more or less
	// simultaneously by a single author, representing the identifier of the requisition or
	// prescription.
	GroupIdentifier *Identifier `json:"groupIdentifier"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates the type of medication request (for example, where the medication is
	// expected to be consumed or administered (i.e. inpatient or outpatient)).
	Category []*CodeableConcept `json:"category"`
	// The description of the overall patte3rn of the administration of the medication to
	// the patient.
	CourseOfTherapyType *CodeableConcept `json:"courseOfTherapyType"`
	// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations
	// that may be required for delivering the requested service.
	Insurance []*Reference `json:"insurance"`
	// A link to a resource representing an earlier order related order or prescription.
	PriorPrescription *Reference `json:"priorPrescription"`
	// The specified desired performer of the medication treatment (e.g. the performer of
	// the medication administration).
	Performer *Reference `json:"performer"`
	// The URL pointing to an externally maintained protocol, guideline, orderset or other
	// definition that is adhered to in whole or in part by this MedicationRequest.
	InstantiatesUri []string `json:"instantiatesUri"`
	// Extensions for intent
	Intent_ext *Element `json:"_intent"`
	// Indicates the specific details for the dispense or medication supply part of a
	// medication request (also known as a Medication Prescription or Medication Order).
	// Note that this information is not always sent with the order.  There may be in some
	// settings (e.g. hospitals) institutional or system support for completing the
	// dispense details in the pharmacy department.
	DispenseRequest *MedicationRequest_DispenseRequest `json:"dispenseRequest"`
	// Extensions for authoredOn
	AuthoredOn_ext *Element `json:"_authoredOn"`
	// A plan or request that is fulfilled in whole or in part by this medication request.
	BasedOn []*Reference `json:"basedOn"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Indicates how quickly the Medication Request should be addressed with respect to
	// other requests.
	Priority string `json:"priority"`
	// Extra information about the prescription that could not be conveyed by the other
	// attributes.
	Note []*Annotation `json:"note"`
	// Indicates whether or not substitution can or should be part of the dispense. In some
	// cases, substitution must happen, in other cases substitution must not happen. This
	// block explains the prescriber's intent. If nothing is specified substitution may be
	// done.
	Substitution *MedicationRequest_Substitution `json:"substitution"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Indicates if this record was captured as a secondary 'reported' record rather than
	// as an original primary source-of-truth record.  It may also indicate the source of
	// the report.
	// pattern ^true|false$
	ReportedBoolean bool `json:"reportedBoolean"`
	// The person who entered the order on behalf of another individual for example in the
	// case of a verbal or a telephone order.
	Recorder *Reference `json:"recorder"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Indicates the type of performer of the administration of the medication.
	PerformerType *CodeableConcept `json:"performerType"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Condition or observation that supports why the medication was ordered.
	ReasonReference []*Reference `json:"reasonReference"`
	// Indicates how the medication is to be used by the patient.
	DosageInstruction []*Dosage `json:"dosageInstruction"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Captures the reason for the current state of the MedicationRequest.
	StatusReason *CodeableConcept `json:"statusReason"`
	// Whether the request is a proposal, plan, or an original order.
	Intent string `json:"intent"`
	// The Encounter during which this [x] was created or to which the creation of this
	// record is tightly associated.
	Encounter *Reference `json:"encounter"`
	// Extensions for reportedBoolean
	ReportedBoolean_ext *Element `json:"_reportedBoolean"`
	// Indicates an actual or potential clinical issue with or between one or more active
	// or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate
	// therapy, dosage alert etc.
	DetectedIssue []*Reference `json:"detectedIssue"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// If true indicates that the provider is asking for the medication request not to
	// occur.
	DoNotPerform bool `json:"doNotPerform"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Identifiers associated with this medication request that are defined by business
	// processes and/or used to refer to it when a direct URL reference to the resource
	// itself is not appropriate. They are business identifiers assigned to this resource
	// by the performer or other systems and remain constant as the resource is updated and
	// propagates from server to server.
	Identifier []*Identifier `json:"identifier"`
	// The date (and perhaps time) when the prescription was initially written or authored
	// on.
	AuthoredOn string `json:"authoredOn"`
	// Links to Provenance records for past versions of this resource or fulfilling request
	// or event resources that identify key state transitions or updates that are likely to
	// be relevant to a user looking at the current version of the resource.
	EventHistory []*Reference `json:"eventHistory"`
	// The URL pointing to a protocol, guideline, orderset, or other definition that is
	// adhered to in whole or in part by this MedicationRequest.
	InstantiatesCanonical []string `json:"instantiatesCanonical"`
	// Extensions for instantiatesCanonical
	InstantiatesCanonical_ext []*Element `json:"_instantiatesCanonical"`
	// Extensions for priority
	Priority_ext *Element `json:"_priority"`
	// Indicates if this record was captured as a secondary 'reported' record rather than
	// as an original primary source-of-truth record.  It may also indicate the source of
	// the report.
	ReportedReference *Reference `json:"reportedReference"`
	// The individual, organization, or device that initiated the request and has
	// responsibility for its activation.
	Requester *Reference `json:"requester"`
	// The reason or the indication for ordering or not ordering the medication.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// Extensions for instantiatesUri
	InstantiatesUri_ext []*Element `json:"_instantiatesUri"`
	// A code specifying the current state of the order.  Generally, this will be active or
	// completed state.
	Status string `json:"status"`
	// Identifies the medication being requested. This is a link to a resource that
	// represents the medication which may be the details of the medication or simply an
	// attribute carrying a code that identifies the medication from a known list of
	// medications.
	MedicationReference *Reference `json:"medicationReference"`
	// Include additional information (for example, patient height and weight) that
	// supports the ordering of the medication.
	SupportingInformation []*Reference `json:"supportingInformation"`
}

func (t *MedicationRequest) ResourceType() string {
	return "MedicationRequest"
}
func (t *MedicationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MedicationRequest
		ResourceType string `json:"resourceType"`
	}{
		MedicationRequest: *t,
		ResourceType:      t.ResourceType(),
	})
}

// Binary is A resource that represents the data of a single raw artifact as digital content
// accessible in its native format.  A Binary resource can contain any content, whether
// text, image, pdf, zip archive, etc.
type Binary struct {
	// Extensions for contentType
	ContentType_ext *Element `json:"_contentType"`
	// This element identifies another resource that can be used as a proxy of the security
	// sensitivity to use when deciding and enforcing access control rules for the Binary
	// resource. Given that the Binary resource contains very few elements that can be used
	// to determine the sensitivity of the data and relationships to individuals, the
	// referenced resource stands in as a proxy equivalent for this purpose. This
	// referenced resource may be related to the Binary (e.g. Media, DocumentReference), or
	// may be some non-related Resource purely as a security proxy. E.g. to identify that
	// the binary resource relates to a patient, and access should only be granted to
	// applications that have access to the patient.
	SecurityContext *Reference `json:"securityContext"`
	// The actual content, base64 encoded.
	Data base64Binary `json:"data"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// MimeType of the binary content represented as a standard MimeType (BCP 13).
	ContentType string `json:"contentType"`
	// Extensions for data
	Data_ext *Element `json:"_data"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
}

func (t *Binary) ResourceType() string {
	return "Binary"
}
func (t *Binary) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Binary
		ResourceType string `json:"resourceType"`
	}{
		Binary:       *t,
		ResourceType: t.ResourceType(),
	})
}

// CareTeam is The Care Team includes all the people and organizations who plan to participate in
// the coordination and delivery of care for a patient.
type CareTeam struct {
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A label for human use intended to distinguish like teams.  E.g. the "red" vs.
	// "green" trauma teams.
	Name string `json:"name"`
	// Identifies the patient or group whose intended care is handled by the team.
	Subject *Reference `json:"subject"`
	// The Encounter during which this CareTeam was created or to which the creation of
	// this record is tightly associated.
	Encounter *Reference `json:"encounter"`
	// Indicates when the team did (or is intended to) come into effect and end.
	Period *Period `json:"period"`
	// Identifies all people and organizations who are expected to be involved in the care
	// team.
	Participant []*CareTeam_Participant `json:"participant"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Indicates the current state of the care team.
	Status CareTeamStatus `json:"status"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Business identifiers assigned to this care team by the performer or other systems
	// which remain constant as the resource is updated and propagates from server to
	// server.
	Identifier []*Identifier `json:"identifier"`
	// Describes why the care team exists.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// The organization responsible for the care team.
	ManagingOrganization []*Reference `json:"managingOrganization"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Identifies what kind of team.  This is to support differentiation between multiple
	// co-existing teams, such as care plan team, episode of care team, longitudinal care
	// team.
	Category []*CodeableConcept `json:"category"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Condition(s) that this care team addresses.
	ReasonReference []*Reference `json:"reasonReference"`
	// A central contact detail for the care team (that applies to all members).
	Telecom []*ContactPoint `json:"telecom"`
	// Comments made about the CareTeam.
	Note []*Annotation `json:"note"`
}

func (t *CareTeam) ResourceType() string {
	return "CareTeam"
}
func (t *CareTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		CareTeam
		ResourceType string `json:"resourceType"`
	}{
		CareTeam:     *t,
		ResourceType: t.ResourceType(),
	})
}

type CareTeamStatus string

const (
	CareTeamStatusProposed       CareTeamStatus = "proposed"
	CareTeamStatusActive         CareTeamStatus = "active"
	CareTeamStatusSuspended      CareTeamStatus = "suspended"
	CareTeamStatusInactive       CareTeamStatus = "inactive"
	CareTeamStatusEnteredInError CareTeamStatus = "entered-in-error"
)

// RiskAssessment is An assessment of the likely outcome(s) for a patient or other subject as well as the
// likelihood of each outcome.
type RiskAssessment struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The algorithm, process or mechanism used to evaluate the risk.
	Method *CodeableConcept `json:"method"`
	// The patient or group the risk assessment applies to.
	Subject *Reference `json:"subject,omitempty"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A reference to a resource that this risk assessment is part of, such as a Procedure.
	Parent *Reference `json:"parent"`
	// The date (and possibly time) the risk assessment was performed.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	OccurrenceDateTime string `json:"occurrenceDateTime"`
	// Describes the expected outcome for the subject.
	Prediction []*RiskAssessment_Prediction `json:"prediction"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A reference to the request that is fulfilled by this risk assessment.
	BasedOn *Reference `json:"basedOn"`
	// The date (and possibly time) the risk assessment was performed.
	OccurrencePeriod *Period `json:"occurrencePeriod"`
	// The provider or software application that performed the assessment.
	Performer *Reference `json:"performer"`
	// Resources supporting the reason the risk assessment was performed.
	ReasonReference []*Reference `json:"reasonReference"`
	// A description of the steps that might be taken to reduce the identified risk(s).
	Mitigation string `json:"mitigation"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Business identifier assigned to the risk assessment.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Additional comments about the risk assessment.
	Note []*Annotation `json:"note"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The status of the RiskAssessment, using the same statuses as an Observation.
	Status string `json:"status"`
	// The encounter where the assessment was performed.
	Encounter *Reference `json:"encounter"`
	// Extensions for mitigation
	Mitigation_ext *Element `json:"_mitigation"`
	// Extensions for occurrenceDateTime
	OccurrenceDateTime_ext *Element `json:"_occurrenceDateTime"`
	// The type of the risk assessment performed.
	Code *CodeableConcept `json:"code"`
	// The reason the risk assessment was performed.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// For assessments or prognosis specific to a particular condition, indicates the
	// condition being assessed.
	Condition *Reference `json:"condition"`
	// Indicates the source data considered as part of the assessment (for example,
	// FamilyHistory, Observations, Procedures, Conditions, etc.).
	Basis []*Reference `json:"basis"`
}

func (t *RiskAssessment) ResourceType() string {
	return "RiskAssessment"
}
func (t *RiskAssessment) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		RiskAssessment
		ResourceType string `json:"resourceType"`
	}{
		RiskAssessment: *t,
		ResourceType:   t.ResourceType(),
	})
}

// Composition is A set of healthcare-related information that is assembled together into a single
// logical package that provides a single coherent statement of meaning, establishes
// its own context and that has clinical attestation with regard to who is making the
// statement. A Composition defines the structure and narrative content necessary for a
// document. However, a Composition alone does not constitute a document. Rather, the
// Composition must be the first entry in a Bundle where Bundle.type=document, and any
// other resources referenced from Composition must be included as subsequent entries
// in the Bundle (for example Patient, Practitioner, Encounter, etc.).
type Composition struct {
	// The clinical service, such as a colonoscopy or an appendectomy, being documented.
	Event []*Composition_Event `json:"event"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Identifies the organization or group who is responsible for ongoing maintenance of
	// and access to the composition/document information.
	Custodian *Reference `json:"custodian"`
	// Describes the clinical encounter or type of care this documentation is associated
	// with.
	Encounter *Reference `json:"encounter"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A version-independent identifier for the Composition. This identifier stays constant
	// as the composition is changed over time.
	Identifier *Identifier `json:"identifier"`
	// The composition editing time, when the composition was last logically changed by the
	// author.
	Date string `json:"date"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The code specifying the level of confidentiality of the Composition.
	Confidentiality string `json:"confidentiality"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Who or what the composition is about. The composition can be about a person,
	// (patient or healthcare practitioner), a device (e.g. a machine) or even a group of
	// subjects (such as a document about a herd of livestock, or a set of patients that
	// share a common exposure).
	Subject *Reference `json:"subject"`
	// A participant who has attested to the accuracy of the composition/document.
	Attester []*Composition_Attester `json:"attester"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The workflow/clinical status of this composition. The status is a marker for the
	// clinical standing of the document.
	Status CompositionStatus `json:"status"`
	// The root of the sections that make up the composition.
	Section []*Composition_Section `json:"section"`
	// Specifies the particular kind of composition (e.g. History and Physical, Discharge
	// Summary, Progress Note). This usually equates to the purpose of making the
	// composition.
	Type *CodeableConcept `json:"type,omitempty"`
	// Identifies who is responsible for the information in the composition, not
	// necessarily who typed it in.
	Author []*Reference `json:"author,omitempty"`
	// Extensions for confidentiality
	Confidentiality_ext *Element `json:"_confidentiality"`
	// Relationships that this composition has with other compositions or documents that
	// already exist.
	RelatesTo []*Composition_RelatesTo `json:"relatesTo"`
	// A categorization for the type of the composition - helps for indexing and searching.
	// This may be implied by or derived from the code specified in the Composition Type.
	Category []*CodeableConcept `json:"category"`
	// Official human-readable label for the composition.
	Title string `json:"title"`
}

func (t *Composition) ResourceType() string {
	return "Composition"
}
func (t *Composition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Composition
		ResourceType string `json:"resourceType"`
	}{
		Composition:  *t,
		ResourceType: t.ResourceType(),
	})
}

type CompositionStatus string

const (
	CompositionStatusPreliminary    CompositionStatus = "preliminary"
	CompositionStatusFinal          CompositionStatus = "final"
	CompositionStatusAmended        CompositionStatus = "amended"
	CompositionStatusEnteredInError CompositionStatus = "entered-in-error"
)

// Parameters is This resource is a non-persisted resource used to pass information into and back
// from an [operation](operations.html). It has no other use, and there is no RESTful
// endpoint associated with it.
type Parameters struct {
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A parameter passed to or received from the operation.
	Parameter []*Parameters_Parameter `json:"parameter"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
}

func (t *Parameters) ResourceType() string {
	return "Parameters"
}
func (t *Parameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Parameters
		ResourceType string `json:"resourceType"`
	}{
		Parameters:   *t,
		ResourceType: t.ResourceType(),
	})
}

// ServiceRequest is A record of a request for service such as diagnostic investigations, treatments, or
// operations to be performed.
type ServiceRequest struct {
	// Plan/proposal/order fulfilled by this request.
	BasedOn []*Reference `json:"basedOn"`
	// An amount of service being requested which can be a quantity ( for example $1,500
	// home modification), a ratio ( for example, 20 half day visits per month), or a range
	// (2.0 to 1.8 Gy per fraction).
	QuantityRatio *Ratio `json:"quantityRatio"`
	// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations
	// that may be needed for delivering the requested service.
	Insurance []*Reference `json:"insurance"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for instantiatesUri
	InstantiatesUri_ext []*Element `json:"_instantiatesUri"`
	// Extensions for intent
	Intent_ext *Element `json:"_intent"`
	// An amount of service being requested which can be a quantity ( for example $1,500
	// home modification), a ratio ( for example, 20 half day visits per month), or a range
	// (2.0 to 1.8 Gy per fraction).
	QuantityRange *Range `json:"quantityRange"`
	// An encounter that provides additional information about the healthcare context in
	// which this request is made.
	Encounter *Reference `json:"encounter"`
	// Extensions for patientInstruction
	PatientInstruction_ext *Element `json:"_patientInstruction"`
	// The date/time at which the requested service should occur.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	OccurrenceDateTime string `json:"occurrenceDateTime"`
	// If a CodeableConcept is present, it indicates the pre-condition for performing the
	// service.  For example "pain", "on flare-up", etc.
	AsNeededCodeableConcept *CodeableConcept `json:"asNeededCodeableConcept"`
	// The individual who initiated the request and has responsibility for its activation.
	Requester *Reference `json:"requester"`
	// An explanation or justification for why this service is being requested in coded or
	// textual form.   This is often for billing purposes.  May relate to the resources
	// referred to in `supportingInfo`.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A shared identifier common to all service requests that were authorized more or less
	// simultaneously by a single author, representing the composite or group identifier.
	Requisition *Identifier `json:"requisition"`
	// Extensions for priority
	Priority_ext *Element `json:"_priority"`
	// A reference to the the preferred location(s) where the procedure should actually
	// happen. E.g. at home or nursing day care center.
	LocationReference []*Reference `json:"locationReference"`
	// Additional clinical information about the patient or specimen that may influence the
	// services or their interpretations.     This information includes diagnosis, clinical
	// findings and other observations.  In laboratory ordering these are typically
	// referred to as "ask at order entry questions (AOEs)".  This includes observations
	// explicitly requested by the producer (filler) to provide context or supporting
	// information needed to complete the order. For example,  reporting the amount of
	// inspired oxygen for blood gas measurements.
	SupportingInfo []*Reference `json:"supportingInfo"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The URL pointing to an externally maintained protocol, guideline, orderset or other
	// definition that is adhered to in whole or in part by this ServiceRequest.
	InstantiatesUri []string `json:"instantiatesUri"`
	// The status of the order.
	Status string `json:"status"`
	// Indicates how quickly the ServiceRequest should be addressed with respect to other
	// requests.
	Priority string `json:"priority"`
	// An amount of service being requested which can be a quantity ( for example $1,500
	// home modification), a ratio ( for example, 20 half day visits per month), or a range
	// (2.0 to 1.8 Gy per fraction).
	QuantityQuantity *Quantity `json:"quantityQuantity"`
	// Indicates another resource that provides a justification for why this service is
	// being requested.   May relate to the resources referred to in `supportingInfo`.
	ReasonReference []*Reference `json:"reasonReference"`
	// Anatomic location where the procedure should be performed. This is the target site.
	BodySite []*CodeableConcept `json:"bodySite"`
	// Any other notes and comments made about the service request. For example, internal
	// billing notes.
	Note []*Annotation `json:"note"`
	// The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition
	// that is adhered to in whole or in part by this ServiceRequest.
	InstantiatesCanonical []string `json:"instantiatesCanonical"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Additional details and instructions about the how the services are to be delivered.
	//  For example, and order for a urinary catheter may have an order detail for an
	// external or indwelling catheter, or an order for a bandage may require additional
	// instructions specifying how the bandage should be applied.
	OrderDetail []*CodeableConcept `json:"orderDetail"`
	// Desired type of performer for doing the requested service.
	PerformerType *CodeableConcept `json:"performerType"`
	// One or more specimens that the laboratory procedure will use.
	Specimen []*Reference `json:"specimen"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The request takes the place of the referenced completed or terminated request(s).
	Replaces []*Reference `json:"replaces"`
	// The desired performer for doing the requested service.  For example, the surgeon,
	// dermatopathologist, endoscopist, etc.
	Performer []*Reference `json:"performer"`
	// Extensions for asNeededBoolean
	AsNeededBoolean_ext *Element `json:"_asNeededBoolean"`
	// When the request transitioned to being actionable.
	AuthoredOn string `json:"authoredOn"`
	// Key events in the history of the request.
	RelevantHistory []*Reference `json:"relevantHistory"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Set this to true if the record is saying that the service/procedure should NOT be
	// performed.
	DoNotPerform bool `json:"doNotPerform"`
	// Extensions for occurrenceDateTime
	OccurrenceDateTime_ext *Element `json:"_occurrenceDateTime"`
	// Identifiers assigned to this order instance by the orderer and/or the receiver
	// and/or order fulfiller.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for doNotPerform
	DoNotPerform_ext *Element `json:"_doNotPerform"`
	// If a CodeableConcept is present, it indicates the pre-condition for performing the
	// service.  For example "pain", "on flare-up", etc.
	// pattern ^true|false$
	AsNeededBoolean bool `json:"asNeededBoolean"`
	// The preferred location(s) where the procedure should actually happen in coded or
	// free text form. E.g. at home or nursing day care center.
	LocationCode []*CodeableConcept `json:"locationCode"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A code that identifies a particular service (i.e., procedure, diagnostic
	// investigation, or panel of investigations) that have been requested.
	Code *CodeableConcept `json:"code"`
	// The date/time at which the requested service should occur.
	OccurrencePeriod *Period `json:"occurrencePeriod"`
	// Extensions for authoredOn
	AuthoredOn_ext *Element `json:"_authoredOn"`
	// Whether the request is a proposal, plan, an original order or a reflex order.
	Intent string `json:"intent"`
	// A code that classifies the service for searching, sorting and display purposes (e.g.
	// "Surgical Procedure").
	Category []*CodeableConcept `json:"category"`
	// On whom or what the service is to be performed. This is usually a human patient, but
	// can also be requested on animals, groups of humans or animals, devices such as
	// dialysis machines, or even locations (typically for environmental scans).
	Subject *Reference `json:"subject,omitempty"`
	// The date/time at which the requested service should occur.
	OccurrenceTiming *Timing `json:"occurrenceTiming"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Instructions in terms that are understood by the patient or consumer.
	PatientInstruction string `json:"patientInstruction"`
}

func (t *ServiceRequest) ResourceType() string {
	return "ServiceRequest"
}
func (t *ServiceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ServiceRequest
		ResourceType string `json:"resourceType"`
	}{
		ServiceRequest: *t,
		ResourceType:   t.ResourceType(),
	})
}

// SubstanceNucleicAcid is Nucleic acids are defined by three distinct elements: the base, sugar and linkage.
// Individual substance/moiety IDs will be created for each of these elements. The
// nucleotide sequence will be always entered in the 5’-3’ direction.
type SubstanceNucleicAcid struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// (TBC).
	OligoNucleotideType *CodeableConcept `json:"oligoNucleotideType"`
	// The type of the sequence shall be specified based on a controlled vocabulary.
	SequenceType *CodeableConcept `json:"sequenceType"`
	// The number of linear sequences of nucleotides linked through phosphodiester bonds
	// shall be described. Subunits would be strands of nucleic acids that are tightly
	// associated typically through Watson-Crick base pairing. NOTE: If not specified in
	// the reference source, the assumption is that there is 1 subunit.
	NumberOfSubunits int64 `json:"numberOfSubunits"`
	// Extensions for areaOfHybridisation
	AreaOfHybridisation_ext *Element `json:"_areaOfHybridisation"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Subunits are listed in order of decreasing length; sequences of the same length will
	// be ordered by molecular weight; subunits that have identical sequences will be
	// repeated multiple times.
	Subunit []*SubstanceNucleicAcid_Subunit `json:"subunit"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for numberOfSubunits
	NumberOfSubunits_ext *Element `json:"_numberOfSubunits"`
	// The area of hybridisation shall be described if applicable for double stranded RNA
	// or DNA. The number associated with the subunit followed by the number associated to
	// the residue shall be specified in increasing order. The underscore “” shall be
	// used as separator as follows: “Subunitnumber Residue”.
	AreaOfHybridisation string `json:"areaOfHybridisation"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
}

func (t *SubstanceNucleicAcid) ResourceType() string {
	return "SubstanceNucleicAcid"
}
func (t *SubstanceNucleicAcid) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		SubstanceNucleicAcid
		ResourceType string `json:"resourceType"`
	}{
		SubstanceNucleicAcid: *t,
		ResourceType:         t.ResourceType(),
	})
}

// ValueSet is A ValueSet resource instance specifies a set of codes drawn from one or more code
// systems, intended for use in a particular context. Value sets link between
// [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
type ValueSet struct {
	// A short, descriptive, user-friendly title for the value set.
	Title string `json:"title"`
	// The status of this value set. Enables tracking the life-cycle of the content. The
	// status of the value set applies to the value set definition (ValueSet.compose) and
	// the associated ValueSet metadata. Expansions do not have a state.
	Status ValueSetStatus `json:"status"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// An absolute URI that is used to identify this value set when it is referenced in a
	// specification, model, design or an instance; also called its canonical identifier.
	// This SHOULD be globally unique and SHOULD be a literal address at which at which an
	// authoritative instance of this value set is (or will be) published. This URL can be
	// the target of a canonical reference. It SHALL remain the same when the value set is
	// stored on different servers.
	Url string `json:"url"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Extensions for experimental
	Experimental_ext *Element `json:"_experimental"`
	// Extensions for immutable
	Immutable_ext *Element `json:"_immutable"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// If this is set to 'true', then no new versions of the content logical definition can
	// be created.  Note: Other metadata might still change.
	Immutable bool `json:"immutable"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A Boolean value to indicate that this value set is authored for testing purposes (or
	// education/evaluation/marketing) and is not intended to be used for genuine usage.
	Experimental bool `json:"experimental"`
	// The date (and optionally time) when the value set was created or revised (e.g. the
	// 'content logical definition').
	Date string `json:"date"`
	// A copyright statement relating to the value set and/or its contents. Copyright
	// statements are generally legal restrictions on the use and publishing of the value
	// set.
	Copyright string `json:"copyright"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The name of the organization or individual that published the value set.
	Publisher string `json:"publisher"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate value set instances.
	UseContext []*UsageContext `json:"useContext"`
	// Explanation of why this value set is needed and why it has been designed as it has.
	Purpose string `json:"purpose"`
	// A value set can also be "expanded", where the value set is turned into a simple
	// collection of enumerated codes. This element holds the expansion, if it has been
	// performed.
	Expansion *ValueSet_Expansion `json:"expansion"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The identifier that is used to identify this version of the value set when it is
	// referenced in a specification, model, design or instance. This is an arbitrary value
	// managed by the value set author and is not expected to be globally unique. For
	// example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not
	// available. There is also no expectation that versions can be placed in a
	// lexicographical sequence.
	Version string `json:"version"`
	// A natural language name identifying the value set. This name should be usable as an
	// identifier for the module by machine processing applications such as code generation.
	Name string `json:"name"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// A set of criteria that define the contents of the value set by including or
	// excluding codes selected from the specified code system(s) that the value set draws
	// from. This is also known as the Content Logical Definition (CLD).
	Compose *ValueSet_Compose `json:"compose"`
	// A formal identifier that is used to identify this value set when it is represented
	// in other formats, or referenced in a specification, model, design or an instance.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// A free text natural language description of the value set from a consumer's
	// perspective. The textual description specifies the span of meanings for concepts to
	// be included within the Value Set Expansion, and also may specify the intended use
	// and limitations of the Value Set.
	Description string `json:"description"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// A legal or geographic region in which the value set is intended to be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// Extensions for purpose
	Purpose_ext *Element `json:"_purpose"`
}

func (t *ValueSet) ResourceType() string {
	return "ValueSet"
}
func (t *ValueSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ValueSet
		ResourceType string `json:"resourceType"`
	}{
		ValueSet:     *t,
		ResourceType: t.ResourceType(),
	})
}

type ValueSetStatus string

const (
	ValueSetStatusDraft   ValueSetStatus = "draft"
	ValueSetStatusActive  ValueSetStatus = "active"
	ValueSetStatusRetired ValueSetStatus = "retired"
	ValueSetStatusUnknown ValueSetStatus = "unknown"
)

// Communication is An occurrence of information being transmitted; e.g. an alert that was sent to a
// responsible provider, a public health agency that was notified about a reportable
// condition.
type Communication struct {
	// The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition
	// that is adhered to in whole or in part by this Communication.
	InstantiatesCanonical []string `json:"instantiatesCanonical"`
	// Prior communication that this communication is in response to.
	InResponseTo []*Reference `json:"inResponseTo"`
	// The entity (e.g. person, organization, clinical information system, care team or
	// device) which was the target of the communication. If receipts need to be tracked by
	// an individual, a separate resource instance will need to be created for each
	// recipient.  Multiple recipient communications are intended where either receipts are
	// not tracked (e.g. a mass mail-out) or a receipt is captured in aggregate (all emails
	// confirmed received by a particular time).
	Recipient []*Reference `json:"recipient"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for priority
	Priority_ext *Element `json:"_priority"`
	// Extensions for received
	Received_ext *Element `json:"_received"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// An order, proposal or plan fulfilled in whole or in part by this Communication.
	BasedOn []*Reference `json:"basedOn"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The patient or group that was the focus of this communication.
	Subject *Reference `json:"subject"`
	// Description of the purpose/content, similar to a subject line in an email.
	Topic *CodeableConcept `json:"topic"`
	// The entity (e.g. person, organization, clinical information system, or device) which
	// was the source of the communication.
	Sender *Reference `json:"sender"`
	// Text, attachment(s), or resource(s) that was communicated to the recipient.
	Payload []*Communication_Payload `json:"payload"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A channel that was used for this communication (e.g. email, fax).
	Medium []*CodeableConcept `json:"medium"`
	// Other resources that pertain to this communication and to which this communication
	// should be associated.
	About []*Reference `json:"about"`
	// Extensions for sent
	Sent_ext *Element `json:"_sent"`
	// The time when this communication arrived at the destination.
	Received string `json:"received"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Business identifiers assigned to this communication by the performer or other
	// systems which remain constant as the resource is updated and propagates from server
	// to server.
	Identifier []*Identifier `json:"identifier"`
	// Characterizes how quickly the planned or in progress communication must be
	// addressed. Includes concepts such as stat, urgent, routine.
	Priority string `json:"priority"`
	// The Encounter during which this Communication was created or to which the creation
	// of this record is tightly associated.
	Encounter *Reference `json:"encounter"`
	// Indicates another resource whose existence justifies this communication.
	ReasonReference []*Reference `json:"reasonReference"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Part of this action.
	PartOf []*Reference `json:"partOf"`
	// Captures the reason for the current state of the Communication.
	StatusReason *CodeableConcept `json:"statusReason"`
	// The type of message conveyed such as alert, notification, reminder, instruction, etc.
	Category []*CodeableConcept `json:"category"`
	// The time when this communication was sent.
	Sent string `json:"sent"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// The URL pointing to an externally maintained protocol, guideline, orderset or other
	// definition that is adhered to in whole or in part by this Communication.
	InstantiatesUri []string `json:"instantiatesUri"`
	// The status of the transmission.
	Status string `json:"status"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for instantiatesUri
	InstantiatesUri_ext []*Element `json:"_instantiatesUri"`
	// The reason or justification for the communication.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// Additional notes or commentary about the communication by the sender, receiver or
	// other interested parties.
	Note []*Annotation `json:"note"`
}

func (t *Communication) ResourceType() string {
	return "Communication"
}
func (t *Communication) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Communication
		ResourceType string `json:"resourceType"`
	}{
		Communication: *t,
		ResourceType:  t.ResourceType(),
	})
}

// DeviceDefinition is The characteristics, operational status and capabilities of a medical-related
// component of a medical device.
type DeviceDefinition struct {
	// Extensions for manufacturerString
	ManufacturerString_ext *Element `json:"_manufacturerString"`
	// A name of the manufacturer.
	ManufacturerReference *Reference `json:"manufacturerReference"`
	// Device capabilities.
	Capability []*DeviceDefinition_Capability `json:"capability"`
	// Unique instance identifiers assigned to a device by the software, manufacturers,
	// other organizations or owners. For example: handle ID.
	Identifier []*Identifier `json:"identifier"`
	// What kind of device or device system this is.
	Type *CodeableConcept `json:"type"`
	// A substance used to create the material(s) of which the device is made.
	Material []*DeviceDefinition_Material `json:"material"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Dimensions, color etc.
	PhysicalCharacteristics *ProdCharacteristic `json:"physicalCharacteristics"`
	// The actual configuration settings of a device as it actually operates, e.g.,
	// regulation status, time properties.
	Property []*DeviceDefinition_Property `json:"property"`
	// Access to on-line information about the device.
	OnlineInformation string `json:"onlineInformation"`
	// The quantity of the device present in the packaging (e.g. the number of devices
	// present in a pack, or the number of devices in the same package of the medicinal
	// product).
	Quantity *Quantity `json:"quantity"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for modelNumber
	ModelNumber_ext *Element `json:"_modelNumber"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// A name given to the device to identify it.
	DeviceName []*DeviceDefinition_DeviceName `json:"deviceName"`
	// The capabilities supported on a  device, the standards to which the device conforms
	// for a particular purpose, and used for the communication.
	Specialization []*DeviceDefinition_Specialization `json:"specialization"`
	// The available versions of the device, e.g., software versions.
	Version []string `json:"version"`
	// Language code for the human-readable text strings produced by the device (all
	// supported).
	LanguageCode []*CodeableConcept `json:"languageCode"`
	// An organization that is responsible for the provision and ongoing maintenance of the
	// device.
	Owner *Reference `json:"owner"`
	// The parent device it can be part of.
	ParentDevice *Reference `json:"parentDevice"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Unique device identifier (UDI) assigned to device label or package.  Note that the
	// Device may include multiple udiCarriers as it either may include just the udiCarrier
	// for the jurisdiction it is sold, or for multiple jurisdictions it could have been
	// sold.
	UdiDeviceIdentifier []*DeviceDefinition_UdiDeviceIdentifier `json:"udiDeviceIdentifier"`
	// Safety characteristics of the device.
	Safety []*CodeableConcept `json:"safety"`
	// A network address on which the device may be contacted directly.
	Url string `json:"url"`
	// Extensions for onlineInformation
	OnlineInformation_ext *Element `json:"_onlineInformation"`
	// Descriptive information, usage information or implantation information that is not
	// captured in an existing element.
	Note []*Annotation `json:"note"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// A name of the manufacturer.
	// pattern ^[ \r\n\t\S]+$
	ManufacturerString string `json:"manufacturerString"`
	// The model number for the device.
	ModelNumber string `json:"modelNumber"`
	// Extensions for version
	Version_ext []*Element `json:"_version"`
	// Shelf Life and storage information.
	ShelfLifeStorage []*ProductShelfLife `json:"shelfLifeStorage"`
	// Contact details for an organization or a particular human that is responsible for
	// the device.
	Contact []*ContactPoint `json:"contact"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
}

func (t *DeviceDefinition) ResourceType() string {
	return "DeviceDefinition"
}
func (t *DeviceDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		DeviceDefinition
		ResourceType string `json:"resourceType"`
	}{
		DeviceDefinition: *t,
		ResourceType:     t.ResourceType(),
	})
}

// DeviceRequest is Represents a request for a patient to employ a medical device. The device may be an
// implantable device, or an external assistive device, such as a walker.
type DeviceRequest struct {
	// The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition
	// that is adhered to in whole or in part by this DeviceRequest.
	InstantiatesCanonical []string `json:"instantiatesCanonical"`
	// Extensions for intent
	Intent_ext *Element `json:"_intent"`
	// An encounter that provides additional context in which this request is made.
	Encounter *Reference `json:"encounter"`
	// The timing schedule for the use of the device. The Schedule data type allows many
	// different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an
	// hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and
	// 1 Nov 2013".
	OccurrencePeriod *Period `json:"occurrencePeriod"`
	// The timing schedule for the use of the device. The Schedule data type allows many
	// different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an
	// hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and
	// 1 Nov 2013".
	OccurrenceTiming *Timing `json:"occurrenceTiming"`
	// Extensions for authoredOn
	AuthoredOn_ext *Element `json:"_authoredOn"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Identifiers assigned to this order by the orderer or by the receiver.
	Identifier []*Identifier `json:"identifier"`
	// Plan/proposal/order fulfilled by this request.
	BasedOn []*Reference `json:"basedOn"`
	// Specific parameters for the ordered item.  For example, the prism value for lenses.
	Parameter []*DeviceRequest_Parameter `json:"parameter"`
	// The timing schedule for the use of the device. The Schedule data type allows many
	// different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an
	// hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and
	// 1 Nov 2013".
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	OccurrenceDateTime string `json:"occurrenceDateTime"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Composite request this is part of.
	GroupIdentifier *Identifier `json:"groupIdentifier"`
	// The details of the device to be used.
	CodeCodeableConcept *CodeableConcept `json:"codeCodeableConcept"`
	// When the request transitioned to being actionable.
	AuthoredOn string `json:"authoredOn"`
	// Reason or justification for the use of this device.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations
	// that may be required for delivering the requested service.
	Insurance []*Reference `json:"insurance"`
	// Details about this request that were not represented at all or sufficiently in one
	// of the attributes provided in a class. These may include for example a comment, an
	// instruction, or a note associated with the statement.
	Note []*Annotation `json:"note"`
	// The URL pointing to an externally maintained protocol, guideline, orderset or other
	// definition that is adhered to in whole or in part by this DeviceRequest.
	InstantiatesUri []string `json:"instantiatesUri"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates how quickly the {{title}} should be addressed with respect to other
	// requests.
	Priority string `json:"priority"`
	// Extensions for occurrenceDateTime
	OccurrenceDateTime_ext *Element `json:"_occurrenceDateTime"`
	// The desired performer for doing the diagnostic testing.
	Performer *Reference `json:"performer"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The status of the request.
	Status string `json:"status"`
	// The patient who will use the device.
	Subject *Reference `json:"subject,omitempty"`
	// The individual who initiated the request and has responsibility for its activation.
	Requester *Reference `json:"requester"`
	// Key events in the history of the request.
	RelevantHistory []*Reference `json:"relevantHistory"`
	// Extensions for instantiatesUri
	InstantiatesUri_ext []*Element `json:"_instantiatesUri"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Additional clinical information about the patient that may influence the request
	// fulfilment.  For example, this may include where on the subject's body the device
	// will be used (i.e. the target site).
	SupportingInfo []*Reference `json:"supportingInfo"`
	// The request takes the place of the referenced completed or terminated request(s).
	PriorRequest []*Reference `json:"priorRequest"`
	// The details of the device to be used.
	CodeReference *Reference `json:"codeReference"`
	// Desired type of performer for doing the diagnostic testing.
	PerformerType *CodeableConcept `json:"performerType"`
	// Reason or justification for the use of this device.
	ReasonReference []*Reference `json:"reasonReference"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Whether the request is a proposal, plan, an original order or a reflex order.
	Intent string `json:"intent"`
	// Extensions for priority
	Priority_ext *Element `json:"_priority"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
}

func (t *DeviceRequest) ResourceType() string {
	return "DeviceRequest"
}
func (t *DeviceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		DeviceRequest
		ResourceType string `json:"resourceType"`
	}{
		DeviceRequest: *t,
		ResourceType:  t.ResourceType(),
	})
}

// MedicinalProductIngredient is An ingredient of a manufactured item or pharmaceutical product.
type MedicinalProductIngredient struct {
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A specified substance that comprises this ingredient.
	SpecifiedSubstance []*MedicinalProductIngredient_SpecifiedSubstance `json:"specifiedSubstance"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// If the ingredient is a known or suspected allergen.
	AllergenicIndicator bool `json:"allergenicIndicator"`
	// Manufacturer of this Ingredient.
	Manufacturer []*Reference `json:"manufacturer"`
	// The ingredient substance.
	Substance *MedicinalProductIngredient_Substance `json:"substance"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The identifier(s) of this Ingredient that are assigned by business processes and/or
	// used to refer to it when a direct URL reference to the resource itself is not
	// appropriate.
	Identifier *Identifier `json:"identifier"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Ingredient role e.g. Active ingredient, excipient.
	Role *CodeableConcept `json:"role,omitempty"`
	// Extensions for allergenicIndicator
	AllergenicIndicator_ext *Element `json:"_allergenicIndicator"`
}

func (t *MedicinalProductIngredient) ResourceType() string {
	return "MedicinalProductIngredient"
}
func (t *MedicinalProductIngredient) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		MedicinalProductIngredient
		ResourceType string `json:"resourceType"`
	}{
		MedicinalProductIngredient: *t,
		ResourceType:               t.ResourceType(),
	})
}

// Media is A photo, video, or audio recording acquired or used in healthcare. The actual
// content may be inline or provided by direct reference.
type Media struct {
	// Extensions for height
	Height_ext *Element `json:"_height"`
	// The number of frames in a photo. This is used with a multi-page fax, or an imaging
	// acquisition context that takes multiple slices in a single image, or an animated
	// gif. If there is more than one frame, this SHALL have a value in order to alert
	// interface software that a multi-frame capable rendering widget is required.
	Frames uint64 `json:"frames"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for createdDateTime
	CreatedDateTime_ext *Element `json:"_createdDateTime"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The name of the imaging view e.g. Lateral or Antero-posterior (AP).
	View *CodeableConcept `json:"view"`
	// The person who administered the collection of the image.
	Operator *Reference `json:"operator"`
	// Extensions for width
	Width_ext *Element `json:"_width"`
	// The device used to collect the media.
	Device *Reference `json:"device"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A larger event of which this particular event is a component or step.
	PartOf []*Reference `json:"partOf"`
	// Details of the type of the media - usually, how it was acquired (what type of
	// device). If images sourced from a DICOM system, are wrapped in a Media resource,
	// then this is the modality.
	Modality *CodeableConcept `json:"modality"`
	// The date and time(s) at which the media was collected.
	CreatedPeriod *Period `json:"createdPeriod"`
	// The name of the device / manufacturer of the device  that was used to make the
	// recording.
	DeviceName string `json:"deviceName"`
	// Comments made about the media by the performer, subject or other participants.
	Note []*Annotation `json:"note"`
	// The duration of the recording in seconds - for audio and video.
	Duration float64 `json:"duration"`
	// The actual content of the media - inline or by direct reference to the media source
	// file.
	Content *Attachment `json:"content,omitempty"`
	// A procedure that is fulfilled in whole or in part by the creation of this media.
	BasedOn []*Reference `json:"basedOn"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// A code that classifies whether the media is an image, video or audio recording or
	// some other media category.
	Type *CodeableConcept `json:"type"`
	// Extensions for deviceName
	DeviceName_ext *Element `json:"_deviceName"`
	// Width of the image in pixels (photo/video).
	Width uint64 `json:"width"`
	// Extensions for issued
	Issued_ext *Element `json:"_issued"`
	// Describes why the event occurred in coded or textual form.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// Height of the image in pixels (photo/video).
	Height uint64 `json:"height"`
	// Identifiers associated with the image - these may include identifiers for the image
	// itself, identifiers for the context of its collection (e.g. series ids) and context
	// ids such as accession numbers or other workflow identifiers.
	Identifier []*Identifier `json:"identifier"`
	// The current state of the {{title}}.
	Status string `json:"status"`
	// Who/What this Media is a record of.
	Subject *Reference `json:"subject"`
	// The encounter that establishes the context for this media.
	Encounter *Reference `json:"encounter"`
	// The date and time(s) at which the media was collected.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	CreatedDateTime string `json:"createdDateTime"`
	// Extensions for duration
	Duration_ext *Element `json:"_duration"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for frames
	Frames_ext *Element `json:"_frames"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The date and time this version of the media was made available to providers,
	// typically after having been reviewed.
	Issued string `json:"issued"`
	// Indicates the site on the subject's body where the observation was made (i.e. the
	// target site).
	BodySite *CodeableConcept `json:"bodySite"`
}

func (t *Media) ResourceType() string {
	return "Media"
}
func (t *Media) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Media
		ResourceType string `json:"resourceType"`
	}{
		Media:        *t,
		ResourceType: t.ResourceType(),
	})
}

// ObservationDefinition is Set of definitional characteristics for a kind of observation or measurement
// produced or consumed by an orderable health care service.
type ObservationDefinition struct {
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for multipleResultsAllowed
	MultipleResultsAllowed_ext *Element `json:"_multipleResultsAllowed"`
	// Characteristics for quantitative results of this observation.
	QuantitativeDetails *ObservationDefinition_QuantitativeDetails `json:"quantitativeDetails"`
	// Multiple  ranges of results qualified by different contexts for ordinal or
	// continuous observations conforming to this ObservationDefinition.
	QualifiedInterval []*ObservationDefinition_QualifiedInterval `json:"qualifiedInterval"`
	// Extensions for permittedDataType
	PermittedDataType_ext []*Element `json:"_permittedDataType"`
	// The method or technique used to perform the observation.
	Method *CodeableConcept `json:"method"`
	// The set of normal coded results for the observations conforming to this
	// ObservationDefinition.
	NormalCodedValueSet *Reference `json:"normalCodedValueSet"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Describes what will be observed. Sometimes this is called the observation "name".
	Code *CodeableConcept `json:"code,omitempty"`
	// The set of critical coded results for the observation conforming to this
	// ObservationDefinition.
	CriticalCodedValueSet *Reference `json:"criticalCodedValueSet"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Multiple results allowed for observations conforming to this ObservationDefinition.
	MultipleResultsAllowed bool `json:"multipleResultsAllowed"`
	// Extensions for preferredReportName
	PreferredReportName_ext *Element `json:"_preferredReportName"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The set of valid coded results for the observations  conforming to this
	// ObservationDefinition.
	ValidCodedValueSet *Reference `json:"validCodedValueSet"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// A code that classifies the general type of observation.
	Category []*CodeableConcept `json:"category"`
	// A unique identifier assigned to this ObservationDefinition artifact.
	Identifier []*Identifier `json:"identifier"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The data types allowed for the value element of the instance observations conforming
	// to this ObservationDefinition.
	PermittedDataType []ObservationDefinitionPermittedDataType `json:"permittedDataType"`
	// The preferred name to be used when reporting the results of observations conforming
	// to this ObservationDefinition.
	PreferredReportName string `json:"preferredReportName"`
	// The set of abnormal coded results for the observation conforming to this
	// ObservationDefinition.
	AbnormalCodedValueSet *Reference `json:"abnormalCodedValueSet"`
}

func (t *ObservationDefinition) ResourceType() string {
	return "ObservationDefinition"
}
func (t *ObservationDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		ObservationDefinition
		ResourceType string `json:"resourceType"`
	}{
		ObservationDefinition: *t,
		ResourceType:          t.ResourceType(),
	})
}

type ObservationDefinitionPermittedDataType string

const ()

// Procedure is An action that is or was performed on or for a patient. This can be a physical
// intervention like an operation, or less invasive like long term services,
// counseling, or hypnotherapy.
type Procedure struct {
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// The URL pointing to a FHIR-defined protocol, guideline, order set or other
	// definition that is adhered to in whole or in part by this Procedure.
	InstantiatesCanonical []string `json:"instantiatesCanonical"`
	// The specific procedure that is performed. Use text if the exact nature of the
	// procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
	Code *CodeableConcept `json:"code"`
	// Estimated or actual date, date-time, period, or age when the procedure was
	// performed.  Allows a period to support complex procedures that span more than one
	// date, and also allows for the length of the procedure to be captured.
	PerformedPeriod *Period `json:"performedPeriod"`
	// Estimated or actual date, date-time, period, or age when the procedure was
	// performed.  Allows a period to support complex procedures that span more than one
	// date, and also allows for the length of the procedure to be captured.
	PerformedRange *Range `json:"performedRange"`
	// The location where the procedure actually happened.  E.g. a newborn at home, a
	// tracheostomy at a restaurant.
	Location *Reference `json:"location"`
	// The coded reason why the procedure was performed. This may be a coded entity of some
	// type, or may simply be present as text.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// If the procedure required specific follow up - e.g. removal of sutures. The follow
	// up may be represented as a simple note or could potentially be more complex, in
	// which case the CarePlan resource can be used.
	FollowUp []*CodeableConcept `json:"followUp"`
	// Any complications that occurred during the procedure, or in the immediate
	// post-performance period. These are generally tracked separately from the notes,
	// which will typically describe the procedure itself rather than any 'post procedure'
	// issues.
	Complication []*CodeableConcept `json:"complication"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Captures the reason for the current state of the procedure.
	StatusReason *CodeableConcept `json:"statusReason"`
	// The justification of why the procedure was performed.
	ReasonReference []*Reference `json:"reasonReference"`
	// Individual who recorded the record and takes responsibility for its content.
	Recorder *Reference `json:"recorder"`
	// Limited to "real" people rather than equipment.
	Performer []*Procedure_Performer `json:"performer"`
	// This could be a histology result, pathology report, surgical report, etc.
	Report []*Reference `json:"report"`
	// Any complications that occurred during the procedure, or in the immediate
	// post-performance period.
	ComplicationDetail []*Reference `json:"complicationDetail"`
	// The Encounter during which this Procedure was created or performed or to which the
	// creation of this record is tightly associated.
	Encounter *Reference `json:"encounter"`
	// Extensions for instantiatesUri
	InstantiatesUri_ext []*Element `json:"_instantiatesUri"`
	// Estimated or actual date, date-time, period, or age when the procedure was
	// performed.  Allows a period to support complex procedures that span more than one
	// date, and also allows for the length of the procedure to be captured.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	PerformedDateTime string `json:"performedDateTime"`
	// Estimated or actual date, date-time, period, or age when the procedure was
	// performed.  Allows a period to support complex procedures that span more than one
	// date, and also allows for the length of the procedure to be captured.
	// pattern ^[ \r\n\t\S]+$
	PerformedString string `json:"performedString"`
	// A device that is implanted, removed or otherwise manipulated (calibration, battery
	// replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion
	// of the Procedure.
	FocalDevice []*Procedure_FocalDevice `json:"focalDevice"`
	// Identifies medications, devices and any other substance used as part of the
	// procedure.
	UsedReference []*Reference `json:"usedReference"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The URL pointing to an externally maintained protocol, guideline, order set or other
	// definition that is adhered to in whole or in part by this Procedure.
	InstantiatesUri []string `json:"instantiatesUri"`
	// A larger event of which this particular procedure is a component or step.
	PartOf []*Reference `json:"partOf"`
	// The outcome of the procedure - did it resolve the reasons for the procedure being
	// performed?
	Outcome *CodeableConcept `json:"outcome"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A code specifying the state of the procedure. Generally, this will be the
	// in-progress or completed state.
	Status string `json:"status"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A reference to a resource that contains details of the request for this procedure.
	BasedOn []*Reference `json:"basedOn"`
	// A code that classifies the procedure for searching, sorting and display purposes
	// (e.g. "Surgical Procedure").
	Category *CodeableConcept `json:"category"`
	// The person, animal or group on which the procedure was performed.
	Subject *Reference `json:"subject,omitempty"`
	// Extensions for performedString
	PerformedString_ext *Element `json:"_performedString"`
	// Estimated or actual date, date-time, period, or age when the procedure was
	// performed.  Allows a period to support complex procedures that span more than one
	// date, and also allows for the length of the procedure to be captured.
	PerformedAge *Age `json:"performedAge"`
	// Any other notes and comments about the procedure.
	Note []*Annotation `json:"note"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Business identifiers assigned to this procedure by the performer or other systems
	// which remain constant as the resource is updated and is propagated from server to
	// server.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for performedDateTime
	PerformedDateTime_ext *Element `json:"_performedDateTime"`
	// Individual who is making the procedure statement.
	Asserter *Reference `json:"asserter"`
	// Detailed and structured anatomical location information. Multiple locations are
	// allowed - e.g. multiple punch biopsies of a lesion.
	BodySite []*CodeableConcept `json:"bodySite"`
	// Identifies coded items that were used as part of the procedure.
	UsedCode []*CodeableConcept `json:"usedCode"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
}

func (t *Procedure) ResourceType() string {
	return "Procedure"
}
func (t *Procedure) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Procedure
		ResourceType string `json:"resourceType"`
	}{
		Procedure:    *t,
		ResourceType: t.ResourceType(),
	})
}

// Flag is Prospective warnings of potential issues when providing care to the patient.
type Flag struct {
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Supports basic workflow.
	Status FlagStatus `json:"status"`
	// The patient, location, group, organization, or practitioner etc. this is about
	// record this flag is associated with.
	Subject *Reference `json:"subject,omitempty"`
	// The period of time from the activation of the flag to inactivation of the flag. If
	// the flag is active, the end of the period should be unspecified.
	Period *Period `json:"period"`
	// The coded value or textual component of the flag to display to the user.
	Code *CodeableConcept `json:"code,omitempty"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Business identifiers assigned to this flag by the performer or other systems which
	// remain constant as the resource is updated and propagates from server to server.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Allows a flag to be divided into different categories like clinical, administrative
	// etc. Intended to be used as a means of filtering which flags are displayed to
	// particular user or in a given context.
	Category []*CodeableConcept `json:"category"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// This alert is only relevant during the encounter.
	Encounter *Reference `json:"encounter"`
	// The person, organization or device that created the flag.
	Author *Reference `json:"author"`
}

func (t *Flag) ResourceType() string {
	return "Flag"
}
func (t *Flag) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Flag
		ResourceType string `json:"resourceType"`
	}{
		Flag:         *t,
		ResourceType: t.ResourceType(),
	})
}

type FlagStatus string

const (
	FlagStatusActive         FlagStatus = "active"
	FlagStatusInactive       FlagStatus = "inactive"
	FlagStatusEnteredInError FlagStatus = "entered-in-error"
)

// Group is Represents a defined collection of entities that may be discussed or acted upon
// collectively but which are not expected to act collectively, and are not formally or
// legally recognized; i.e. a collection of entities that isn't an Organization.
type Group struct {
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc.
	Code *CodeableConcept `json:"code"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifies the broad classification of the kind of resources the group includes.
	Type GroupType `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Extensions for actual
	Actual_ext *Element `json:"_actual"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// A count of the number of resource instances that are part of the group.
	Quantity uint64 `json:"quantity"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Entity responsible for defining and maintaining Group characteristics and/or
	// registered members.
	ManagingEntity *Reference `json:"managingEntity"`
	// Identifies traits whose presence r absence is shared by members of the group.
	Characteristic []*Group_Characteristic `json:"characteristic"`
	// Extensions for quantity
	Quantity_ext *Element `json:"_quantity"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A unique business identifier for this group.
	Identifier []*Identifier `json:"identifier"`
	// Indicates whether the record for the group is available for use or is merely being
	// retained for historical purposes.
	Active bool `json:"active"`
	// Extensions for active
	Active_ext *Element `json:"_active"`
	// If true, indicates that the resource refers to a specific group of real individuals.
	//  If false, the group defines a set of intended individuals.
	Actual bool `json:"actual"`
	// A label assigned to the group for human identification and communication.
	Name string `json:"name"`
	// Identifies the resource instances that are members of the group.
	Member []*Group_Member `json:"member"`
	// The base language in which the resource is written.
	Language string `json:"language"`
}

func (t *Group) ResourceType() string {
	return "Group"
}
func (t *Group) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Group
		ResourceType string `json:"resourceType"`
	}{
		Group:        *t,
		ResourceType: t.ResourceType(),
	})
}

type GroupType string

const (
	GroupTypePerson       GroupType = "person"
	GroupTypeAnimal       GroupType = "animal"
	GroupTypePractitioner GroupType = "practitioner"
	GroupTypeDevice       GroupType = "device"
	GroupTypeMedication   GroupType = "medication"
	GroupTypeSubstance    GroupType = "substance"
)

// HealthcareService is The details of a healthcare service available at a location.
type HealthcareService struct {
	// Collection of characteristics (attributes).
	Characteristic []*CodeableConcept `json:"characteristic"`
	// Extensions for active
	Active_ext *Element `json:"_active"`
	// Collection of specialties handled by the service site. This is more of a medical
	// term.
	Specialty []*CodeableConcept `json:"specialty"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Extra details about the service that can't be placed in the other fields.
	ExtraDetails string `json:"extraDetails"`
	// Does this service have specific eligibility requirements that need to be met in
	// order to use the service?
	Eligibility []*HealthcareService_Eligibility `json:"eligibility"`
	// Programs that this service is applicable to.
	Program []*CodeableConcept `json:"program"`
	// Technical endpoints providing access to services operated for the specific
	// healthcare services defined at this resource.
	Endpoint []*Reference `json:"endpoint"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The organization that provides this healthcare service.
	ProvidedBy *Reference `json:"providedBy"`
	// Ways that the service accepts referrals, if this is not provided then it is implied
	// that no referral is required.
	ReferralMethod []*CodeableConcept `json:"referralMethod"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// External identifiers for this item.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// The location(s) that this service is available to (not where the service is
	// provided).
	CoverageArea []*Reference `json:"coverageArea"`
	// A description of site availability exceptions, e.g. public holiday availability.
	// Succinctly describing all possible exceptions to normal site availability as details
	// in the available Times and not available Times.
	AvailabilityExceptions string `json:"availabilityExceptions"`
	// This flag is used to mark the record to not be used. This is not used when a center
	// is closed for maintenance, or for holidays, the notAvailable period is to be used
	// for this.
	Active bool `json:"active"`
	// Any additional description of the service and/or any specific issues not covered by
	// the other attributes, which can be displayed as further detail under the serviceName.
	Comment string `json:"comment"`
	// Some services are specifically made available in multiple languages, this property
	// permits a directory to declare the languages this is offered in. Typically this is
	// only provided where a service operates in communities with mixed languages used.
	Communication []*CodeableConcept `json:"communication"`
	// Extensions for appointmentRequired
	AppointmentRequired_ext *Element `json:"_appointmentRequired"`
	// A collection of times that the Service Site is available.
	AvailableTime []*HealthcareService_AvailableTime `json:"availableTime"`
	// Extensions for availabilityExceptions
	AvailabilityExceptions_ext *Element `json:"_availabilityExceptions"`
	// The specific type of service that may be delivered or performed.
	Type []*CodeableConcept `json:"type"`
	// Further description of the service as it would be presented to a consumer while
	// searching.
	Name string `json:"name"`
	// List of contacts related to this specific healthcare service.
	Telecom []*ContactPoint `json:"telecom"`
	// The code(s) that detail the conditions under which the healthcare service is
	// available/offered.
	ServiceProvisionCode []*CodeableConcept `json:"serviceProvisionCode"`
	// Indicates whether or not a prospective consumer will require an appointment for a
	// particular service at a site to be provided by the Organization. Indicates if an
	// appointment is required for access to this service.
	AppointmentRequired bool `json:"appointmentRequired"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// The location(s) where this healthcare service may be provided.
	Location []*Reference `json:"location"`
	// Extensions for extraDetails
	ExtraDetails_ext *Element `json:"_extraDetails"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Identifies the broad category of service being performed or delivered.
	Category []*CodeableConcept `json:"category"`
	// The HealthcareService is not available during this period of time due to the
	// provided reason.
	NotAvailable []*HealthcareService_NotAvailable `json:"notAvailable"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// If there is a photo/symbol associated with this HealthcareService, it may be
	// included here to facilitate quick identification of the service in a list.
	Photo *Attachment `json:"photo"`
}

func (t *HealthcareService) ResourceType() string {
	return "HealthcareService"
}
func (t *HealthcareService) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		HealthcareService
		ResourceType string `json:"resourceType"`
	}{
		HealthcareService: *t,
		ResourceType:      t.ResourceType(),
	})
}

// List is A list is a curated collection of resources.
type List struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Comments that apply to the overall list.
	Note []*Annotation `json:"note"`
	// If the list is empty, why the list is empty.
	EmptyReason *CodeableConcept `json:"emptyReason"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// What order applies to the items in the list.
	OrderedBy *CodeableConcept `json:"orderedBy"`
	// The date that the list was prepared.
	Date string `json:"date"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for mode
	Mode_ext *Element `json:"_mode"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// How this list was prepared - whether it is a working list that is suitable for being
	// maintained on an ongoing basis, or if it represents a snapshot of a list of items
	// from another source, or whether it is a prepared list where items may be marked as
	// added, modified or deleted.
	Mode ListMode `json:"mode"`
	// A label for the list assigned by the author.
	Title string `json:"title"`
	// The common subject (or patient) of the resources that are in the list if there is
	// one.
	Subject *Reference `json:"subject"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates the current state of this list.
	Status ListStatus `json:"status"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The encounter that is the context in which this list was created.
	Encounter *Reference `json:"encounter"`
	// The entity responsible for deciding what the contents of the list were. Where the
	// list was created by a human, this is the same as the author of the list.
	Source *Reference `json:"source"`
	// Entries in this list.
	Entry []*List_Entry `json:"entry"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Identifier for the List assigned for business purposes outside the context of FHIR.
	Identifier []*Identifier `json:"identifier"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// This code defines the purpose of the list - why it was created.
	Code *CodeableConcept `json:"code"`
}

func (t *List) ResourceType() string {
	return "List"
}
func (t *List) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		List
		ResourceType string `json:"resourceType"`
	}{
		List:         *t,
		ResourceType: t.ResourceType(),
	})
}

type ListMode string
type ListStatus string

const (
	ListModeWorking          ListMode   = "working"
	ListModeSnapshot         ListMode   = "snapshot"
	ListModeChanges          ListMode   = "changes"
	ListStatusCurrent        ListStatus = "current"
	ListStatusRetired        ListStatus = "retired"
	ListStatusEnteredInError ListStatus = "entered-in-error"
)

// EffectEvidenceSynthesis is The EffectEvidenceSynthesis resource describes the difference in an outcome between
// exposures states in a population where the effect estimate is derived from a
// combination of research studies.
type EffectEvidenceSynthesis struct {
	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate string `json:"lastReviewDate"`
	// A reference to a EvidenceVariable resomece that defines the outcome for the research.
	Outcome *Reference `json:"outcome,omitempty"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A free text natural language description of the effect evidence synthesis from a
	// consumer's perspective.
	Description string `json:"description"`
	// A copyright statement relating to the effect evidence synthesis and/or its contents.
	// Copyright statements are generally legal restrictions on the use and publishing of
	// the effect evidence synthesis.
	Copyright string `json:"copyright"`
	// A human-readable string to clarify or explain concepts about the resource.
	Note []*Annotation `json:"note"`
	// The period during which the effect evidence synthesis content was or is planned to
	// be in active use.
	EffectivePeriod *Period `json:"effectivePeriod"`
	// An individual or organization primarily responsible for internal coherence of the
	// content.
	Editor []*ContactDetail `json:"editor"`
	// The identifier that is used to identify this version of the effect evidence
	// synthesis when it is referenced in a specification, model, design or instance. This
	// is an arbitrary value managed by the effect evidence synthesis author and is not
	// expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd)
	// if a managed version is not available. There is also no expectation that versions
	// can be placed in a lexicographical sequence.
	Version string `json:"version"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// An individiual or organization primarily involved in the creation and maintenance of
	// the content.
	Author []*ContactDetail `json:"author"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []*ContactDetail `json:"contact"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// A formal identifier that is used to identify this effect evidence synthesis when it
	// is represented in other formats, or referenced in a specification, model, design or
	// an instance.
	Identifier []*Identifier `json:"identifier"`
	// The status of this effect evidence synthesis. Enables tracking the life-cycle of the
	// content.
	Status EffectEvidenceSynthesisStatus `json:"status"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// Descriptive topics related to the content of the EffectEvidenceSynthesis. Topics
	// provide a high-level categorization grouping types of EffectEvidenceSynthesiss that
	// can be useful for filtering and searching.
	Topic []*CodeableConcept `json:"topic"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for publisher
	Publisher_ext *Element `json:"_publisher"`
	// A reference to a EvidenceVariable resource that defines the exposure for the
	// research.
	Exposure *Reference `json:"exposure,omitempty"`
	// The date  (and optionally time) when the effect evidence synthesis was published.
	// The date must change when the business version changes and it must change if the
	// status code changes. In addition, it should change when the substantive content of
	// the effect evidence synthesis changes.
	Date string `json:"date"`
	// A legal or geographic region in which the effect evidence synthesis is intended to
	// be used.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A natural language name identifying the effect evidence synthesis. This name should
	// be usable as an identifier for the module by machine processing applications such as
	// code generation.
	Name string `json:"name"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Type of synthesis eg meta-analysis.
	SynthesisType *CodeableConcept `json:"synthesisType"`
	// A description of the certainty of the effect estimate.
	Certainty []*EffectEvidenceSynthesis_Certainty `json:"certainty"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// An absolute URI that is used to identify this effect evidence synthesis when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal address
	// at which at which an authoritative instance of this effect evidence synthesis is (or
	// will be) published. This URL can be the target of a canonical reference. It SHALL
	// remain the same when the effect evidence synthesis is stored on different servers.
	Url string `json:"url"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// The content was developed with a focus and intent of supporting the contexts that
	// are listed. These contexts may be general categories (gender, age, ...) or may be
	// references to specific programs (insurance plans, studies, ...) and may be used to
	// assist with indexing and searching for appropriate effect evidence synthesis
	// instances.
	UseContext []*UsageContext `json:"useContext"`
	// The date on which the resource content was approved by the publisher. Approval
	// happens once when the content is officially approved for usage.
	ApprovalDate string `json:"approvalDate"`
	// Extensions for lastReviewDate
	LastReviewDate_ext *Element `json:"_lastReviewDate"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for approvalDate
	ApprovalDate_ext *Element `json:"_approvalDate"`
	// An individual or organization primarily responsible for review of some aspect of the
	// content.
	Reviewer []*ContactDetail `json:"reviewer"`
	// An individual or organization responsible for officially endorsing the content for
	// use in some setting.
	Endorser []*ContactDetail `json:"endorser"`
	// The estimated effect of the exposure variant.
	EffectEstimate []*EffectEvidenceSynthesis_EffectEstimate `json:"effectEstimate"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// A reference to a EvidenceVariable resource that defines the population for the
	// research.
	Population *Reference `json:"population,omitempty"`
	// A description of the results for each exposure considered in the effect estimate.
	ResultsByExposure []*EffectEvidenceSynthesis_ResultsByExposure `json:"resultsByExposure"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The name of the organization or individual that published the effect evidence
	// synthesis.
	Publisher string `json:"publisher"`
	// Type of study eg randomized trial.
	StudyType *CodeableConcept `json:"studyType"`
	// A description of the size of the sample involved in the synthesis.
	SampleSize *EffectEvidenceSynthesis_SampleSize `json:"sampleSize"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A short, descriptive, user-friendly title for the effect evidence synthesis.
	Title string `json:"title"`
	// Related artifacts such as additional documentation, justification, or bibliographic
	// references.
	RelatedArtifact []*RelatedArtifact `json:"relatedArtifact"`
	// A reference to a EvidenceVariable resource that defines the comparison exposure for
	// the research.
	ExposureAlternative *Reference `json:"exposureAlternative,omitempty"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
}

func (t *EffectEvidenceSynthesis) ResourceType() string {
	return "EffectEvidenceSynthesis"
}
func (t *EffectEvidenceSynthesis) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		EffectEvidenceSynthesis
		ResourceType string `json:"resourceType"`
	}{
		EffectEvidenceSynthesis: *t,
		ResourceType:            t.ResourceType(),
	})
}

type EffectEvidenceSynthesisStatus string

const (
	EffectEvidenceSynthesisStatusDraft   EffectEvidenceSynthesisStatus = "draft"
	EffectEvidenceSynthesisStatusActive  EffectEvidenceSynthesisStatus = "active"
	EffectEvidenceSynthesisStatusRetired EffectEvidenceSynthesisStatus = "retired"
	EffectEvidenceSynthesisStatusUnknown EffectEvidenceSynthesisStatus = "unknown"
)

// EnrollmentResponse is This resource provides enrollment and plan details from the processing of an
// EnrollmentRequest resource.
type EnrollmentResponse struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for outcome
	Outcome_ext *Element `json:"_outcome"`
	// Extensions for disposition
	Disposition_ext *Element `json:"_disposition"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Original request resource reference.
	Request *Reference `json:"request"`
	// The date when the enclosed suite of services were performed or completed.
	Created string `json:"created"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The Response business identifier.
	Identifier []*Identifier `json:"identifier"`
	// Processing status: error, complete.
	Outcome EnrollmentResponseOutcome `json:"outcome"`
	// A description of the status of the adjudication.
	Disposition string `json:"disposition"`
	// Extensions for created
	Created_ext *Element `json:"_created"`
	// The practitioner who is responsible for the services rendered to the patient.
	RequestProvider *Reference `json:"requestProvider"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The status of the resource instance.
	Status string `json:"status"`
	// The Insurer who produced this adjudicated response.
	Organization *Reference `json:"organization"`
}

func (t *EnrollmentResponse) ResourceType() string {
	return "EnrollmentResponse"
}
func (t *EnrollmentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		EnrollmentResponse
		ResourceType string `json:"resourceType"`
	}{
		EnrollmentResponse: *t,
		ResourceType:       t.ResourceType(),
	})
}

type EnrollmentResponseOutcome string

const (
	EnrollmentResponseOutcomeQueued   EnrollmentResponseOutcome = "queued"
	EnrollmentResponseOutcomeComplete EnrollmentResponseOutcome = "complete"
	EnrollmentResponseOutcomeError    EnrollmentResponseOutcome = "error"
	EnrollmentResponseOutcomePartial  EnrollmentResponseOutcome = "partial"
)

// Invoice is Invoice containing collected ChargeItems from an Account with calculated individual
// and total price for Billing purpose.
type Invoice struct {
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Payment details such as banking details, period of payment, deductibles, methods of
	// payment.
	PaymentTerms string `json:"paymentTerms"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Date/time(s) of when this Invoice was posted.
	Date string `json:"date"`
	// Invoice total , taxes excluded.
	TotalNet *Money `json:"totalNet"`
	// Extensions for cancelledReason
	CancelledReason_ext *Element `json:"_cancelledReason"`
	// The individual or Organization responsible for balancing of this invoice.
	Recipient *Reference `json:"recipient"`
	// The organizationissuing the Invoice.
	Issuer *Reference `json:"issuer"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Account which is supposed to be balanced with this Invoice.
	Account *Reference `json:"account"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Type of Invoice depending on domain, realm an usage (e.g. internal/external, dental,
	// preliminary).
	Type *CodeableConcept `json:"type"`
	// Each line item represents one charge for goods and services rendered. Details such
	// as date, code and amount are found in the referenced ChargeItem resource.
	LineItem []*Invoice_LineItem `json:"lineItem"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// The individual or set of individuals receiving the goods and services billed in this
	// invoice.
	Subject *Reference `json:"subject"`
	// The total amount for the Invoice may be calculated as the sum of the line items with
	// surcharges/deductions that apply in certain conditions.  The priceComponent element
	// can be used to offer transparency to the recipient of the Invoice of how the total
	// price was calculated.
	TotalPriceComponent []*Invoice_PriceComponent `json:"totalPriceComponent"`
	// Identifier of this Invoice, often used for reference in correspondence about this
	// invoice or for tracking of payments.
	Identifier []*Identifier `json:"identifier"`
	// In case of Invoice cancellation a reason must be given (entered in error, superseded
	// by corrected invoice etc.).
	CancelledReason string `json:"cancelledReason"`
	// Indicates who or what performed or participated in the charged service.
	Participant []*Invoice_Participant `json:"participant"`
	// Invoice total, tax included.
	TotalGross *Money `json:"totalGross"`
	// The current state of the Invoice.
	Status InvoiceStatus `json:"status"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Extensions for paymentTerms
	PaymentTerms_ext *Element `json:"_paymentTerms"`
	// Comments made about the invoice by the issuer, subject, or other participants.
	Note []*Annotation `json:"note"`
}

func (t *Invoice) ResourceType() string {
	return "Invoice"
}
func (t *Invoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Invoice
		ResourceType string `json:"resourceType"`
	}{
		Invoice:      *t,
		ResourceType: t.ResourceType(),
	})
}

type InvoiceStatus string

const (
	InvoiceStatusDraft          InvoiceStatus = "draft"
	InvoiceStatusIssued         InvoiceStatus = "issued"
	InvoiceStatusBalanced       InvoiceStatus = "balanced"
	InvoiceStatusCancelled      InvoiceStatus = "cancelled"
	InvoiceStatusEnteredInError InvoiceStatus = "entered-in-error"
)

// DetectedIssue is Indicates an actual or potential clinical issue with or between one or more active
// or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective
// treatment frequency, Procedure-condition conflict, etc.
type DetectedIssue struct {
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Indicates the status of the detected issue.
	Status string `json:"status"`
	// Individual or device responsible for the issue being raised.  For example, a
	// decision support application or a pharmacist conducting a medication review.
	Author *Reference `json:"author"`
	// Extensions for detail
	Detail_ext *Element `json:"_detail"`
	// Extensions for identifiedDateTime
	IdentifiedDateTime_ext *Element `json:"_identifiedDateTime"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Indicates the degree of importance associated with the identified issue based on the
	// potential impact on the patient.
	Severity DetectedIssueSeverity `json:"severity"`
	// The date or period when the detected issue was initially identified.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	IdentifiedDateTime string `json:"identifiedDateTime"`
	// The date or period when the detected issue was initially identified.
	IdentifiedPeriod *Period `json:"identifiedPeriod"`
	// Supporting evidence or manifestations that provide the basis for identifying the
	// detected issue such as a GuidanceResponse or MeasureReport.
	Evidence []*DetectedIssue_Evidence `json:"evidence"`
	// The literature, knowledge-base or similar reference that describes the propensity
	// for the detected issue identified.
	Reference string `json:"reference"`
	// Extensions for reference
	Reference_ext *Element `json:"_reference"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Business identifier associated with the detected issue record.
	Identifier []*Identifier `json:"identifier"`
	// Indicates the resource representing the current activity or proposed activity that
	// is potentially problematic.
	Implicated []*Reference `json:"implicated"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// Extensions for severity
	Severity_ext *Element `json:"_severity"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A textual explanation of the detected issue.
	Detail string `json:"detail"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Indicates an action that has been taken or is committed to reduce or eliminate the
	// likelihood of the risk identified by the detected issue from manifesting.  Can also
	// reflect an observation of known mitigating factors that may reduce/eliminate the
	// need for any action.
	Mitigation []*DetectedIssue_Mitigation `json:"mitigation"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Identifies the general type of issue identified.
	Code *CodeableConcept `json:"code"`
	// Indicates the patient whose record the detected issue is associated with.
	Patient *Reference `json:"patient"`
}

func (t *DetectedIssue) ResourceType() string {
	return "DetectedIssue"
}
func (t *DetectedIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		DetectedIssue
		ResourceType string `json:"resourceType"`
	}{
		DetectedIssue: *t,
		ResourceType:  t.ResourceType(),
	})
}

type DetectedIssueSeverity string

const (
	DetectedIssueSeverityHigh     DetectedIssueSeverity = "high"
	DetectedIssueSeverityModerate DetectedIssueSeverity = "moderate"
	DetectedIssueSeverityLow      DetectedIssueSeverity = "low"
)

// Organization is A formally or informally recognized grouping of people or organizations formed for
// the purpose of achieving some form of collective action.  Includes companies,
// institutions, corporations, departments, community groups, healthcare practice
// groups, payer/insurer, etc.
type Organization struct {
	// Extensions for active
	Active_ext *Element `json:"_active"`
	// Contact for the organization for a certain purpose.
	Contact []*Organization_Contact `json:"contact"`
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifier for the organization that is used to identify the organization across
	// multiple disparate systems.
	Identifier []*Identifier `json:"identifier"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// A list of alternate names that the organization is known as, or was known as in the
	// past.
	Alias []string `json:"alias"`
	// Extensions for alias
	Alias_ext []*Element `json:"_alias"`
	// An address for the organization.
	Address []*Address `json:"address"`
	// The organization of which this organization forms a part.
	PartOf *Reference `json:"partOf"`
	// Technical endpoints providing access to services operated for the organization.
	Endpoint []*Reference `json:"endpoint"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Whether the organization's record is still in active use.
	Active bool `json:"active"`
	// The kind(s) of organization that this is.
	Type []*CodeableConcept `json:"type"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// A name associated with the organization.
	Name string `json:"name"`
	// A contact detail for the organization.
	Telecom []*ContactPoint `json:"telecom"`
}

func (t *Organization) ResourceType() string {
	return "Organization"
}
func (t *Organization) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Organization
		ResourceType string `json:"resourceType"`
	}{
		Organization: *t,
		ResourceType: t.ResourceType(),
	})
}

// RelatedPerson is Information about a person that is involved in the care for a patient, but who is
// not the target of healthcare, nor has a formal responsibility in the care process.
type RelatedPerson struct {
	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with version
	// changes to the resource.
	Meta *Meta `json:"meta"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The nature of the relationship between a patient and the related person.
	Relationship []*CodeableConcept `json:"relationship"`
	// Extensions for gender
	Gender_ext *Element `json:"_gender"`
	// Address where the related person can be contacted or visited.
	Address []*Address `json:"address"`
	// The logical id of the resource, as used in the URL for the resource. Once assigned,
	// this value never changes.
	Id string `json:"id"`
	// Extensions for implicitRules
	ImplicitRules_ext *Element `json:"_implicitRules"`
	// The base language in which the resource is written.
	Language string `json:"language"`
	// Administrative Gender - the gender that the person is considered to have for
	// administration and record keeping purposes.
	Gender RelatedPersonGender `json:"gender"`
	// The date on which the related person was born.
	BirthDate string `json:"birthDate"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// These resources do not have an independent existence apart from the resource that
	// contains them - they cannot be identified independently, and nor can they have their
	// own independent transaction scope.
	Contained []*ResourceList `json:"contained"`
	// Identifier for a person within a particular scope.
	Identifier []*Identifier `json:"identifier"`
	// Whether this related person record is in active use.
	Active bool `json:"active"`
	// Extensions for active
	Active_ext *Element `json:"_active"`
	// A name associated with the person.
	Name []*HumanName `json:"name"`
	// A contact detail for the person, e.g. a telephone number or an email address.
	Telecom []*ContactPoint `json:"telecom"`
	// Image of the person.
	Photo []*Attachment `json:"photo"`
	// The period of time during which this relationship is or was active. If there are no
	// dates defined, then the interval is unknown.
	Period *Period `json:"period"`
	// A reference to a set of rules that were followed when the resource was constructed,
	// and which must be understood when processing the content. Often, this is a reference
	// to an implementation guide that defines the special rules along with other profiles
	// etc.
	ImplicitRules string `json:"implicitRules"`
	// A human-readable narrative that contains a summary of the resource and can be used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative. Resource definitions may
	// define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the resource and that modifies the understanding of the element that
	// contains it and/or the understanding of the containing element's descendants.
	// Usually modifier elements provide negation or qualification. To make the use of
	// extensions safe and manageable, there is a strict set of governance applied to the
	// definition and use of extensions. Though any implementer is allowed to define an
	// extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The patient this person is related to.
	Patient *Reference `json:"patient,omitempty"`
	// Extensions for birthDate
	BirthDate_ext *Element `json:"_birthDate"`
	// A language which may be used to communicate with about the patient's health.
	Communication []*RelatedPerson_Communication `json:"communication"`
}

func (t *RelatedPerson) ResourceType() string {
	return "RelatedPerson"
}
func (t *RelatedPerson) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		RelatedPerson
		ResourceType string `json:"resourceType"`
	}{
		RelatedPerson: *t,
		ResourceType:  t.ResourceType(),
	})
}

type RelatedPersonGender string

const (
	RelatedPersonGenderMale    RelatedPersonGender = "male"
	RelatedPersonGenderFemale  RelatedPersonGender = "female"
	RelatedPersonGenderOther   RelatedPersonGender = "other"
	RelatedPersonGenderUnknown RelatedPersonGender = "unknown"
)

// ActivityDefinition_Participant is This resource allows for the definition of some activity to be performed,
// independent of a particular patient, practitioner, or other performance context.
type ActivityDefinition_Participant struct {
	// The type of participant in the action.
	Type string `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// The role the participant should play in performing the described action.
	Role *CodeableConcept `json:"role"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// Contract_ContentDefinition is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract_ContentDefinition struct {
	// The  individual or organization that published the Contract precursor content.
	Publisher *Reference `json:"publisher"`
	// Extensions for publicationDate
	PublicationDate_ext *Element `json:"_publicationDate"`
	// draft | active | retired | unknown.
	PublicationStatus string `json:"publicationStatus"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Precusory content structure and use, i.e., a boilerplate, template, application for
	// a contract such as an insurance policy or benefits under a program, e.g., workers
	// compensation.
	Type *CodeableConcept `json:"type,omitempty"`
	// Detailed Precusory content type.
	SubType *CodeableConcept `json:"subType"`
	// Extensions for copyright
	Copyright_ext *Element `json:"_copyright"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The date (and optionally time) when the contract was published. The date must change
	// when the business version changes and it must change if the status code changes. In
	// addition, it should change when the substantive content of the contract changes.
	PublicationDate string `json:"publicationDate"`
	// Extensions for publicationStatus
	PublicationStatus_ext *Element `json:"_publicationStatus"`
	// A copyright statement relating to Contract precursor content. Copyright statements
	// are generally legal restrictions on the use and publishing of the Contract precursor
	// content.
	Copyright string `json:"copyright"`
}

// CoverageEligibilityRequest_Item is The CoverageEligibilityRequest provides patient and insurance coverage information
// to an insurer for them to respond, in the form of an CoverageEligibilityResponse,
// with information regarding whether the stated coverage is valid and in-force and
// optionally to provide the insurance details of the policy.
type CoverageEligibilityRequest_Item struct {
	// The amount charged to the patient by the provider for a single unit.
	UnitPrice *Money `json:"unitPrice"`
	// Facility where the services will be provided.
	Facility *Reference `json:"facility"`
	// Item typification or modifiers codes to convey additional context for the product or
	// service.
	Modifier []*CodeableConcept `json:"modifier"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Code to identify the general type of benefits under which products and services are
	// provided.
	Category *CodeableConcept `json:"category"`
	// This contains the product, service, drug or other billing code for the item.
	ProductOrService *CodeableConcept `json:"productOrService"`
	// The practitioner who is responsible for the product or service to be rendered to the
	// patient.
	Provider *Reference `json:"provider"`
	// Patient diagnosis for which care is sought.
	Diagnosis []*CoverageEligibilityRequest_Diagnosis `json:"diagnosis"`
	// The plan/proposal/order describing the proposed service in detail.
	Detail []*Reference `json:"detail"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Exceptions, special conditions and supporting information applicable for this
	// service or product line.
	SupportingInfoSequence []uint64 `json:"supportingInfoSequence"`
	// Extensions for supportingInfoSequence
	SupportingInfoSequence_ext []*Element `json:"_supportingInfoSequence"`
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity"`
}

// DocumentManifest_Related is A collection of documents compiled for a purpose together with metadata that applies
// to the collection.
type DocumentManifest_Related struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Related identifier to this DocumentManifest.  For example, Order numbers, accession
	// numbers, XDW workflow numbers.
	Identifier *Identifier `json:"identifier"`
	// Related Resource to this DocumentManifest. For example, Order, ServiceRequest,
	// Procedure, EligibilityRequest, etc.
	Ref *Reference `json:"ref"`
}

// Contract_Subject is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract_Subject struct {
	// The entity the action is performed or not performed on or for.
	Reference []*Reference `json:"reference,omitempty"`
	// Role type of agent assigned roles in this Contract.
	Role *CodeableConcept `json:"role"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// PaymentReconciliation_ProcessNote is This resource provides the details including amount of a payment and allocates the
// payment items being paid.
type PaymentReconciliation_ProcessNote struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The business purpose of the note text.
	Type PaymentReconciliation_ProcessNoteType `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// The explanation or description associated with the processing.
	Text string `json:"text"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
}

type PaymentReconciliation_ProcessNoteType string

const (
	PaymentReconciliation_ProcessNoteTypeDisplay   PaymentReconciliation_ProcessNoteType = "display"
	PaymentReconciliation_ProcessNoteTypePrint     PaymentReconciliation_ProcessNoteType = "print"
	PaymentReconciliation_ProcessNoteTypePrintoper PaymentReconciliation_ProcessNoteType = "printoper"
)

// TestScript_Setup is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_Setup struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Action would contain either an operation or an assertion.
	Action []*TestScript_Action `json:"action,omitempty"`
}

// Provenance_Agent is Provenance of a resource is a record that describes entities and processes involved
// in producing and delivering or otherwise influencing that resource. Provenance
// provides a critical foundation for assessing authenticity, enabling trust, and
// allowing reproducibility. Provenance assertions are a form of contextual metadata
// and can themselves become important records with their own provenance. Provenance
// statement indicates clinical significance in terms of confidence in authenticity,
// reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document
// Completion - has the artifact been legally authenticated), all of which may impact
// security, privacy, and trust policies.
type Provenance_Agent struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The participation the agent had with respect to the activity.
	Type *CodeableConcept `json:"type"`
	// The function of the agent with respect to the activity. The security role enabling
	// the agent with respect to the activity.
	Role []*CodeableConcept `json:"role"`
	// The individual, device or organization that participated in the event.
	Who *Reference `json:"who,omitempty"`
	// The individual, device, or organization for whom the change was made.
	OnBehalfOf *Reference `json:"onBehalfOf"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// SpecimenDefinition_Handling is A kind of specimen with associated set of requirements.
type SpecimenDefinition_Handling struct {
	// It qualifies the interval of temperature, which characterizes an occurrence of
	// handling. Conditions that are not related to temperature may be handled in the
	// instruction element.
	TemperatureQualifier *CodeableConcept `json:"temperatureQualifier"`
	// The temperature interval for this set of handling instructions.
	TemperatureRange *Range `json:"temperatureRange"`
	// The maximum time interval of preservation of the specimen with these conditions.
	MaxDuration *Duration `json:"maxDuration"`
	// Additional textual instructions for the preservation or transport of the specimen.
	// For instance, 'Protect from light exposure'.
	Instruction string `json:"instruction"`
	// Extensions for instruction
	Instruction_ext *Element `json:"_instruction"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// SupplyDelivery_SuppliedItem is Record of delivery of what is supplied.
type SupplyDelivery_SuppliedItem struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The amount of supply that has been dispensed. Includes unit of measure.
	Quantity *Quantity `json:"quantity"`
	// Identifies the medication, substance or device being dispensed. This is either a
	// link to a resource representing the details of the item or a code that identifies
	// the item from a known list.
	ItemCodeableConcept *CodeableConcept `json:"itemCodeableConcept"`
	// Identifies the medication, substance or device being dispensed. This is either a
	// link to a resource representing the details of the item or a code that identifies
	// the item from a known list.
	ItemReference *Reference `json:"itemReference"`
}

// Contributor is A contributor to the content of a knowledge asset, including authors, editors,
// reviewers, and endorsers.
type Contributor struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The type of contributor.
	Type ContributorType `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// The name of the individual or organization responsible for the contribution.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Contact details to assist a user in finding and communicating with the contributor.
	Contact []*ContactDetail `json:"contact"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

type ContributorType string

const (
	ContributorTypeAuthor   ContributorType = "author"
	ContributorTypeEditor   ContributorType = "editor"
	ContributorTypeReviewer ContributorType = "reviewer"
	ContributorTypeEndorser ContributorType = "endorser"
)

// Composition_RelatesTo is A set of healthcare-related information that is assembled together into a single
// logical package that provides a single coherent statement of meaning, establishes
// its own context and that has clinical attestation with regard to who is making the
// statement. A Composition defines the structure and narrative content necessary for a
// document. However, a Composition alone does not constitute a document. Rather, the
// Composition must be the first entry in a Bundle where Bundle.type=document, and any
// other resources referenced from Composition must be included as subsequent entries
// in the Bundle (for example Patient, Practitioner, Encounter, etc.).
type Composition_RelatesTo struct {
	// The target composition/document of this relationship.
	TargetIdentifier *Identifier `json:"targetIdentifier"`
	// The target composition/document of this relationship.
	TargetReference *Reference `json:"targetReference"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of relationship that this composition has with anther composition or
	// document.
	Code string `json:"code"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
}

// Immunization_Performer is Describes the event of a patient being administered a vaccine or a record of an
// immunization as reported by a patient, a clinician or another party.
type Immunization_Performer struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Describes the type of performance (e.g. ordering provider, administering provider,
	// etc.).
	Function *CodeableConcept `json:"function"`
	// The practitioner or organization who performed the action.
	Actor *Reference `json:"actor,omitempty"`
}

// MedicationKnowledge_Dosage is Information about a medication that is used to support knowledge.
type MedicationKnowledge_Dosage struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of dosage (for example, prophylaxis, maintenance, therapeutic, etc.).
	Type *CodeableConcept `json:"type,omitempty"`
	// Dosage for the medication for the specific guidelines.
	Dosage []*Dosage `json:"dosage,omitempty"`
}

// TestScript_Action is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_Action struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The operation to perform.
	Operation *TestScript_Operation `json:"operation"`
	// Evaluates the results of previous operations to determine if the server under test
	// behaves appropriately.
	Assert *TestScript_Assert `json:"assert"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// ValueSet_Filter is A ValueSet resource instance specifies a set of codes drawn from one or more code
// systems, intended for use in a particular context. Value sets link between
// [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
type ValueSet_Filter struct {
	// The kind of operation to perform as a part of the filter criteria.
	Op ValueSet_FilterOp `json:"op"`
	// Extensions for op
	Op_ext *Element `json:"_op"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A code that identifies a property or a filter defined in the code system.
	Property string `json:"property"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for property
	Property_ext *Element `json:"_property"`
	// The match value may be either a code defined by the system, or a string value, which
	// is a regex match on the literal string of the property value  (if the filter
	// represents a property defined in CodeSystem) or of the system filter value (if the
	// filter represents a filter defined in CodeSystem) when the operation is 'regex', or
	// one of the values (true and false), when the operation is 'exists'.
	Value string `json:"value"`
}

type ValueSet_FilterOp string

const (
	ValueSet_FilterOpEq           ValueSet_FilterOp = "="
	ValueSet_FilterOpIsA          ValueSet_FilterOp = "is-a"
	ValueSet_FilterOpDescendentOf ValueSet_FilterOp = "descendent-of"
	ValueSet_FilterOpIsNotA       ValueSet_FilterOp = "is-not-a"
	ValueSet_FilterOpRegex        ValueSet_FilterOp = "regex"
	ValueSet_FilterOpIn           ValueSet_FilterOp = "in"
	ValueSet_FilterOpNotIn        ValueSet_FilterOp = "not-in"
	ValueSet_FilterOpGeneralizes  ValueSet_FilterOp = "generalizes"
	ValueSet_FilterOpExists       ValueSet_FilterOp = "exists"
)

// TestScript_Link is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_Link struct {
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Short description of the link.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// URL to a particular requirement or feature within the FHIR specification.
	Url string `json:"url"`
}

// AllergyIntolerance_Reaction is Risk of harmful or undesirable, physiological response which is unique to an
// individual and associated with exposure to a substance.
type AllergyIntolerance_Reaction struct {
	// Extensions for severity
	Severity_ext *Element `json:"_severity"`
	// Additional text about the adverse reaction event not captured in other fields.
	Note []*Annotation `json:"note"`
	// Clinical symptoms and/or signs that are observed or associated with the adverse
	// reaction event.
	Manifestation []*CodeableConcept `json:"manifestation,omitempty"`
	// Text description about the reaction as a whole, including details of the
	// manifestation if required.
	Description string `json:"description"`
	// Record of the date and/or time of the onset of the Reaction.
	Onset string `json:"onset"`
	// Identification of the specific substance (or pharmaceutical product) considered to
	// be responsible for the Adverse Reaction event. Note: the substance for a specific
	// reaction may be different from the substance identified as the cause of the risk,
	// but it must be consistent with it. For instance, it may be a more specific substance
	// (e.g. a brand medication) or a composite product that includes the identified
	// substance. It must be clinically safe to only process the 'code' and ignore the
	// 'reaction.substance'.  If a receiving system is unable to confirm that
	// AllergyIntolerance.reaction.substance falls within the semantic scope of
	// AllergyIntolerance.code, then the receiving system should ignore
	// AllergyIntolerance.reaction.substance.
	Substance *CodeableConcept `json:"substance"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for onset
	Onset_ext *Element `json:"_onset"`
	// Clinical assessment of the severity of the reaction event as a whole, potentially
	// considering multiple different manifestations.
	Severity AllergyIntolerance_ReactionSeverity `json:"severity"`
	// Identification of the route by which the subject was exposed to the substance.
	ExposureRoute *CodeableConcept `json:"exposureRoute"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

type AllergyIntolerance_ReactionSeverity string

const (
	AllergyIntolerance_ReactionSeverityMild     AllergyIntolerance_ReactionSeverity = "mild"
	AllergyIntolerance_ReactionSeverityModerate AllergyIntolerance_ReactionSeverity = "moderate"
	AllergyIntolerance_ReactionSeveritySevere   AllergyIntolerance_ReactionSeverity = "severe"
)

// ClaimResponse_Total is This resource provides the adjudication details from the processing of a Claim
// resource.
type ClaimResponse_Total struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A code to indicate the information type of this adjudication record. Information
	// types may include: the value submitted, maximum values or percentages allowed or
	// payable under the plan, amounts that the patient is responsible for in aggregate or
	// pertaining to this item, amounts paid by other coverages, and the benefit payable
	// for this item.
	Category *CodeableConcept `json:"category,omitempty"`
	// Monetary total amount associated with the category.
	Amount *Money `json:"amount,omitempty"`
}

// Consent_Actor is A record of a healthcare consumer’s  choices, which permits or denies identified
// recipient(s) or recipient role(s) to perform one or more actions within a given
// policy context, for specific purposes and periods of time.
type Consent_Actor struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// How the individual is involved in the resources content that is described in the
	// exception.
	Role *CodeableConcept `json:"role,omitempty"`
	// The resource that identifies the actor. To identify actors by type, use group to
	// identify a set of actors by some property they share (e.g. 'admitting officers').
	Reference *Reference `json:"reference,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// ImagingStudy_Series is Representation of the content produced in a DICOM imaging study. A study comprises a
// set of series, each of which includes a set of Service-Object Pair Instances (SOP
// Instances - images or other data) acquired or produced in a common context.  A
// series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may
// have multiple series of different modalities.
type ImagingStudy_Series struct {
	// Extensions for started
	Started_ext *Element `json:"_started"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for uid
	Uid_ext *Element `json:"_uid"`
	// The numeric identifier of this series in the study.
	Number uint64 `json:"number"`
	// Extensions for number
	Number_ext *Element `json:"_number"`
	// A description of the series.
	Description string `json:"description"`
	// The date and time the series was started.
	Started string `json:"started"`
	// The modality of this series sequence.
	Modality *Coding `json:"modality,omitempty"`
	// Number of SOP Instances in the Study. The value given may be larger than the number
	// of instance elements this resource contains due to resource availability, security,
	// or other factors. This element should be present if any instance elements are
	// present.
	NumberOfInstances uint64 `json:"numberOfInstances"`
	// The network service providing access (e.g., query, view, or retrieval) for this
	// series. See implementation notes for information about using DICOM endpoints. A
	// series-level endpoint, if present, has precedence over a study-level endpoint with
	// the same Endpoint.connectionType.
	Endpoint []*Reference `json:"endpoint"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The anatomic structures examined. See DICOM Part 16 Annex L
	// (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for
	// DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part
	// imaged; if so, it shall be consistent with any content of
	// ImagingStudy.series.laterality.
	BodySite *Coding `json:"bodySite"`
	// The laterality of the (possibly paired) anatomic structures examined. E.g., the left
	// knee, both lungs, or unpaired abdomen. If present, shall be consistent with any
	// laterality information indicated in ImagingStudy.series.bodySite.
	Laterality *Coding `json:"laterality"`
	// The DICOM Series Instance UID for the series.
	Uid string `json:"uid"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for numberOfInstances
	NumberOfInstances_ext *Element `json:"_numberOfInstances"`
	// The specimen imaged, e.g., for whole slide imaging of a biopsy.
	Specimen []*Reference `json:"specimen"`
	// Indicates who or what performed the series and how they were involved.
	Performer []*ImagingStudy_Performer `json:"performer"`
	// A single SOP instance within the series, e.g. an image, or presentation state.
	Instance []*ImagingStudy_Instance `json:"instance"`
}

// TestScript_Capability is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_Capability struct {
	// Whether or not the test execution will require the given capabilities of the server
	// in order for this test script to execute.
	Required bool `json:"required"`
	// Whether or not the test execution will validate the given capabilities of the server
	// in order for this test script to execute.
	Validated bool `json:"validated"`
	// Links to the FHIR specification that describes this interaction and the resources
	// involved in more detail.
	Link []string `json:"link"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Description of the capabilities that this test script is requiring the server to
	// support.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Which origin server these requirements apply to.
	Origin []int64 `json:"origin"`
	// Extensions for validated
	Validated_ext *Element `json:"_validated"`
	// Extensions for link
	Link_ext []*Element `json:"_link"`
	// Extensions for destination
	Destination_ext *Element `json:"_destination"`
	// Minimum capabilities required of server for test script to execute successfully.
	// If server does not meet at a minimum the referenced capability statement, then all
	// tests in this script are skipped.
	Capabilities string `json:"capabilities,omitempty"`
	// Extensions for required
	Required_ext *Element `json:"_required"`
	// Extensions for origin
	Origin_ext []*Element `json:"_origin"`
	// Which server these requirements apply to.
	Destination int64 `json:"destination"`
}

// Contract_Answer is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract_Answer struct {
	// Response to an offer clause or question text,  which enables selection of values to
	// be agreed to, e.g., the period of participation, the date of occupancy of a rental,
	// warrently duration, or whether biospecimen may be used for further research.
	ValueReference *Reference `json:"valueReference"`
	// Extensions for valueInteger
	ValueInteger_ext *Element `json:"_valueInteger"`
	// Response to an offer clause or question text,  which enables selection of values to
	// be agreed to, e.g., the period of participation, the date of occupancy of a rental,
	// warrently duration, or whether biospecimen may be used for further research.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	ValueTime string `json:"valueTime"`
	// Extensions for valueUri
	ValueUri_ext *Element `json:"_valueUri"`
	// Response to an offer clause or question text,  which enables selection of values to
	// be agreed to, e.g., the period of participation, the date of occupancy of a rental,
	// warrently duration, or whether biospecimen may be used for further research.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// Response to an offer clause or question text,  which enables selection of values to
	// be agreed to, e.g., the period of participation, the date of occupancy of a rental,
	// warrently duration, or whether biospecimen may be used for further research.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	ValueDecimal float64 `json:"valueDecimal"`
	// Response to an offer clause or question text,  which enables selection of values to
	// be agreed to, e.g., the period of participation, the date of occupancy of a rental,
	// warrently duration, or whether biospecimen may be used for further research.
	// pattern ^-?([0]|([1-9][0-9]*))$
	ValueInteger int64 `json:"valueInteger"`
	// Response to an offer clause or question text,  which enables selection of values to
	// be agreed to, e.g., the period of participation, the date of occupancy of a rental,
	// warrently duration, or whether biospecimen may be used for further research.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	ValueDateTime string `json:"valueDateTime"`
	// Extensions for valueTime
	ValueTime_ext *Element `json:"_valueTime"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Response to an offer clause or question text,  which enables selection of values to
	// be agreed to, e.g., the period of participation, the date of occupancy of a rental,
	// warrently duration, or whether biospecimen may be used for further research.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// Response to an offer clause or question text,  which enables selection of values to
	// be agreed to, e.g., the period of participation, the date of occupancy of a rental,
	// warrently duration, or whether biospecimen may be used for further research.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// Response to an offer clause or question text,  which enables selection of values to
	// be agreed to, e.g., the period of participation, the date of occupancy of a rental,
	// warrently duration, or whether biospecimen may be used for further research.
	ValueAttachment *Attachment `json:"valueAttachment"`
	// Response to an offer clause or question text,  which enables selection of values to
	// be agreed to, e.g., the period of participation, the date of occupancy of a rental,
	// warrently duration, or whether biospecimen may be used for further research.
	// pattern ^\S*$
	ValueUri string `json:"valueUri"`
	// Extensions for valueDecimal
	ValueDecimal_ext *Element `json:"_valueDecimal"`
	// Extensions for valueDate
	ValueDate_ext *Element `json:"_valueDate"`
	// Extensions for valueDateTime
	ValueDateTime_ext *Element `json:"_valueDateTime"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Response to an offer clause or question text,  which enables selection of values to
	// be agreed to, e.g., the period of participation, the date of occupancy of a rental,
	// warrently duration, or whether biospecimen may be used for further research.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	ValueDate string `json:"valueDate"`
	// Response to an offer clause or question text,  which enables selection of values to
	// be agreed to, e.g., the period of participation, the date of occupancy of a rental,
	// warrently duration, or whether biospecimen may be used for further research.
	ValueCoding *Coding `json:"valueCoding"`
}

// Encounter_Diagnosis is An interaction between a patient and healthcare provider(s) for the purpose of
// providing healthcare service(s) or assessing the health status of a patient.
type Encounter_Diagnosis struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Reason the encounter takes place, as specified using information from another
	// resource. For admissions, this is the admission diagnosis. The indication will
	// typically be a Condition (with other resources referenced in the evidence.detail),
	// or a Procedure.
	Condition *Reference `json:"condition,omitempty"`
	// Role that this diagnosis has within the encounter (e.g. admission, billing,
	// discharge …).
	Use *CodeableConcept `json:"use"`
	// Ranking of the diagnosis (for each role type).
	Rank uint64 `json:"rank"`
	// Extensions for rank
	Rank_ext *Element `json:"_rank"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// ImplementationGuide_Grouping is A set of rules of how a particular interoperability or standards problem is solved -
// typically through the use of FHIR resources. This resource is used to gather all the
// parts of an implementation guide into a logical whole and to publish a computable
// definition of all the parts.
type ImplementationGuide_Grouping struct {
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Human readable text describing the package.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The human-readable title to display for the package of resources when rendering the
	// implementation guide.
	Name string `json:"name"`
}

// MedicinalProductPackaged_PackageItem is A medicinal product in a container or package.
type MedicinalProductPackaged_PackageItem struct {
	// Allows containers within containers.
	PackageItem []*MedicinalProductPackaged_PackageItem `json:"packageItem"`
	// Dimensions, color etc.
	PhysicalCharacteristics *ProdCharacteristic `json:"physicalCharacteristics"`
	// Material type of the package item.
	Material []*CodeableConcept `json:"material"`
	// The manufactured item as contained in the packaged medicinal product.
	ManufacturedItem []*Reference `json:"manufacturedItem"`
	// Other codeable characteristics.
	OtherCharacteristics []*CodeableConcept `json:"otherCharacteristics"`
	// Shelf Life and storage information.
	ShelfLifeStorage []*ProductShelfLife `json:"shelfLifeStorage"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The physical type of the container of the medicine.
	Type *CodeableConcept `json:"type,omitempty"`
	// Manufacturer of this Package Item.
	Manufacturer []*Reference `json:"manufacturer"`
	// Including possibly Data Carrier Identifier.
	Identifier []*Identifier `json:"identifier"`
	// The quantity of this package in the medicinal product, at the current level of
	// packaging. The outermost is always 1.
	Quantity *Quantity `json:"quantity,omitempty"`
	// A possible alternate material for the packaging.
	AlternateMaterial []*CodeableConcept `json:"alternateMaterial"`
	// A device accompanying a medicinal product.
	Device []*Reference `json:"device"`
}

// SubstancePolymer_RepeatUnit is Todo.
type SubstancePolymer_RepeatUnit struct {
	// Todo.
	DegreeOfPolymerisation []*SubstancePolymer_DegreeOfPolymerisation `json:"degreeOfPolymerisation"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Todo.
	RepeatUnit string `json:"repeatUnit"`
	// Extensions for repeatUnit
	RepeatUnit_ext *Element `json:"_repeatUnit"`
	// Todo.
	Amount *SubstanceAmount `json:"amount"`
	// Todo.
	StructuralRepresentation []*SubstancePolymer_StructuralRepresentation `json:"structuralRepresentation"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Todo.
	OrientationOfPolymerisation *CodeableConcept `json:"orientationOfPolymerisation"`
}

// ImagingStudy_Performer is Representation of the content produced in a DICOM imaging study. A study comprises a
// set of series, each of which includes a set of Service-Object Pair Instances (SOP
// Instances - images or other data) acquired or produced in a common context.  A
// series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may
// have multiple series of different modalities.
type ImagingStudy_Performer struct {
	// Indicates who or what performed the series.
	Actor *Reference `json:"actor,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Distinguishes the type of involvement of the performer in the series.
	Function *CodeableConcept `json:"function"`
}

// MeasureReport_Stratifier is The MeasureReport resource contains the results of the calculation of a measure; and
// optionally a reference to the resources involved in that calculation.
type MeasureReport_Stratifier struct {
	// The meaning of this stratifier, as defined in the measure definition.
	Code []*CodeableConcept `json:"code"`
	// This element contains the results for a single stratum within the stratifier. For
	// example, when stratifying on administrative gender, there will be four strata, one
	// for each possible gender value.
	Stratum []*MeasureReport_Stratum `json:"stratum"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// ActivityDefinition_DynamicValue is This resource allows for the definition of some activity to be performed,
// independent of a particular patient, practitioner, or other performance context.
type ActivityDefinition_DynamicValue struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The path to the element to be customized. This is the path on the resource that will
	// hold the result of the calculation defined by the expression. The specified path
	// SHALL be a FHIRPath resolveable on the specified target type of the
	// ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a
	// restricted subset of functions. The path is allowed to contain qualifiers (.) to
	// traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality
	// sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full
	// details).
	Path string `json:"path"`
	// Extensions for path
	Path_ext *Element `json:"_path"`
	// An expression specifying the value of the customized element.
	Expression *Expression `json:"expression,omitempty"`
}

// MedicationRequest_InitialFill is An order or request for both supply of the medication and the instructions for
// administration of the medication to a patient. The resource is called
// "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to
// generalize the use across inpatient and outpatient settings, including care plans,
// etc., and to harmonize with workflow patterns.
type MedicationRequest_InitialFill struct {
	// The length of time that the first dispense is expected to last.
	Duration *Duration `json:"duration"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The amount or quantity to provide as part of the first dispense.
	Quantity *Quantity `json:"quantity"`
}

// Specimen_Collection is A sample to be used for analysis.
type Specimen_Collection struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Time when specimen was collected from subject - the physiologically relevant time.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	CollectedDateTime string `json:"collectedDateTime"`
	// The quantity of specimen collected; for instance the volume of a blood sample, or
	// the physical measurement of an anatomic pathology sample.
	Quantity *Quantity `json:"quantity"`
	// Anatomical location from which the specimen was collected (if subject is a patient).
	// This is the target site.  This element is not used for environmental specimens.
	BodySite *CodeableConcept `json:"bodySite"`
	// Abstinence or reduction from some or all food, drink, or both, for a period of time
	// prior to sample collection.
	FastingStatusCodeableConcept *CodeableConcept `json:"fastingStatusCodeableConcept"`
	// The span of time over which the collection of a specimen occurred.
	Duration *Duration `json:"duration"`
	// A coded value specifying the technique that is used to perform the procedure.
	Method *CodeableConcept `json:"method"`
	// Abstinence or reduction from some or all food, drink, or both, for a period of time
	// prior to sample collection.
	FastingStatusDuration *Duration `json:"fastingStatusDuration"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Person who collected the specimen.
	Collector *Reference `json:"collector"`
	// Extensions for collectedDateTime
	CollectedDateTime_ext *Element `json:"_collectedDateTime"`
	// Time when specimen was collected from subject - the physiologically relevant time.
	CollectedPeriod *Period `json:"collectedPeriod"`
}

// ElementDefinition_Binding is Captures constraints on each element within the resource, profile, or extension.
type ElementDefinition_Binding struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates the degree of conformance expectations associated with this binding - that
	// is, the degree to which the provided value set must be adhered to in the instances.
	Strength ElementDefinition_BindingStrength `json:"strength"`
	// Extensions for strength
	Strength_ext *Element `json:"_strength"`
	// Describes the intended use of this particular set of codes.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Refers to the value set that identifies the set of codes the binding refers to.
	ValueSet string `json:"valueSet"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

type ElementDefinition_BindingStrength string

const (
	ElementDefinition_BindingStrengthRequired   ElementDefinition_BindingStrength = "required"
	ElementDefinition_BindingStrengthExtensible ElementDefinition_BindingStrength = "extensible"
	ElementDefinition_BindingStrengthPreferred  ElementDefinition_BindingStrength = "preferred"
	ElementDefinition_BindingStrengthExample    ElementDefinition_BindingStrength = "example"
)

// Bundle_Request is A container for a collection of resources.
type Bundle_Request struct {
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Only perform the operation if the last updated date matches. See the API
	// documentation for ["Conditional Read"](http.html#cread).
	IfModifiedSince string `json:"ifModifiedSince"`
	// Instruct the server not to perform the create if a specified resource already
	// exists. For further information, see the API documentation for ["Conditional
	// Create"](http.html#ccreate). This is just the query portion of the URL - what
	// follows the "?" (not including the "?").
	IfNoneExist string `json:"ifNoneExist"`
	// In a transaction or batch, this is the HTTP action to be executed for this entry. In
	// a history bundle, this indicates the HTTP action that occurred.
	Method Bundle_RequestMethod `json:"method"`
	// If the ETag values match, return a 304 Not Modified status. See the API
	// documentation for ["Conditional Read"](http.html#cread).
	IfNoneMatch string `json:"ifNoneMatch"`
	// Extensions for ifNoneMatch
	IfNoneMatch_ext *Element `json:"_ifNoneMatch"`
	// Extensions for ifNoneExist
	IfNoneExist_ext *Element `json:"_ifNoneExist"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The URL for this entry, relative to the root (the address to which the request is
	// posted).
	Url string `json:"url"`
	// Only perform the operation if the Etag value matches. For more information, see the
	// API section ["Managing Resource Contention"](http.html#concurrency).
	IfMatch string `json:"ifMatch"`
	// Extensions for ifMatch
	IfMatch_ext *Element `json:"_ifMatch"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for method
	Method_ext *Element `json:"_method"`
	// Extensions for ifModifiedSince
	IfModifiedSince_ext *Element `json:"_ifModifiedSince"`
}

type Bundle_RequestMethod string

const (
	Bundle_RequestMethodGET    Bundle_RequestMethod = "GET"
	Bundle_RequestMethodHEAD   Bundle_RequestMethod = "HEAD"
	Bundle_RequestMethodPOST   Bundle_RequestMethod = "POST"
	Bundle_RequestMethodPUT    Bundle_RequestMethod = "PUT"
	Bundle_RequestMethodDELETE Bundle_RequestMethod = "DELETE"
	Bundle_RequestMethodPATCH  Bundle_RequestMethod = "PATCH"
)

// ConceptMap_Element is A statement of relationships from one set of concepts to one or more other concepts
// - either concepts in code systems, or data element/data element concepts, or classes
// in class models.
type ConceptMap_Element struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identity (code or path) or the element/item being mapped.
	Code string `json:"code"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// The display for the code. The display is only provided to help editors when editing
	// the concept map.
	Display string `json:"display"`
	// Extensions for display
	Display_ext *Element `json:"_display"`
	// A concept from the target value set that this concept maps to.
	Target []*ConceptMap_Target `json:"target"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Contract_SecurityLabel is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract_SecurityLabel struct {
	// Extensions for number
	Number_ext []*Element `json:"_number"`
	// Security label privacy tag that species the level of confidentiality protection
	// required for this term and/or term elements.
	Classification *Coding `json:"classification,omitempty"`
	// Security label privacy tag that species the applicable privacy and security policies
	// governing this term and/or term elements.
	Category []*Coding `json:"category"`
	// Security label privacy tag that species the manner in which term and/or term
	// elements are to be protected.
	Control []*Coding `json:"control"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Number used to link this term or term element to the applicable Security Label.
	Number []uint64 `json:"number"`
}

// ExampleScenario_Alternative is Example of workflow instance.
type ExampleScenario_Alternative struct {
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// What happens in each alternative option.
	Step []*ExampleScenario_Step `json:"step"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The label to display for the alternative that gives a sense of the circumstance in
	// which the alternative should be invoked.
	Title string `json:"title"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// A human-readable description of the alternative explaining when the alternative
	// should occur rather than the base step.
	Description string `json:"description"`
}

// url is A URI that is a literal reference
type url string

var urlPattern = regexp.MustCompile(`^\S*$`)

func (t *url) Validate() bool {
	return urlPattern.MatchString(string(*t))
}

// Account_Guarantor is A financial tool for tracking value accrued for a particular purpose.  In the
// healthcare field, used to track charges for a patient, cost centers, etc.
type Account_Guarantor struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The entity who is responsible.
	Party *Reference `json:"party,omitempty"`
	// A guarantor may be placed on credit hold or otherwise have their role temporarily
	// suspended.
	OnHold bool `json:"onHold"`
	// Extensions for onHold
	OnHold_ext *Element `json:"_onHold"`
	// The timeframe during which the guarantor accepts responsibility for the account.
	Period *Period `json:"period"`
}

// Claim_CareTeam is A provider issued list of professional services and products which have been
// provided, or are to be provided, to a patient which is sent to an insurer for
// reimbursement.
type Claim_CareTeam struct {
	// Member of the team who provided the product or service.
	Provider *Reference `json:"provider,omitempty"`
	// The lead, assisting or supervising practitioner and their discipline if a
	// multidisciplinary team.
	Role *CodeableConcept `json:"role"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A number to uniquely identify care team entries.
	Sequence uint64 `json:"sequence"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// The party who is billing and/or responsible for the claimed products or services.
	Responsible bool `json:"responsible"`
	// Extensions for responsible
	Responsible_ext *Element `json:"_responsible"`
	// The qualification of the practitioner which is applicable for this service.
	Qualification *CodeableConcept `json:"qualification"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// ClaimResponse_Adjudication is This resource provides the adjudication details from the processing of a Claim
// resource.
type ClaimResponse_Adjudication struct {
	// A non-monetary value associated with the category. Mutually exclusive to the amount
	// element above.
	Value float64 `json:"value"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A code to indicate the information type of this adjudication record. Information
	// types may include the value submitted, maximum values or percentages allowed or
	// payable under the plan, amounts that: the patient is responsible for in aggregate or
	// pertaining to this item; amounts paid by other coverages; and, the benefit payable
	// for this item.
	Category *CodeableConcept `json:"category,omitempty"`
	// A code supporting the understanding of the adjudication result and explaining
	// variance from expected amount.
	Reason *CodeableConcept `json:"reason"`
	// Monetary amount associated with the category.
	Amount *Money `json:"amount"`
}

// CoverageEligibilityRequest_SupportingInfo is The CoverageEligibilityRequest provides patient and insurance coverage information
// to an insurer for them to respond, in the form of an CoverageEligibilityResponse,
// with information regarding whether the stated coverage is valid and in-force and
// optionally to provide the insurance details of the policy.
type CoverageEligibilityRequest_SupportingInfo struct {
	// Additional data or information such as resources, documents, images etc. including
	// references to the data or the actual inclusion of the data.
	Information *Reference `json:"information,omitempty"`
	// The supporting materials are applicable for all detail items, product/servce
	// categories and specific billing codes.
	AppliesToAll bool `json:"appliesToAll"`
	// Extensions for appliesToAll
	AppliesToAll_ext *Element `json:"_appliesToAll"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A number to uniquely identify supporting information entries.
	Sequence uint64 `json:"sequence"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
}

// ResearchStudy_Objective is A process where a researcher or organization plans and then executes a series of
// steps intended to increase the field of healthcare-related knowledge.  This includes
// studies of safety, efficacy, comparative effectiveness and other information about
// medications, devices, therapies and other interventional and investigative
// techniques.  A ResearchStudy involves the gathering of information about human or
// animal subjects.
type ResearchStudy_Objective struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Unique, human-readable label for this objective of the study.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The kind of study objective.
	Type *CodeableConcept `json:"type"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// RiskEvidenceSynthesis_Certainty is The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a
// population plus exposure state where the risk estimate is derived from a combination
// of research studies.
type RiskEvidenceSynthesis_Certainty struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A rating of the certainty of the effect estimate.
	Rating []*CodeableConcept `json:"rating"`
	// A human-readable string to clarify or explain concepts about the resource.
	Note []*Annotation `json:"note"`
	// A description of a component of the overall certainty.
	CertaintySubcomponent []*RiskEvidenceSynthesis_CertaintySubcomponent `json:"certaintySubcomponent"`
}

// oid is An OID represented as a URI
type oid string

var oidPattern = regexp.MustCompile(`^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$`)

func (t *oid) Validate() bool {
	return oidPattern.MatchString(string(*t))
}

// ExplanationOfBenefit_CareTeam is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_CareTeam struct {
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// The party who is billing and/or responsible for the claimed products or services.
	Responsible bool `json:"responsible"`
	// The qualification of the practitioner which is applicable for this service.
	Qualification *CodeableConcept `json:"qualification"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A number to uniquely identify care team entries.
	Sequence uint64 `json:"sequence"`
	// Member of the team who provided the product or service.
	Provider *Reference `json:"provider,omitempty"`
	// Extensions for responsible
	Responsible_ext *Element `json:"_responsible"`
	// The lead, assisting or supervising practitioner and their discipline if a
	// multidisciplinary team.
	Role *CodeableConcept `json:"role"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// MolecularSequence_Repository is Raw data describing a biological sequence.
type MolecularSequence_Repository struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// URI of an external repository which contains further details about the genetics data.
	Name string `json:"name"`
	// Id of the variant in this external repository. The server will understand how to use
	// this id to call for more info about datasets in external repository.
	DatasetId string `json:"datasetId"`
	// Extensions for datasetId
	DatasetId_ext *Element `json:"_datasetId"`
	// Id of the variantset in this external repository. The server will understand how to
	// use this id to call for more info about variantsets in external repository.
	VariantsetId string `json:"variantsetId"`
	// Extensions for readsetId
	ReadsetId_ext *Element `json:"_readsetId"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// URI of an external repository which contains further details about the genetics data.
	Url string `json:"url"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Click and see / RESTful API / Need login to see / RESTful API with authentication /
	// Other ways to see resource.
	Type MolecularSequence_RepositoryType `json:"type"`
	// Extensions for variantsetId
	VariantsetId_ext *Element `json:"_variantsetId"`
	// Id of the read in this external repository.
	ReadsetId string `json:"readsetId"`
}

type MolecularSequence_RepositoryType string

const (
	MolecularSequence_RepositoryTypeDirectlink MolecularSequence_RepositoryType = "directlink"
	MolecularSequence_RepositoryTypeOpenapi    MolecularSequence_RepositoryType = "openapi"
	MolecularSequence_RepositoryTypeLogin      MolecularSequence_RepositoryType = "login"
	MolecularSequence_RepositoryTypeOauth      MolecularSequence_RepositoryType = "oauth"
	MolecularSequence_RepositoryTypeOther      MolecularSequence_RepositoryType = "other"
)

// Questionnaire_AnswerOption is A structured set of questions intended to guide the collection of answers from
// end-users. Questionnaires provide detailed control over order, presentation,
// phraseology and grouping to allow coherent, consistent data collection.
type Questionnaire_AnswerOption struct {
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// Extensions for valueInteger
	ValueInteger_ext *Element `json:"_valueInteger"`
	// A potential answer that's allowed as the answer to this question.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	ValueTime string `json:"valueTime"`
	// Extensions for valueTime
	ValueTime_ext *Element `json:"_valueTime"`
	// A potential answer that's allowed as the answer to this question.
	ValueReference *Reference `json:"valueReference"`
	// Indicates whether the answer value is selected when the list of possible answers is
	// initially shown.
	InitialSelected bool `json:"initialSelected"`
	// Extensions for initialSelected
	InitialSelected_ext *Element `json:"_initialSelected"`
	// A potential answer that's allowed as the answer to this question.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	ValueDate string `json:"valueDate"`
	// A potential answer that's allowed as the answer to this question.
	ValueCoding *Coding `json:"valueCoding"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A potential answer that's allowed as the answer to this question.
	// pattern ^-?([0]|([1-9][0-9]*))$
	ValueInteger int64 `json:"valueInteger"`
	// Extensions for valueDate
	ValueDate_ext *Element `json:"_valueDate"`
	// A potential answer that's allowed as the answer to this question.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
}

// SubstanceSourceMaterial_Organism is Source material shall capture information on the taxonomic and anatomical origins as
// well as the fraction of a material that can result in or can be modified to form a
// substance. This set of data elements shall be used to define polymer substances
// isolated from biological matrices. Taxonomic and anatomical origins shall be
// described using a controlled vocabulary as required. This information is captured
// for naturally derived polymers ( . starch) and structurally diverse substances. For
// Organisms belonging to the Kingdom Plantae the Substance level defines the fresh
// material of a single species or infraspecies, the Herbal Drug and the Herbal
// preparation. For Herbal preparations, the fraction information will be captured at
// the Substance information level and additional information for herbal extracts will
// be captured at the Specified Substance Group 1 information level. See for further
// explanation the Substance Class: Structurally Diverse and the herbal annex.
type SubstanceSourceMaterial_Organism struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The family of an organism shall be specified.
	Family *CodeableConcept `json:"family"`
	// The genus of an organism shall be specified; refers to the Latin epithet of the
	// genus element of the plant/animal scientific name; it is present in names for
	// genera, species and infraspecies.
	Genus *CodeableConcept `json:"genus"`
	// 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
	Hybrid *SubstanceSourceMaterial_Hybrid `json:"hybrid"`
	// 4.9.13.7.1 Kingdom (Conditional).
	OrganismGeneral *SubstanceSourceMaterial_OrganismGeneral `json:"organismGeneral"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The species of an organism shall be specified; refers to the Latin epithet of the
	// species of the plant/animal; it is present in names for species and infraspecies.
	Species *CodeableConcept `json:"species"`
	// The Intraspecific type of an organism shall be specified.
	IntraspecificType *CodeableConcept `json:"intraspecificType"`
	// The intraspecific description of an organism shall be specified based on a
	// controlled vocabulary. For Influenza Vaccine, the intraspecific description shall
	// contain the syntax of the antigen in line with the WHO convention.
	IntraspecificDescription string `json:"intraspecificDescription"`
	// Extensions for intraspecificDescription
	IntraspecificDescription_ext *Element `json:"_intraspecificDescription"`
	// 4.9.13.6.1 Author type (Conditional).
	Author []*SubstanceSourceMaterial_Author `json:"author"`
}

// Contract_Term is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract_Term struct {
	// A legal clause or condition contained within a contract that requires one or both
	// parties to perform a particular requirement by some specified time or prevents one
	// or both parties from performing a particular requirement by some specified time.
	Type *CodeableConcept `json:"type"`
	// An actor taking a role in an activity for which it can be assigned some degree of
	// responsibility for the activity taking place.
	Action []*Contract_Action `json:"action"`
	// Nested group of Contract Provisions.
	Group []*Contract_Term `json:"group"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// When this Contract Provision was issued.
	Issued string `json:"issued"`
	// The entity that the term applies to.
	TopicCodeableConcept *CodeableConcept `json:"topicCodeableConcept"`
	// The matter of concern in the context of this provision of the agrement.
	Offer *Contract_Offer `json:"offer,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Relevant time or time-period when this Contract Provision is applicable.
	Applies *Period `json:"applies"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
	// A specialized legal clause or condition based on overarching contract type.
	SubType *CodeableConcept `json:"subType"`
	// Security labels that protect the handling of information about the term and its
	// elements, which may be specifically identified..
	SecurityLabel []*Contract_SecurityLabel `json:"securityLabel"`
	// Contract Term Asset List.
	Asset []*Contract_Asset `json:"asset"`
	// The entity that the term applies to.
	TopicReference *Reference `json:"topicReference"`
	// Statement of a provision in a policy or a contract.
	Text string `json:"text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Unique identifier for this particular Contract Provision.
	Identifier *Identifier `json:"identifier"`
	// Extensions for issued
	Issued_ext *Element `json:"_issued"`
}

// Invoice_PriceComponent is Invoice containing collected ChargeItems from an Account with calculated individual
// and total price for Billing purpose.
type Invoice_PriceComponent struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// A code that identifies the component. Codes may be used to differentiate between
	// kinds of taxes, surcharges, discounts etc.
	Code *CodeableConcept `json:"code"`
	// The factor that has been applied on the base price for calculating this component.
	Factor float64 `json:"factor"`
	// The amount calculated for this component.
	Amount *Money `json:"amount"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// This code identifies the type of the component.
	Type Invoice_PriceComponentType `json:"type"`
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
}

type Invoice_PriceComponentType string

const (
	Invoice_PriceComponentTypeBase          Invoice_PriceComponentType = "base"
	Invoice_PriceComponentTypeSurcharge     Invoice_PriceComponentType = "surcharge"
	Invoice_PriceComponentTypeDeduction     Invoice_PriceComponentType = "deduction"
	Invoice_PriceComponentTypeDiscount      Invoice_PriceComponentType = "discount"
	Invoice_PriceComponentTypeTax           Invoice_PriceComponentType = "tax"
	Invoice_PriceComponentTypeInformational Invoice_PriceComponentType = "informational"
)

// RiskEvidenceSynthesis_RiskEstimate is The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a
// population plus exposure state where the risk estimate is derived from a combination
// of research studies.
type RiskEvidenceSynthesis_RiskEstimate struct {
	// Examples include proportion and mean.
	Type *CodeableConcept `json:"type"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// The sample size for the group that was measured for this risk estimate.
	DenominatorCount int64 `json:"denominatorCount"`
	// A description of the precision of the estimate for the effect.
	PrecisionEstimate []*RiskEvidenceSynthesis_PrecisionEstimate `json:"precisionEstimate"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Specifies the UCUM unit for the outcome.
	UnitOfMeasure *CodeableConcept `json:"unitOfMeasure"`
	// Extensions for denominatorCount
	DenominatorCount_ext *Element `json:"_denominatorCount"`
	// Extensions for numeratorCount
	NumeratorCount_ext *Element `json:"_numeratorCount"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Human-readable summary of risk estimate.
	Description string `json:"description"`
	// The point estimate of the risk estimate.
	Value float64 `json:"value"`
	// The number of group members with the outcome of interest.
	NumeratorCount int64 `json:"numeratorCount"`
}

// SpecimenDefinition_Additive is A kind of specimen with associated set of requirements.
type SpecimenDefinition_Additive struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Substance introduced in the kind of container to preserve, maintain or enhance the
	// specimen. Examples: Formalin, Citrate, EDTA.
	AdditiveCodeableConcept *CodeableConcept `json:"additiveCodeableConcept"`
	// Substance introduced in the kind of container to preserve, maintain or enhance the
	// specimen. Examples: Formalin, Citrate, EDTA.
	AdditiveReference *Reference `json:"additiveReference"`
}

// DeviceDefinition_Capability is The characteristics, operational status and capabilities of a medical-related
// component of a medical device.
type DeviceDefinition_Capability struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Type of capability.
	Type *CodeableConcept `json:"type,omitempty"`
	// Description of capability.
	Description []*CodeableConcept `json:"description"`
}

// MedicinalProduct_NamePart is Detailed definition of a medicinal product, typically for uses other than direct
// patient care (e.g. regulatory use).
type MedicinalProduct_NamePart struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A fragment of a product name.
	Part string `json:"part"`
	// Extensions for part
	Part_ext *Element `json:"_part"`
	// Idenifying type for this part of the name (e.g. strength part).
	Type *Coding `json:"type,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// MedicinalProductPackaged_BatchIdentifier is A medicinal product in a container or package.
type MedicinalProductPackaged_BatchIdentifier struct {
	// A number appearing on the immediate packaging (and not the outer packaging).
	ImmediatePackaging *Identifier `json:"immediatePackaging"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A number appearing on the outer packaging of a specific batch.
	OuterPackaging *Identifier `json:"outerPackaging,omitempty"`
}

// StructureMap_Source is A Map of relationships between 2 structures that can be used to transform data.
type StructureMap_Source struct {
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Extensions for defaultValueBoolean
	DefaultValueBoolean_ext *Element `json:"_defaultValueBoolean"`
	// A value to use if there is no existing value in the source object.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$
	DefaultValueInstant string `json:"defaultValueInstant"`
	// A value to use if there is no existing value in the source object.
	DefaultValueAge *Age `json:"defaultValueAge"`
	// How to handle the list mode for this element.
	ListMode StructureMap_SourceListMode `json:"listMode"`
	// Extensions for defaultValueUnsignedInt
	DefaultValueUnsignedInt_ext *Element `json:"_defaultValueUnsignedInt"`
	// A value to use if there is no existing value in the source object.
	DefaultValueAnnotation *Annotation `json:"defaultValueAnnotation"`
	// A value to use if there is no existing value in the source object.
	DefaultValueExpression *Expression `json:"defaultValueExpression"`
	// Extensions for context
	Context_ext *Element `json:"_context"`
	// Specified maximum cardinality for the element - a number or a "*". This is optional;
	// if present, it acts an implicit check on the input content (* just serves as
	// documentation; it's the default value).
	Max string `json:"max"`
	// A value to use if there is no existing value in the source object.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	DefaultValueDecimal float64 `json:"defaultValueDecimal"`
	// Extensions for defaultValueInteger
	DefaultValueInteger_ext *Element `json:"_defaultValueInteger"`
	// A value to use if there is no existing value in the source object.
	// pattern ^[0]|([1-9][0-9]*)$
	DefaultValueUnsignedInt uint64 `json:"defaultValueUnsignedInt"`
	// A value to use if there is no existing value in the source object.
	DefaultValueDuration *Duration `json:"defaultValueDuration"`
	// A value to use if there is no existing value in the source object.
	DefaultValueTriggerDefinition *TriggerDefinition `json:"defaultValueTriggerDefinition"`
	// Extensions for variable
	Variable_ext *Element `json:"_variable"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A value to use if there is no existing value in the source object.
	// pattern ^[A-Za-z0-9\-\.]{1,64}$
	DefaultValueId string `json:"defaultValueId"`
	// Extensions for defaultValueMarkdown
	DefaultValueMarkdown_ext *Element `json:"_defaultValueMarkdown"`
	// Extensions for defaultValueUuid
	DefaultValueUuid_ext *Element `json:"_defaultValueUuid"`
	// A value to use if there is no existing value in the source object.
	DefaultValueCodeableConcept *CodeableConcept `json:"defaultValueCodeableConcept"`
	// Extensions for logMessage
	LogMessage_ext *Element `json:"_logMessage"`
	// A value to use if there is no existing value in the source object.
	DefaultValueReference *Reference `json:"defaultValueReference"`
	// A value to use if there is no existing value in the source object.
	DefaultValueDataRequirement *DataRequirement `json:"defaultValueDataRequirement"`
	// Extensions for defaultValueBase64Binary
	DefaultValueBase64Binary_ext *Element `json:"_defaultValueBase64Binary"`
	// Extensions for defaultValueOid
	DefaultValueOid_ext *Element `json:"_defaultValueOid"`
	// A value to use if there is no existing value in the source object.
	// pattern ^\S*$
	DefaultValueUri string `json:"defaultValueUri"`
	// A value to use if there is no existing value in the source object.
	DefaultValueContactPoint *ContactPoint `json:"defaultValueContactPoint"`
	// A value to use if there is no existing value in the source object.
	DefaultValueHumanName *HumanName `json:"defaultValueHumanName"`
	// A value to use if there is no existing value in the source object.
	// pattern ^[^\s]+(\s[^\s]+)*$
	DefaultValueCode string `json:"defaultValueCode"`
	// A value to use if there is no existing value in the source object.
	DefaultValueDistance *Distance `json:"defaultValueDistance"`
	// A value to use if there is no existing value in the source object.
	DefaultValueSignature *Signature `json:"defaultValueSignature"`
	// A value to use if there is no existing value in the source object.
	DefaultValueTiming *Timing `json:"defaultValueTiming"`
	// A FHIRPath expression which specifies a message to put in the transform log when
	// content matching the source rule is found.
	LogMessage string `json:"logMessage"`
	// A value to use if there is no existing value in the source object.
	// pattern ^true|false$
	DefaultValueBoolean bool `json:"defaultValueBoolean"`
	// A value to use if there is no existing value in the source object.
	// pattern ^\S*$
	DefaultValueUrl string `json:"defaultValueUrl"`
	// Extensions for defaultValueUrl
	DefaultValueUrl_ext *Element `json:"_defaultValueUrl"`
	// A value to use if there is no existing value in the source object.
	DefaultValueCoding *Coding `json:"defaultValueCoding"`
	// A value to use if there is no existing value in the source object.
	DefaultValueCount *Count `json:"defaultValueCount"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for defaultValueDate
	DefaultValueDate_ext *Element `json:"_defaultValueDate"`
	// Extensions for defaultValuePositiveInt
	DefaultValuePositiveInt_ext *Element `json:"_defaultValuePositiveInt"`
	// A value to use if there is no existing value in the source object.
	DefaultValueUsageContext *UsageContext `json:"defaultValueUsageContext"`
	// Named context for field, if a field is specified.
	Variable string `json:"variable"`
	// A value to use if there is no existing value in the source object.
	DefaultValueDosage *Dosage `json:"defaultValueDosage"`
	// FHIRPath expression  - must be true or the mapping engine throws an error instead of
	// completing.
	Check string `json:"check"`
	// Type or variable this rule applies to.
	Context string `json:"context"`
	// A value to use if there is no existing value in the source object.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	DefaultValueDate string `json:"defaultValueDate"`
	// Extensions for defaultValueDateTime
	DefaultValueDateTime_ext *Element `json:"_defaultValueDateTime"`
	// Extensions for defaultValueString
	DefaultValueString_ext *Element `json:"_defaultValueString"`
	// A value to use if there is no existing value in the source object.
	DefaultValueParameterDefinition *ParameterDefinition `json:"defaultValueParameterDefinition"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// A value to use if there is no existing value in the source object.
	// pattern ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$
	DefaultValueOid string `json:"defaultValueOid"`
	// Extensions for check
	Check_ext *Element `json:"_check"`
	// A value to use if there is no existing value in the source object.
	DefaultValueContactDetail *ContactDetail `json:"defaultValueContactDetail"`
	// A value to use if there is no existing value in the source object.
	// pattern ^\S*$
	DefaultValueCanonical string `json:"defaultValueCanonical"`
	// Extensions for defaultValueId
	DefaultValueId_ext *Element `json:"_defaultValueId"`
	// A value to use if there is no existing value in the source object.
	// pattern ^[ \r\n\t\S]+$
	DefaultValueString string `json:"defaultValueString"`
	// A value to use if there is no existing value in the source object.
	// pattern ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
	DefaultValueUuid string `json:"defaultValueUuid"`
	// A value to use if there is no existing value in the source object.
	DefaultValueRatio *Ratio `json:"defaultValueRatio"`
	// A value to use if there is no existing value in the source object.
	DefaultValueSampledData *SampledData `json:"defaultValueSampledData"`
	// Optional field for this source.
	Element string `json:"element"`
	// Extensions for condition
	Condition_ext *Element `json:"_condition"`
	// Extensions for min
	Min_ext *Element `json:"_min"`
	// Extensions for max
	Max_ext *Element `json:"_max"`
	// A value to use if there is no existing value in the source object.
	// pattern ^(\s*([0-9a-zA-Z\+/=]){4}\s*)+$
	DefaultValueBase64Binary string `json:"defaultValueBase64Binary"`
	// A value to use if there is no existing value in the source object.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	DefaultValueDateTime string `json:"defaultValueDateTime"`
	// A value to use if there is no existing value in the source object.
	// pattern ^[1-9][0-9]*$
	DefaultValuePositiveInt uint64 `json:"defaultValuePositiveInt"`
	// Extensions for listMode
	ListMode_ext *Element `json:"_listMode"`
	// Extensions for defaultValueCode
	DefaultValueCode_ext *Element `json:"_defaultValueCode"`
	// Extensions for defaultValueDecimal
	DefaultValueDecimal_ext *Element `json:"_defaultValueDecimal"`
	// A value to use if there is no existing value in the source object.
	DefaultValueAddress *Address `json:"defaultValueAddress"`
	// A value to use if there is no existing value in the source object.
	DefaultValueRelatedArtifact *RelatedArtifact `json:"defaultValueRelatedArtifact"`
	// Extensions for element
	Element_ext *Element `json:"_element"`
	// A value to use if there is no existing value in the source object.
	DefaultValueIdentifier *Identifier `json:"defaultValueIdentifier"`
	// A value to use if there is no existing value in the source object.
	DefaultValuePeriod *Period `json:"defaultValuePeriod"`
	// A value to use if there is no existing value in the source object.
	DefaultValueRange *Range `json:"defaultValueRange"`
	// Specified minimum cardinality for the element. This is optional; if present, it acts
	// an implicit check on the input content.
	Min int64 `json:"min"`
	// Extensions for defaultValueCanonical
	DefaultValueCanonical_ext *Element `json:"_defaultValueCanonical"`
	// Extensions for defaultValueInstant
	DefaultValueInstant_ext *Element `json:"_defaultValueInstant"`
	// Extensions for defaultValueTime
	DefaultValueTime_ext *Element `json:"_defaultValueTime"`
	// A value to use if there is no existing value in the source object.
	DefaultValueAttachment *Attachment `json:"defaultValueAttachment"`
	// A value to use if there is no existing value in the source object.
	// pattern ^[ \r\n\t\S]+$
	DefaultValueMarkdown string `json:"defaultValueMarkdown"`
	// A value to use if there is no existing value in the source object.
	DefaultValueMoney *Money `json:"defaultValueMoney"`
	// A value to use if there is no existing value in the source object.
	DefaultValueQuantity *Quantity `json:"defaultValueQuantity"`
	// Extensions for defaultValueUri
	DefaultValueUri_ext *Element `json:"_defaultValueUri"`
	// A value to use if there is no existing value in the source object.
	DefaultValueContributor *Contributor `json:"defaultValueContributor"`
	// FHIRPath expression  - must be true or the rule does not apply.
	Condition string `json:"condition"`
	// Specified type for the element. This works as a condition on the mapping - use for
	// polymorphic elements.
	Type string `json:"type"`
	// A value to use if there is no existing value in the source object.
	// pattern ^-?([0]|([1-9][0-9]*))$
	DefaultValueInteger int64 `json:"defaultValueInteger"`
	// A value to use if there is no existing value in the source object.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	DefaultValueTime string `json:"defaultValueTime"`
}

type StructureMap_SourceListMode string

const (
	StructureMap_SourceListModeFirst     StructureMap_SourceListMode = "first"
	StructureMap_SourceListModeNot_first StructureMap_SourceListMode = "not_first"
	StructureMap_SourceListModeLast      StructureMap_SourceListMode = "last"
	StructureMap_SourceListModeNot_last  StructureMap_SourceListMode = "not_last"
	StructureMap_SourceListModeOnly_one  StructureMap_SourceListMode = "only_one"
)

// SubstanceAmount is Chemical substances are a single substance type whose primary defining element is
// the molecular structure. Chemical substances shall be defined on the basis of their
// complete covalent molecular structure; the presence of a salt (counter-ion) and/or
// solvates (water, alcohols) is also captured. Purity, grade, physical form or
// particle size are not taken into account in the definition of a chemical substance
// or in the assignment of a Substance ID.
type SubstanceAmount struct {
	// Extensions for amountText
	AmountText_ext *Element `json:"_amountText"`
	// Reference range of possible or expected values.
	ReferenceRange *SubstanceAmount_ReferenceRange `json:"referenceRange"`
	// Used to capture quantitative values for a variety of elements. If only limits are
	// given, the arithmetic mean would be the average. If only a single definite value for
	// a given element is given, it would be captured in this field.
	AmountQuantity *Quantity `json:"amountQuantity"`
	// Used to capture quantitative values for a variety of elements. If only limits are
	// given, the arithmetic mean would be the average. If only a single definite value for
	// a given element is given, it would be captured in this field.
	AmountRange *Range `json:"amountRange"`
	// Most elements that require a quantitative value will also have a field called amount
	// type. Amount type should always be specified because the actual value of the amount
	// is often dependent on it. EXAMPLE: In capturing the actual relative amounts of
	// substances or molecular fragments it is essential to indicate whether the amount
	// refers to a mole ratio or weight ratio. For any given element an effort should be
	// made to use same the amount type for all related definitional elements.
	AmountType *CodeableConcept `json:"amountType"`
	// Used to capture quantitative values for a variety of elements. If only limits are
	// given, the arithmetic mean would be the average. If only a single definite value for
	// a given element is given, it would be captured in this field.
	// pattern ^[ \r\n\t\S]+$
	AmountString string `json:"amountString"`
	// Extensions for amountString
	AmountString_ext *Element `json:"_amountString"`
	// A textual comment on a numeric value.
	AmountText string `json:"amountText"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// AuditEvent_Network is A record of an event made for purposes of maintaining a security log. Typical uses
// include detection of intrusion attempts and monitoring for inappropriate usage.
type AuditEvent_Network struct {
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An identifier for the network access point of the user device for the audit event.
	Address string `json:"address"`
	// Extensions for address
	Address_ext *Element `json:"_address"`
	// An identifier for the type of network access point that originated the audit event.
	Type AuditEvent_NetworkType `json:"type"`
}

type AuditEvent_NetworkType string

const (
	AuditEvent_NetworkType1 AuditEvent_NetworkType = "1"
	AuditEvent_NetworkType2 AuditEvent_NetworkType = "2"
	AuditEvent_NetworkType3 AuditEvent_NetworkType = "3"
	AuditEvent_NetworkType4 AuditEvent_NetworkType = "4"
	AuditEvent_NetworkType5 AuditEvent_NetworkType = "5"
)

// EffectEvidenceSynthesis_PrecisionEstimate is The EffectEvidenceSynthesis resource describes the difference in an outcome between
// exposures states in a population where the effect estimate is derived from a
// combination of research studies.
type EffectEvidenceSynthesis_PrecisionEstimate struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for from
	From_ext *Element `json:"_from"`
	// Upper bound of confidence interval.
	To float64 `json:"to"`
	// Extensions for to
	To_ext *Element `json:"_to"`
	// Extensions for level
	Level_ext *Element `json:"_level"`
	// Lower bound of confidence interval.
	From float64 `json:"from"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Examples include confidence interval and interquartile range.
	Type *CodeableConcept `json:"type"`
	// Use 95 for a 95% confidence interval.
	Level float64 `json:"level"`
}

// Measure_Stratifier is The Measure resource provides the definition of a quality measure.
type Measure_Stratifier struct {
	// An expression that specifies the criteria for the stratifier. This is typically the
	// name of an expression defined within a referenced library, but it may also be a path
	// to a stratifier element.
	Criteria *Expression `json:"criteria"`
	// A component of the stratifier criteria for the measure report, specified as either
	// the name of a valid CQL expression defined within a referenced library or a valid
	// FHIR Resource Path.
	Component []*Measure_Component `json:"component"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates a meaning for the stratifier. This can be as simple as a unique
	// identifier, or it can establish meaning in a broader context by drawing from a
	// terminology, allowing stratifiers to be correlated across measures.
	Code *CodeableConcept `json:"code"`
	// The human readable description of this stratifier criteria.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
}

// Age is A duration of time during which an organism (or a process) has existed.
type Age struct {
	// Extensions for system
	System_ext *Element `json:"_system"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The value of the measured amount. The value includes an implicit precision in the
	// presentation of the value.
	Value float64 `json:"value"`
	// A human-readable form of the unit.
	Unit string `json:"unit"`
	// Extensions for comparator
	Comparator_ext *Element `json:"_comparator"`
	// Extensions for unit
	Unit_ext *Element `json:"_unit"`
	// The identification of the system that provides the coded form of the unit.
	System string `json:"system"`
	// A computer processable form of the unit in some unit representation system.
	Code string `json:"code"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// How the value should be understood and represented - whether the actual value is
	// greater or less than the stated value due to measurement issues; e.g. if the
	// comparator is "<" , then the real value is < stated value.
	Comparator AgeComparator `json:"comparator"`
}

type AgeComparator string

const (
	AgeComparatorLt   AgeComparator = "<"
	AgeComparatorLtEq AgeComparator = "<="
	AgeComparatorGtEq AgeComparator = ">="
	AgeComparatorGt   AgeComparator = ">"
)

// TestReport_Action2 is A summary of information based on the results of executing a TestScript.
type TestReport_Action2 struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An operation would involve a REST request to a server.
	Operation *TestReport_Operation `json:"operation,omitempty"`
}

// TestScript_Fixture is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_Fixture struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Whether or not to implicitly create the fixture during setup. If true, the fixture
	// is automatically created on each server being tested during setup, therefore no
	// create operation is required for this fixture in the TestScript.setup section.
	Autocreate bool `json:"autocreate"`
	// Extensions for autocreate
	Autocreate_ext *Element `json:"_autocreate"`
	// Whether or not to implicitly delete the fixture during teardown. If true, the
	// fixture is automatically deleted on each server being tested during teardown,
	// therefore no delete operation is required for this fixture in the
	// TestScript.teardown section.
	Autodelete bool `json:"autodelete"`
	// Extensions for autodelete
	Autodelete_ext *Element `json:"_autodelete"`
	// Reference to the resource (containing the contents of the resource needed for
	// operations).
	Resource *Reference `json:"resource"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// CapabilityStatement_Document is A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server
// for a particular version of FHIR that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type CapabilityStatement_Document struct {
	// A description of how the application supports or uses the specified document
	// profile.  For example, when documents are created, what action is taken with
	// consumed documents, etc.
	Documentation string `json:"documentation"`
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
	// A profile on the document Bundle that constrains which resources are present, and
	// their contents.
	Profile string `json:"profile,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Mode of this document declaration - whether an application is a producer or consumer.
	Mode CapabilityStatement_DocumentMode `json:"mode"`
	// Extensions for mode
	Mode_ext *Element `json:"_mode"`
}

type CapabilityStatement_DocumentMode string

const (
	CapabilityStatement_DocumentModeProducer CapabilityStatement_DocumentMode = "producer"
	CapabilityStatement_DocumentModeConsumer CapabilityStatement_DocumentMode = "consumer"
)

// ClaimResponse_Error is This resource provides the adjudication details from the processing of a Claim
// resource.
type ClaimResponse_Error struct {
	// The sequence number of the sub-detail within the detail within the line item
	// submitted which contains the error. This value is omitted when the error occurs
	// outside of the item structure.
	SubDetailSequence uint64 `json:"subDetailSequence"`
	// Extensions for subDetailSequence
	SubDetailSequence_ext *Element `json:"_subDetailSequence"`
	// An error code, from a specified code system, which details why the claim could not
	// be adjudicated.
	Code *CodeableConcept `json:"code,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The sequence number of the line item submitted which contains the error. This value
	// is omitted when the error occurs outside of the item structure.
	ItemSequence uint64 `json:"itemSequence"`
	// Extensions for detailSequence
	DetailSequence_ext *Element `json:"_detailSequence"`
	// The sequence number of the detail within the line item submitted which contains the
	// error. This value is omitted when the error occurs outside of the item structure.
	DetailSequence uint64 `json:"detailSequence"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for itemSequence
	ItemSequence_ext *Element `json:"_itemSequence"`
}

// CodeSystem_Property1 is The CodeSystem resource is used to declare the existence of and describe a code
// system or code system supplement and its key properties, and optionally define a
// part or all of its content.
type CodeSystem_Property1 struct {
	// The value of this property.
	ValueCoding *Coding `json:"valueCoding"`
	// Extensions for valueDateTime
	ValueDateTime_ext *Element `json:"_valueDateTime"`
	// Extensions for valueDecimal
	ValueDecimal_ext *Element `json:"_valueDecimal"`
	// A code that is a reference to CodeSystem.property.code.
	Code string `json:"code"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// The value of this property.
	// pattern ^[^\s]+(\s[^\s]+)*$
	ValueCode string `json:"valueCode"`
	// The value of this property.
	// pattern ^-?([0]|([1-9][0-9]*))$
	ValueInteger int64 `json:"valueInteger"`
	// The value of this property.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	ValueDateTime string `json:"valueDateTime"`
	// The value of this property.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	ValueDecimal float64 `json:"valueDecimal"`
	// Extensions for valueCode
	ValueCode_ext *Element `json:"_valueCode"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// Extensions for valueInteger
	ValueInteger_ext *Element `json:"_valueInteger"`
	// The value of this property.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The value of this property.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
}

// StructureDefinition_Mapping is A definition of a FHIR structure. This resource is used to describe the underlying
// resources, data types defined in FHIR, and also for describing extensions and
// constraints on resources and data types.
type StructureDefinition_Mapping struct {
	// An Internal id that is used to identify this mapping set when specific mappings are
	// made.
	Identity string `json:"identity"`
	// Extensions for identity
	Identity_ext *Element `json:"_identity"`
	// An absolute URI that identifies the specification that this mapping is expressed to.
	Uri string `json:"uri"`
	// Extensions for uri
	Uri_ext *Element `json:"_uri"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Comments about this mapping, including version notes, issues, scope limitations, and
	// other important notes for usage.
	Comment string `json:"comment"`
	// A name for the specification that is being mapped to.
	Name string `json:"name"`
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
}

// TerminologyCapabilities_Version is A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a
// FHIR Terminology Server that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type TerminologyCapabilities_Version struct {
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// Extensions for language
	Language_ext []*Element `json:"_language"`
	// Filter Properties supported.
	Filter []*TerminologyCapabilities_Filter `json:"filter"`
	// Extensions for property
	Property_ext []*Element `json:"_property"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// For version-less code systems, there should be a single version with no identifier.
	Code string `json:"code"`
	// If this is the default version for this code system.
	IsDefault bool `json:"isDefault"`
	// Extensions for isDefault
	IsDefault_ext *Element `json:"_isDefault"`
	// Extensions for compositional
	Compositional_ext *Element `json:"_compositional"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Properties supported for $lookup.
	Property []string `json:"property"`
	// If the compositional grammar defined by the code system is supported.
	Compositional bool `json:"compositional"`
	// Language Displays supported.
	Language []string `json:"language"`
}

// TerminologyCapabilities_Software is A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a
// FHIR Terminology Server that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type TerminologyCapabilities_Software struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Name the software is known by.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The version identifier for the software covered by this statement.
	Version string `json:"version"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
}

// CapabilityStatement_Software is A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server
// for a particular version of FHIR that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type CapabilityStatement_Software struct {
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Date this version of the software was released.
	ReleaseDate string `json:"releaseDate"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Name the software is known by.
	Name string `json:"name"`
	// The version identifier for the software covered by this statement.
	Version string `json:"version"`
	// Extensions for releaseDate
	ReleaseDate_ext *Element `json:"_releaseDate"`
}

// DeviceDefinition_Specialization is The characteristics, operational status and capabilities of a medical-related
// component of a medical device.
type DeviceDefinition_Specialization struct {
	// The standard that is used to operate and communicate.
	SystemType string `json:"systemType"`
	// Extensions for systemType
	SystemType_ext *Element `json:"_systemType"`
	// The version of the standard that is used to operate and communicate.
	Version string `json:"version"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// ImmunizationRecommendation_Recommendation is A patient's point-in-time set of recommendations (i.e. forecasting) according to a
// published schedule with optional supporting justification.
type ImmunizationRecommendation_Recommendation struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Vaccine(s) which should not be used to fulfill the recommendation.
	ContraindicatedVaccineCode []*CodeableConcept `json:"contraindicatedVaccineCode"`
	// Extensions for seriesDosesString
	SeriesDosesString_ext *Element `json:"_seriesDosesString"`
	// Immunization event history and/or evaluation that supports the status and
	// recommendation.
	SupportingImmunization []*Reference `json:"supportingImmunization"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates the patient status with respect to the path to immunity for the target
	// disease.
	ForecastStatus *CodeableConcept `json:"forecastStatus,omitempty"`
	// Vaccine date recommendations.  For example, earliest date to administer, latest date
	// to administer, etc.
	DateCriterion []*ImmunizationRecommendation_DateCriterion `json:"dateCriterion"`
	// One possible path to achieve presumed immunity against a disease - within the
	// context of an authority.
	Series string `json:"series"`
	// Nominal position of the recommended dose in a series (e.g. dose 2 is the next
	// recommended dose).
	// pattern ^[ \r\n\t\S]+$
	DoseNumberString string `json:"doseNumberString"`
	// The recommended number of doses to achieve immunity.
	// pattern ^[1-9][0-9]*$
	SeriesDosesPositiveInt uint64 `json:"seriesDosesPositiveInt"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The reason for the assigned forecast status.
	ForecastReason []*CodeableConcept `json:"forecastReason"`
	// Contains the description about the protocol under which the vaccine was administered.
	Description string `json:"description"`
	// Extensions for series
	Series_ext *Element `json:"_series"`
	// Extensions for doseNumberString
	DoseNumberString_ext *Element `json:"_doseNumberString"`
	// Extensions for seriesDosesPositiveInt
	SeriesDosesPositiveInt_ext *Element `json:"_seriesDosesPositiveInt"`
	// The recommended number of doses to achieve immunity.
	// pattern ^[ \r\n\t\S]+$
	SeriesDosesString string `json:"seriesDosesString"`
	// Patient Information that supports the status and recommendation.  This includes
	// patient observations, adverse reactions and allergy/intolerance information.
	SupportingPatientInformation []*Reference `json:"supportingPatientInformation"`
	// Vaccine(s) or vaccine group that pertain to the recommendation.
	VaccineCode []*CodeableConcept `json:"vaccineCode"`
	// The targeted disease for the recommendation.
	TargetDisease *CodeableConcept `json:"targetDisease"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Nominal position of the recommended dose in a series (e.g. dose 2 is the next
	// recommended dose).
	// pattern ^[1-9][0-9]*$
	DoseNumberPositiveInt uint64 `json:"doseNumberPositiveInt"`
	// Extensions for doseNumberPositiveInt
	DoseNumberPositiveInt_ext *Element `json:"_doseNumberPositiveInt"`
}

// SubstanceSourceMaterial_PartDescription is Source material shall capture information on the taxonomic and anatomical origins as
// well as the fraction of a material that can result in or can be modified to form a
// substance. This set of data elements shall be used to define polymer substances
// isolated from biological matrices. Taxonomic and anatomical origins shall be
// described using a controlled vocabulary as required. This information is captured
// for naturally derived polymers ( . starch) and structurally diverse substances. For
// Organisms belonging to the Kingdom Plantae the Substance level defines the fresh
// material of a single species or infraspecies, the Herbal Drug and the Herbal
// preparation. For Herbal preparations, the fraction information will be captured at
// the Substance information level and additional information for herbal extracts will
// be captured at the Specified Substance Group 1 information level. See for further
// explanation the Substance Class: Structurally Diverse and the herbal annex.
type SubstanceSourceMaterial_PartDescription struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Entity of anatomical origin of source material within an organism.
	Part *CodeableConcept `json:"part"`
	// The detailed anatomic location when the part can be extracted from different
	// anatomical locations of the organism. Multiple alternative locations may apply.
	PartLocation *CodeableConcept `json:"partLocation"`
}

// Money is An amount of economic utility in some recognized currency.
type Money struct {
	// Numerical value (with implicit precision).
	Value float64 `json:"value"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// ISO 4217 Currency Code.
	Currency string `json:"currency"`
	// Extensions for currency
	Currency_ext *Element `json:"_currency"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// EffectEvidenceSynthesis_ResultsByExposure is The EffectEvidenceSynthesis resource describes the difference in an outcome between
// exposures states in a population where the effect estimate is derived from a
// combination of research studies.
type EffectEvidenceSynthesis_ResultsByExposure struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Human-readable summary of results by exposure state.
	Description string `json:"description"`
	// Used to define variant exposure states such as low-risk state.
	VariantState *CodeableConcept `json:"variantState"`
	// Reference to a RiskEvidenceSynthesis resource.
	RiskEvidenceSynthesis *Reference `json:"riskEvidenceSynthesis,omitempty"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Whether these results are for the exposure state or alternative exposure state.
	ExposureState EffectEvidenceSynthesis_ResultsByExposureExposureState `json:"exposureState"`
	// Extensions for exposureState
	ExposureState_ext *Element `json:"_exposureState"`
}

type EffectEvidenceSynthesis_ResultsByExposureExposureState string

const (
	EffectEvidenceSynthesis_ResultsByExposureExposureStateExposure            EffectEvidenceSynthesis_ResultsByExposureExposureState = "exposure"
	EffectEvidenceSynthesis_ResultsByExposureExposureStateExposureAlternative EffectEvidenceSynthesis_ResultsByExposureExposureState = "exposure-alternative"
)

// MessageDefinition_AllowedResponse is Defines the characteristics of a message that can be shared between systems,
// including the type of event that initiates the message, the content to be
// transmitted and what response(s), if any, are permitted.
type MessageDefinition_AllowedResponse struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A reference to the message definition that must be adhered to by this supported
	// response.
	Message string `json:"message,omitempty"`
	// Provides a description of the circumstances in which this response should be used
	// (as opposed to one of the alternative responses).
	Situation string `json:"situation"`
	// Extensions for situation
	Situation_ext *Element `json:"_situation"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Narrative is A human-readable summary of the resource conveying the essential clinical and
// business information for the resource.
type Narrative struct {
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The actual narrative content, a stripped down version of XHTML.
	Div string `json:"div,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The status of the narrative - whether it's entirely generated (from just the defined
	// data or the extensions too), or whether a human authored it and it may contain
	// additional data.
	Status NarrativeStatus `json:"status"`
}

type NarrativeStatus string

const (
	NarrativeStatusGenerated  NarrativeStatus = "generated"
	NarrativeStatusExtensions NarrativeStatus = "extensions"
	NarrativeStatusAdditional NarrativeStatus = "additional"
	NarrativeStatusEmpty      NarrativeStatus = "empty"
)

// AdverseEvent_SuspectEntity is Actual or  potential/avoided event causing unintended physical injury resulting from
// or contributed to by medical care, a research study or other healthcare setting
// factors that requires additional monitoring, treatment, or hospitalization, or that
// results in death.
type AdverseEvent_SuspectEntity struct {
	// Information on the possible cause of the event.
	Causality []*AdverseEvent_Causality `json:"causality"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifies the actual instance of what caused the adverse event.  May be a
	// substance, medication, medication administration, medication statement or a device.
	Instance *Reference `json:"instance,omitempty"`
}

// Linkage_Item is Identifies two or more records (resource instances) that refer to the same
// real-world "occurrence".
type Linkage_Item struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Distinguishes which item is "source of truth" (if any) and which items are no longer
	// considered to be current representations.
	Type Linkage_ItemType `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// The resource instance being linked as part of the group.
	Resource *Reference `json:"resource,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

type Linkage_ItemType string

const (
	Linkage_ItemTypeSource     Linkage_ItemType = "source"
	Linkage_ItemTypeAlternate  Linkage_ItemType = "alternate"
	Linkage_ItemTypeHistorical Linkage_ItemType = "historical"
)

// Questionnaire_Item is A structured set of questions intended to guide the collection of answers from
// end-users. Questionnaires provide detailed control over order, presentation,
// phraseology and grouping to allow coherent, consistent data collection.
type Questionnaire_Item struct {
	// Extensions for prefix
	Prefix_ext *Element `json:"_prefix"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
	// A reference to a value set containing a list of codes representing permitted answers
	// for a "choice" or "open-choice" question.
	AnswerValueSet string `json:"answerValueSet"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// An identifier that is unique within the Questionnaire allowing linkage to the
	// equivalent item in a QuestionnaireResponse resource.
	LinkId string `json:"linkId"`
	// Extensions for linkId
	LinkId_ext *Element `json:"_linkId"`
	// A short label for a particular group, question or set of display text within the
	// questionnaire used for reference by the individual completing the questionnaire.
	Prefix string `json:"prefix"`
	// Text, questions and other groups to be nested beneath a question or group.
	Item []*Questionnaire_Item `json:"item"`
	// The type of questionnaire item this is - whether text for display, a grouping of
	// other items or a particular type of data to be captured (string, integer, coded
	// choice, etc.).
	Type Questionnaire_ItemType `json:"type"`
	// Extensions for readOnly
	ReadOnly_ext *Element `json:"_readOnly"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An indication, if true, that the item must be present in a "completed"
	// QuestionnaireResponse.  If false, the item may be skipped when answering the
	// questionnaire.
	Required bool `json:"required"`
	// This element is a URI that refers to an [[[ElementDefinition]]] that provides
	// information about this item, including information that might otherwise be included
	// in the instance of the Questionnaire resource. A detailed description of the
	// construction of the URI is shown in Comments, below. If this element is present then
	// the following element values MAY be derived from the Element Definition if the
	// corresponding elements of this Questionnaire resource instance have no value:
	//
	// * code (ElementDefinition.code)
	// * type (ElementDefinition.type)
	// * required (ElementDefinition.min)
	// * repeats (ElementDefinition.max)
	// * maxLength (ElementDefinition.maxLength)
	// * answerValueSet (ElementDefinition.binding)
	// * options (ElementDefinition.binding).
	Definition string `json:"definition"`
	// Controls how multiple enableWhen values are interpreted -  whether all or any must
	// be true.
	EnableBehavior Questionnaire_ItemEnableBehavior `json:"enableBehavior"`
	// Extensions for required
	Required_ext *Element `json:"_required"`
	// An indication, when true, that the value cannot be changed by a human respondent to
	// the Questionnaire.
	ReadOnly bool `json:"readOnly"`
	// The maximum number of characters that are permitted in the answer to be considered a
	// "valid" QuestionnaireResponse.
	MaxLength int64 `json:"maxLength"`
	// A terminology code that corresponds to this group or question (e.g. a code from
	// LOINC, which defines many questions and answers).
	Code []*Coding `json:"code"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Extensions for enableBehavior
	EnableBehavior_ext *Element `json:"_enableBehavior"`
	// Extensions for repeats
	Repeats_ext *Element `json:"_repeats"`
	// One of the permitted answers for a "choice" or "open-choice" question.
	AnswerOption []*Questionnaire_AnswerOption `json:"answerOption"`
	// One or more values that should be pre-populated in the answer when initially
	// rendering the questionnaire for user input.
	Initial []*Questionnaire_Initial `json:"initial"`
	// Extensions for definition
	Definition_ext *Element `json:"_definition"`
	// The name of a section, the text of a question or text content for a display item.
	Text string `json:"text"`
	// A constraint indicating that this item should only be enabled (displayed/allow
	// answers to be captured) when the specified condition is true.
	EnableWhen []*Questionnaire_EnableWhen `json:"enableWhen"`
	// An indication, if true, that the item may occur multiple times in the response,
	// collecting multiple answers for questions or multiple sets of answers for groups.
	Repeats bool `json:"repeats"`
	// Extensions for maxLength
	MaxLength_ext *Element `json:"_maxLength"`
}

type Questionnaire_ItemType string
type Questionnaire_ItemEnableBehavior string

const (
	Questionnaire_ItemTypeGroup         Questionnaire_ItemType           = "group"
	Questionnaire_ItemTypeDisplay       Questionnaire_ItemType           = "display"
	Questionnaire_ItemTypeBoolean       Questionnaire_ItemType           = "boolean"
	Questionnaire_ItemTypeDecimal       Questionnaire_ItemType           = "decimal"
	Questionnaire_ItemTypeInteger       Questionnaire_ItemType           = "integer"
	Questionnaire_ItemTypeDate          Questionnaire_ItemType           = "date"
	Questionnaire_ItemTypeDateTime      Questionnaire_ItemType           = "dateTime"
	Questionnaire_ItemTypeTime          Questionnaire_ItemType           = "time"
	Questionnaire_ItemTypeString        Questionnaire_ItemType           = "string"
	Questionnaire_ItemTypeText          Questionnaire_ItemType           = "text"
	Questionnaire_ItemTypeUrl           Questionnaire_ItemType           = "url"
	Questionnaire_ItemTypeChoice        Questionnaire_ItemType           = "choice"
	Questionnaire_ItemTypeOpenChoice    Questionnaire_ItemType           = "open-choice"
	Questionnaire_ItemTypeAttachment    Questionnaire_ItemType           = "attachment"
	Questionnaire_ItemTypeReference     Questionnaire_ItemType           = "reference"
	Questionnaire_ItemTypeQuantity      Questionnaire_ItemType           = "quantity"
	Questionnaire_ItemEnableBehaviorAll Questionnaire_ItemEnableBehavior = "all"
	Questionnaire_ItemEnableBehaviorAny Questionnaire_ItemEnableBehavior = "any"
)

// TriggerDefinition is A description of a triggering event. Triggering events can be named events, data
// events, or periodic, as determined by the type element.
type TriggerDefinition struct {
	// A formal name for the event. This may be an absolute URI that identifies the event
	// formally (e.g. from a trigger registry), or a simple relative URI that identifies
	// the event in a local context.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The type of triggering event.
	Type TriggerDefinitionType `json:"type"`
	// Extensions for timingDate
	TimingDate_ext *Element `json:"_timingDate"`
	// Extensions for timingDateTime
	TimingDateTime_ext *Element `json:"_timingDateTime"`
	// The triggering data of the event (if this is a data trigger). If more than one data
	// is requirement is specified, then all the data requirements must be true.
	Data []*DataRequirement `json:"data"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The timing of the event (if this is a periodic trigger).
	TimingTiming *Timing `json:"timingTiming"`
	// The timing of the event (if this is a periodic trigger).
	TimingReference *Reference `json:"timingReference"`
	// The timing of the event (if this is a periodic trigger).
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	TimingDateTime string `json:"timingDateTime"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// A boolean-valued expression that is evaluated in the context of the container of the
	// trigger definition and returns whether or not the trigger fires.
	Condition *Expression `json:"condition"`
	// The timing of the event (if this is a periodic trigger).
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	TimingDate string `json:"timingDate"`
}

type TriggerDefinitionType string

const (
	TriggerDefinitionTypeNamedEvent      TriggerDefinitionType = "named-event"
	TriggerDefinitionTypePeriodic        TriggerDefinitionType = "periodic"
	TriggerDefinitionTypeDataChanged     TriggerDefinitionType = "data-changed"
	TriggerDefinitionTypeDataAdded       TriggerDefinitionType = "data-added"
	TriggerDefinitionTypeDataModified    TriggerDefinitionType = "data-modified"
	TriggerDefinitionTypeDataRemoved     TriggerDefinitionType = "data-removed"
	TriggerDefinitionTypeDataAccessed    TriggerDefinitionType = "data-accessed"
	TriggerDefinitionTypeDataAccessEnded TriggerDefinitionType = "data-access-ended"
)

// ClaimResponse_Payment is This resource provides the adjudication details from the processing of a Claim
// resource.
type ClaimResponse_Payment struct {
	// Issuer's unique identifier for the payment instrument.
	Identifier *Identifier `json:"identifier"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Total amount of all adjustments to this payment included in this transaction which
	// are not related to this claim's adjudication.
	Adjustment *Money `json:"adjustment"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Reason for the payment adjustment.
	AdjustmentReason *CodeableConcept `json:"adjustmentReason"`
	// Estimated date the payment will be issued or the actual issue date of payment.
	Date string `json:"date"`
	// Benefits payable less any payment adjustment.
	Amount *Money `json:"amount,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Whether this represents partial or complete payment of the benefits payable.
	Type *CodeableConcept `json:"type,omitempty"`
}

// SubstanceNucleicAcid_Sugar is Nucleic acids are defined by three distinct elements: the base, sugar and linkage.
// Individual substance/moiety IDs will be created for each of these elements. The
// nucleotide sequence will be always entered in the 5’-3’ direction.
type SubstanceNucleicAcid_Sugar struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The Substance ID of the sugar or sugar-like component that make up the nucleotide.
	Identifier *Identifier `json:"identifier"`
	// The name of the sugar or sugar-like component that make up the nucleotide.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The residues that contain a given sugar will be captured. The order of given
	// residues will be captured in the 5‘-3‘direction consistent with the base
	// sequences listed above.
	ResidueSite string `json:"residueSite"`
	// Extensions for residueSite
	ResidueSite_ext *Element `json:"_residueSite"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// SubstanceSourceMaterial_OrganismGeneral is Source material shall capture information on the taxonomic and anatomical origins as
// well as the fraction of a material that can result in or can be modified to form a
// substance. This set of data elements shall be used to define polymer substances
// isolated from biological matrices. Taxonomic and anatomical origins shall be
// described using a controlled vocabulary as required. This information is captured
// for naturally derived polymers ( . starch) and structurally diverse substances. For
// Organisms belonging to the Kingdom Plantae the Substance level defines the fresh
// material of a single species or infraspecies, the Herbal Drug and the Herbal
// preparation. For Herbal preparations, the fraction information will be captured at
// the Substance information level and additional information for herbal extracts will
// be captured at the Specified Substance Group 1 information level. See for further
// explanation the Substance Class: Structurally Diverse and the herbal annex.
type SubstanceSourceMaterial_OrganismGeneral struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The kingdom of an organism shall be specified.
	Kingdom *CodeableConcept `json:"kingdom"`
	// The phylum of an organism shall be specified.
	Phylum *CodeableConcept `json:"phylum"`
	// The class of an organism shall be specified.
	Class *CodeableConcept `json:"class"`
	// The order of an organism shall be specified,.
	Order *CodeableConcept `json:"order"`
}

// CapabilityStatement_Interaction is A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server
// for a particular version of FHIR that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type CapabilityStatement_Interaction struct {
	// Guidance specific to the implementation of this operation, such as 'delete is a
	// logical delete' or 'updates are only allowed with version id' or 'creates permitted
	// from pre-authorized certificates only'.
	Documentation string `json:"documentation"`
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Coded identifier of the operation, supported by the system resource.
	Code CapabilityStatement_InteractionCode `json:"code"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
}

type CapabilityStatement_InteractionCode string

const (
	CapabilityStatement_InteractionCodeRead            CapabilityStatement_InteractionCode = "read"
	CapabilityStatement_InteractionCodeVread           CapabilityStatement_InteractionCode = "vread"
	CapabilityStatement_InteractionCodeUpdate          CapabilityStatement_InteractionCode = "update"
	CapabilityStatement_InteractionCodePatch           CapabilityStatement_InteractionCode = "patch"
	CapabilityStatement_InteractionCodeDelete          CapabilityStatement_InteractionCode = "delete"
	CapabilityStatement_InteractionCodeHistoryInstance CapabilityStatement_InteractionCode = "history-instance"
	CapabilityStatement_InteractionCodeHistoryType     CapabilityStatement_InteractionCode = "history-type"
	CapabilityStatement_InteractionCodeCreate          CapabilityStatement_InteractionCode = "create"
	CapabilityStatement_InteractionCodeSearchType      CapabilityStatement_InteractionCode = "search-type"
)

// CapabilityStatement_SearchParam is A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server
// for a particular version of FHIR that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type CapabilityStatement_SearchParam struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// An absolute URI that is a formal reference to where this parameter was first
	// defined, so that a client can be confident of the meaning of the search parameter (a
	// reference to [[[SearchParameter.url]]]). This element SHALL be populated if the
	// search parameter refers to a SearchParameter defined by the FHIR core specification
	// or externally defined IGs.
	Definition string `json:"definition"`
	// The type of value a search parameter refers to, and how the content is interpreted.
	Type CapabilityStatement_SearchParamType `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// This allows documentation of any distinct behaviors about how the search parameter
	// is used.  For example, text matching algorithms.
	Documentation string `json:"documentation"`
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The name of the search parameter used in the interface.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
}

type CapabilityStatement_SearchParamType string

const (
	CapabilityStatement_SearchParamTypeNumber    CapabilityStatement_SearchParamType = "number"
	CapabilityStatement_SearchParamTypeDate      CapabilityStatement_SearchParamType = "date"
	CapabilityStatement_SearchParamTypeString    CapabilityStatement_SearchParamType = "string"
	CapabilityStatement_SearchParamTypeToken     CapabilityStatement_SearchParamType = "token"
	CapabilityStatement_SearchParamTypeReference CapabilityStatement_SearchParamType = "reference"
	CapabilityStatement_SearchParamTypeComposite CapabilityStatement_SearchParamType = "composite"
	CapabilityStatement_SearchParamTypeQuantity  CapabilityStatement_SearchParamType = "quantity"
	CapabilityStatement_SearchParamTypeUri       CapabilityStatement_SearchParamType = "uri"
	CapabilityStatement_SearchParamTypeSpecial   CapabilityStatement_SearchParamType = "special"
)

// DeviceDefinition_Material is The characteristics, operational status and capabilities of a medical-related
// component of a medical device.
type DeviceDefinition_Material struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The substance.
	Substance *CodeableConcept `json:"substance,omitempty"`
	// Indicates an alternative material of the device.
	Alternate bool `json:"alternate"`
	// Extensions for alternate
	Alternate_ext *Element `json:"_alternate"`
	// Whether the substance is a known or suspected allergen.
	AllergenicIndicator bool `json:"allergenicIndicator"`
	// Extensions for allergenicIndicator
	AllergenicIndicator_ext *Element `json:"_allergenicIndicator"`
}

// MedicinalProduct_ManufacturingBusinessOperation is Detailed definition of a medicinal product, typically for uses other than direct
// patient care (e.g. regulatory use).
type MedicinalProduct_ManufacturingBusinessOperation struct {
	// Extensions for effectiveDate
	EffectiveDate_ext *Element `json:"_effectiveDate"`
	// To indicate if this proces is commercially confidential.
	ConfidentialityIndicator *CodeableConcept `json:"confidentialityIndicator"`
	// The manufacturer or establishment associated with the process.
	Manufacturer []*Reference `json:"manufacturer"`
	// A regulator which oversees the operation.
	Regulator *Reference `json:"regulator"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Regulatory authorization reference number.
	AuthorisationReferenceNumber *Identifier `json:"authorisationReferenceNumber"`
	// Regulatory authorization date.
	EffectiveDate string `json:"effectiveDate"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of manufacturing operation.
	OperationType *CodeableConcept `json:"operationType"`
}

// StructureMap_Group is A Map of relationships between 2 structures that can be used to transform data.
type StructureMap_Group struct {
	// Extensions for typeMode
	TypeMode_ext *Element `json:"_typeMode"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for extends
	Extends_ext *Element `json:"_extends"`
	// A unique name for the group for the convenience of human readers.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Another group that this group adds rules to.
	Extends string `json:"extends"`
	// If this is the default rule set to apply for the source type or this combination of
	// types.
	TypeMode StructureMap_GroupTypeMode `json:"typeMode"`
	// Additional supporting documentation that explains the purpose of the group and the
	// types of mappings within it.
	Documentation string `json:"documentation"`
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A name assigned to an instance of data. The instance must be provided when the
	// mapping is invoked.
	Input []*StructureMap_Input `json:"input,omitempty"`
	// Transform Rule from source to target.
	Rule []*StructureMap_Rule `json:"rule,omitempty"`
}

type StructureMap_GroupTypeMode string

const (
	StructureMap_GroupTypeModeNone         StructureMap_GroupTypeMode = "none"
	StructureMap_GroupTypeModeTypes        StructureMap_GroupTypeMode = "types"
	StructureMap_GroupTypeModeTypeAndTypes StructureMap_GroupTypeMode = "type-and-types"
)

// TestReport_Participant is A summary of information based on the results of executing a TestScript.
type TestReport_Participant struct {
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// The uri of the participant. An absolute URL is preferred.
	Uri string `json:"uri"`
	// Extensions for uri
	Uri_ext *Element `json:"_uri"`
	// Extensions for display
	Display_ext *Element `json:"_display"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of participant.
	Type TestReport_ParticipantType `json:"type"`
	// The display name of the participant.
	Display string `json:"display"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

type TestReport_ParticipantType string

const (
	TestReport_ParticipantTypeTestEngine TestReport_ParticipantType = "test-engine"
	TestReport_ParticipantTypeClient     TestReport_ParticipantType = "client"
	TestReport_ParticipantTypeServer     TestReport_ParticipantType = "server"
)

// VerificationResult_PrimarySource is Describes validation requirements, source(s), status and dates for one or more
// elements.
type VerificationResult_PrimarySource struct {
	// Status of the validation of the target against the primary source (successful;
	// failed; unknown).
	ValidationStatus *CodeableConcept `json:"validationStatus"`
	// Extensions for validationDate
	ValidationDate_ext *Element `json:"_validationDate"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Type of primary source (License Board; Primary Education; Continuing Education;
	// Postal Service; Relationship owner; Registration Authority; legal source; issuing
	// source; authoritative source).
	Type []*CodeableConcept `json:"type"`
	// Method for communicating with the primary source (manual; API; Push).
	CommunicationMethod []*CodeableConcept `json:"communicationMethod"`
	// Type of alerts/updates the primary source can send (specific requested changes; any
	// changes; as defined by source).
	PushTypeAvailable []*CodeableConcept `json:"pushTypeAvailable"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Reference to the primary source.
	Who *Reference `json:"who"`
	// When the target was validated against the primary source.
	ValidationDate string `json:"validationDate"`
	// Ability of the primary source to push updates/alerts (yes; no; undetermined).
	CanPushUpdates *CodeableConcept `json:"canPushUpdates"`
}

// Contract_Legal is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract_Legal struct {
	// Contract legal text in human renderable form.
	ContentAttachment *Attachment `json:"contentAttachment"`
	// Contract legal text in human renderable form.
	ContentReference *Reference `json:"contentReference"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// DetectedIssue_Mitigation is Indicates an actual or potential clinical issue with or between one or more active
// or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective
// treatment frequency, Procedure-condition conflict, etc.
type DetectedIssue_Mitigation struct {
	// Describes the action that was taken or the observation that was made that
	// reduces/eliminates the risk associated with the identified issue.
	Action *CodeableConcept `json:"action,omitempty"`
	// Indicates when the mitigating action was documented.
	Date string `json:"date"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Identifies the practitioner who determined the mitigation and takes responsibility
	// for the mitigation step occurring.
	Author *Reference `json:"author"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// ExplanationOfBenefit_SubDetail is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_SubDetail struct {
	// Code to identify the general type of benefits under which products and services are
	// provided.
	Category *CodeableConcept `json:"category"`
	// Item typification or modifiers codes to convey additional context for the product or
	// service.
	Modifier []*CodeableConcept `json:"modifier"`
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity"`
	// A real number that represents a multiplier used in determining the overall value of
	// services delivered and/or goods received. The concept of a Factor allows for a
	// discount or surcharge multiplier to be applied to a monetary amount.
	Factor float64 `json:"factor"`
	// Unique Device Identifiers associated with this line item.
	Udi []*Reference `json:"udi"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of revenue or cost center providing the product and/or service.
	Revenue *CodeableConcept `json:"revenue"`
	// A claim detail line. Either a simple (a product or service) or a 'group' of
	// sub-details which are simple items.
	Sequence uint64 `json:"sequence"`
	// When the value is a group code then this item collects a set of related claim
	// details, otherwise this contains the product, service, drug or other billing code
	// for the item.
	ProductOrService *CodeableConcept `json:"productOrService,omitempty"`
	// Extensions for noteNumber
	NoteNumber_ext []*Element `json:"_noteNumber"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// Identifies the program under which this may be recovered.
	ProgramCode []*CodeableConcept `json:"programCode"`
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []uint64 `json:"noteNumber"`
	// The adjudication results.
	Adjudication []*ExplanationOfBenefit_Adjudication `json:"adjudication"`
	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *Money `json:"unitPrice"`
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
	// The quantity times the unit price for an additional service or product or charge.
	Net *Money `json:"net"`
}

// PlanDefinition_Target is This resource allows for the definition of various types of plans as a sharable,
// consumable, and executable artifact. The resource is general enough to support the
// description of a broad range of clinical artifacts such as clinical decision support
// rules, order sets and protocols.
type PlanDefinition_Target struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The parameter whose value is to be tracked, e.g. body weight, blood pressure, or
	// hemoglobin A1c level.
	Measure *CodeableConcept `json:"measure"`
	// The target value of the measure to be achieved to signify fulfillment of the goal,
	// e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be
	// specified. When a low value is missing, it indicates that the goal is achieved at
	// any value at or below the high value. Similarly, if the high value is missing, it
	// indicates that the goal is achieved at any value at or above the low value.
	DetailQuantity *Quantity `json:"detailQuantity"`
	// The target value of the measure to be achieved to signify fulfillment of the goal,
	// e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be
	// specified. When a low value is missing, it indicates that the goal is achieved at
	// any value at or below the high value. Similarly, if the high value is missing, it
	// indicates that the goal is achieved at any value at or above the low value.
	DetailRange *Range `json:"detailRange"`
	// The target value of the measure to be achieved to signify fulfillment of the goal,
	// e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be
	// specified. When a low value is missing, it indicates that the goal is achieved at
	// any value at or below the high value. Similarly, if the high value is missing, it
	// indicates that the goal is achieved at any value at or above the low value.
	DetailCodeableConcept *CodeableConcept `json:"detailCodeableConcept"`
	// Indicates the timeframe after the start of the goal in which the goal should be met.
	Due *Duration `json:"due"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// CapabilityStatement_Implementation is A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server
// for a particular version of FHIR that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type CapabilityStatement_Implementation struct {
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// An absolute base URL for the implementation.  This forms the base for REST
	// interfaces as well as the mailbox and document interfaces.
	Url string `json:"url"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// The organization responsible for the management of the instance and oversight of the
	// data on the server at the specified URL.
	Custodian *Reference `json:"custodian"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Information about the specific installation that this capability statement relates
	// to.
	Description string `json:"description"`
}

// TerminologyCapabilities_Implementation is A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a
// FHIR Terminology Server that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type TerminologyCapabilities_Implementation struct {
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Information about the specific installation that this terminology capability
	// statement relates to.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// An absolute base URL for the implementation.
	Url string `json:"url"`
}

// Element is Base definition for all elements in a resource.
type Element struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Bundle_Link is A container for a collection of resources.
type Bundle_Link struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A name which details the functional use for this link - see
	// [http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1](http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1).
	Relation string `json:"relation"`
	// Extensions for relation
	Relation_ext *Element `json:"_relation"`
	// The reference details for the link.
	Url string `json:"url"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
}

// Claim_SubDetail is A provider issued list of professional services and products which have been
// provided, or are to be provided, to a patient which is sent to an insurer for
// reimbursement.
type Claim_SubDetail struct {
	// The type of revenue or cost center providing the product and/or service.
	Revenue *CodeableConcept `json:"revenue"`
	// Code to identify the general type of benefits under which products and services are
	// provided.
	Category *CodeableConcept `json:"category"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// Unique Device Identifiers associated with this line item.
	Udi []*Reference `json:"udi"`
	// When the value is a group code then this item collects a set of related claim
	// details, otherwise this contains the product, service, drug or other billing code
	// for the item.
	ProductOrService *CodeableConcept `json:"productOrService,omitempty"`
	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *Money `json:"unitPrice"`
	// A real number that represents a multiplier used in determining the overall value of
	// services delivered and/or goods received. The concept of a Factor allows for a
	// discount or surcharge multiplier to be applied to a monetary amount.
	Factor float64 `json:"factor"`
	// The quantity times the unit price for an additional service or product or charge.
	Net *Money `json:"net"`
	// A number to uniquely identify item entries.
	Sequence uint64 `json:"sequence"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Item typification or modifiers codes to convey additional context for the product or
	// service.
	Modifier []*CodeableConcept `json:"modifier"`
	// Identifies the program under which this may be recovered.
	ProgramCode []*CodeableConcept `json:"programCode"`
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity"`
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// MolecularSequence_Outer is Raw data describing a biological sequence.
type MolecularSequence_Outer struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Structural variant outer start. If the coordinate system is either 0-based or
	// 1-based, then start position is inclusive.
	Start int64 `json:"start"`
	// Extensions for start
	Start_ext *Element `json:"_start"`
	// Structural variant outer end. If the coordinate system is 0-based then end is
	// exclusive and does not include the last position. If the coordinate system is
	// 1-base, then end is inclusive and includes the last position.
	End int64 `json:"end"`
	// Extensions for end
	End_ext *Element `json:"_end"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Composition_Attester is A set of healthcare-related information that is assembled together into a single
// logical package that provides a single coherent statement of meaning, establishes
// its own context and that has clinical attestation with regard to who is making the
// statement. A Composition defines the structure and narrative content necessary for a
// document. However, a Composition alone does not constitute a document. Rather, the
// Composition must be the first entry in a Bundle where Bundle.type=document, and any
// other resources referenced from Composition must be included as subsequent entries
// in the Bundle (for example Patient, Practitioner, Encounter, etc.).
type Composition_Attester struct {
	// When the composition was attested by the party.
	Time string `json:"time"`
	// Extensions for time
	Time_ext *Element `json:"_time"`
	// Who attested the composition in the specified way.
	Party *Reference `json:"party"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of attestation the authenticator offers.
	Mode Composition_AttesterMode `json:"mode"`
	// Extensions for mode
	Mode_ext *Element `json:"_mode"`
}

type Composition_AttesterMode string

const (
	Composition_AttesterModePersonal     Composition_AttesterMode = "personal"
	Composition_AttesterModeProfessional Composition_AttesterMode = "professional"
	Composition_AttesterModeLegal        Composition_AttesterMode = "legal"
	Composition_AttesterModeOfficial     Composition_AttesterMode = "official"
)

// SubstanceReferenceInformation_Classification is Todo.
type SubstanceReferenceInformation_Classification struct {
	// Todo.
	Domain *CodeableConcept `json:"domain"`
	// Todo.
	Classification *CodeableConcept `json:"classification"`
	// Todo.
	Subtype []*CodeableConcept `json:"subtype"`
	// Todo.
	Source []*Reference `json:"source"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// ProductShelfLife is The shelf-life and storage information for a medicinal product item or container can
// be described using this class.
type ProductShelfLife struct {
	// Special precautions for storage, if any, can be specified using an appropriate
	// controlled vocabulary The controlled term and the controlled term identifier shall
	// be specified.
	SpecialPrecautionsForStorage []*CodeableConcept `json:"specialPrecautionsForStorage"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Unique identifier for the packaged Medicinal Product.
	Identifier *Identifier `json:"identifier"`
	// This describes the shelf life, taking into account various scenarios such as shelf
	// life of the packaged Medicinal Product itself, shelf life after transformation where
	// necessary and shelf life after the first opening of a bottle, etc. The shelf life
	// type shall be specified using an appropriate controlled vocabulary The controlled
	// term and the controlled term identifier shall be specified.
	Type *CodeableConcept `json:"type,omitempty"`
	// The shelf life time period can be specified using a numerical value for the period
	// of time and its unit of time measurement The unit of measurement shall be specified
	// in accordance with ISO 11240 and the resulting terminology The symbol and the symbol
	// identifier shall be used.
	Period *Quantity `json:"period,omitempty"`
}

// ExplanationOfBenefit_Related is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_Related struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Reference to a related claim.
	Claim *Reference `json:"claim"`
	// A code to convey how the claims are related.
	Relationship *CodeableConcept `json:"relationship"`
	// An alternate organizational reference to the case or file to which this particular
	// claim pertains.
	Reference *Identifier `json:"reference"`
}

// ExplanationOfBenefit_Accident is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_Accident struct {
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The type or context of the accident event for the purposes of selection of potential
	// insurance coverages and determination of coordination between insurers.
	Type *CodeableConcept `json:"type"`
	// The physical location of the accident event.
	LocationAddress *Address `json:"locationAddress"`
	// The physical location of the accident event.
	LocationReference *Reference `json:"locationReference"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Date of an accident event  related to the products and services contained in the
	// claim.
	Date string `json:"date"`
}

// HealthcareService_AvailableTime is The details of a healthcare service available at a location.
type HealthcareService_AvailableTime struct {
	// Extensions for availableStartTime
	AvailableStartTime_ext *Element `json:"_availableStartTime"`
	// Is this always available? (hence times are irrelevant) e.g. 24 hour service.
	AllDay bool `json:"allDay"`
	// Extensions for allDay
	AllDay_ext *Element `json:"_allDay"`
	// The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
	AvailableStartTime string `json:"availableStartTime"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates which days of the week are available between the start and end Times.
	DaysOfWeek []HealthcareService_AvailableTimeDaysOfWeek `json:"daysOfWeek"`
	// Extensions for daysOfWeek
	DaysOfWeek_ext []*Element `json:"_daysOfWeek"`
	// The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
	AvailableEndTime string `json:"availableEndTime"`
	// Extensions for availableEndTime
	AvailableEndTime_ext *Element `json:"_availableEndTime"`
}

type HealthcareService_AvailableTimeDaysOfWeek string

const ()

// MedicinalProduct_SpecialDesignation is Detailed definition of a medicinal product, typically for uses other than direct
// patient care (e.g. regulatory use).
type MedicinalProduct_SpecialDesignation struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Condition for which the medicinal use applies.
	IndicationReference *Reference `json:"indicationReference"`
	// For example granted, pending, expired or withdrawn.
	Status *CodeableConcept `json:"status"`
	// Animal species for which this applies.
	Species *CodeableConcept `json:"species"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Identifier for the designation, or procedure number.
	Identifier []*Identifier `json:"identifier"`
	// The type of special designation, e.g. orphan drug, minor use.
	Type *CodeableConcept `json:"type"`
	// The intended use of the product, e.g. prevention, treatment.
	IntendedUse *CodeableConcept `json:"intendedUse"`
	// Condition for which the medicinal use applies.
	IndicationCodeableConcept *CodeableConcept `json:"indicationCodeableConcept"`
	// Date when the designation was granted.
	Date string `json:"date"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
}

// ExplanationOfBenefit_Payee is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_Payee struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Type of Party to be reimbursed: Subscriber, provider, other.
	Type *CodeableConcept `json:"type"`
	// Reference to the individual or organization to whom any payment will be made.
	Party *Reference `json:"party"`
}

// DocumentReference_Content is A reference to a document of any kind for any purpose. Provides metadata about the
// document so that the document can be discovered and managed. The scope of a document
// is any seralized object with a mime-type, so includes formal patient centric
// documents (CDA), cliical notes, scanned paper, and non-patient specific documents
// like policy text.
type DocumentReference_Content struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The document or URL of the document along with critical metadata to prove content
	// has integrity.
	Attachment *Attachment `json:"attachment,omitempty"`
	// An identifier of the document encoding, structure, and template that the document
	// conforms to beyond the base format indicated in the mimeType.
	Format *Coding `json:"format"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// Goal_Target is Describes the intended objective(s) for a patient, group or organization care, for
// example, weight loss, restoring an activity of daily living, obtaining herd immunity
// via immunization, meeting a process improvement objective, etc.
type Goal_Target struct {
	// The target value of the focus to be achieved to signify the fulfillment of the goal,
	// e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be
	// specified. When a low value is missing, it indicates that the goal is achieved at
	// any focus value at or below the high value. Similarly, if the high value is missing,
	// it indicates that the goal is achieved at any focus value at or above the low value.
	// pattern ^true|false$
	DetailBoolean bool `json:"detailBoolean"`
	// Extensions for detailBoolean
	DetailBoolean_ext *Element `json:"_detailBoolean"`
	// Extensions for detailInteger
	DetailInteger_ext *Element `json:"_detailInteger"`
	// Indicates either the date or the duration after start by which the goal should be
	// met.
	DueDuration *Duration `json:"dueDuration"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The target value of the focus to be achieved to signify the fulfillment of the goal,
	// e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be
	// specified. When a low value is missing, it indicates that the goal is achieved at
	// any focus value at or below the high value. Similarly, if the high value is missing,
	// it indicates that the goal is achieved at any focus value at or above the low value.
	DetailRange *Range `json:"detailRange"`
	// Extensions for detailString
	DetailString_ext *Element `json:"_detailString"`
	// Extensions for dueDate
	DueDate_ext *Element `json:"_dueDate"`
	// The target value of the focus to be achieved to signify the fulfillment of the goal,
	// e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be
	// specified. When a low value is missing, it indicates that the goal is achieved at
	// any focus value at or below the high value. Similarly, if the high value is missing,
	// it indicates that the goal is achieved at any focus value at or above the low value.
	DetailRatio *Ratio `json:"detailRatio"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The parameter whose value is being tracked, e.g. body weight, blood pressure, or
	// hemoglobin A1c level.
	Measure *CodeableConcept `json:"measure"`
	// The target value of the focus to be achieved to signify the fulfillment of the goal,
	// e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be
	// specified. When a low value is missing, it indicates that the goal is achieved at
	// any focus value at or below the high value. Similarly, if the high value is missing,
	// it indicates that the goal is achieved at any focus value at or above the low value.
	DetailCodeableConcept *CodeableConcept `json:"detailCodeableConcept"`
	// The target value of the focus to be achieved to signify the fulfillment of the goal,
	// e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be
	// specified. When a low value is missing, it indicates that the goal is achieved at
	// any focus value at or below the high value. Similarly, if the high value is missing,
	// it indicates that the goal is achieved at any focus value at or above the low value.
	// pattern ^[ \r\n\t\S]+$
	DetailString string `json:"detailString"`
	// The target value of the focus to be achieved to signify the fulfillment of the goal,
	// e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be
	// specified. When a low value is missing, it indicates that the goal is achieved at
	// any focus value at or below the high value. Similarly, if the high value is missing,
	// it indicates that the goal is achieved at any focus value at or above the low value.
	DetailQuantity *Quantity `json:"detailQuantity"`
	// The target value of the focus to be achieved to signify the fulfillment of the goal,
	// e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be
	// specified. When a low value is missing, it indicates that the goal is achieved at
	// any focus value at or below the high value. Similarly, if the high value is missing,
	// it indicates that the goal is achieved at any focus value at or above the low value.
	// pattern ^-?([0]|([1-9][0-9]*))$
	DetailInteger int64 `json:"detailInteger"`
	// Indicates either the date or the duration after start by which the goal should be
	// met.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	DueDate string `json:"dueDate"`
}

// SubstanceNucleicAcid_Linkage is Nucleic acids are defined by three distinct elements: the base, sugar and linkage.
// Individual substance/moiety IDs will be created for each of these elements. The
// nucleotide sequence will be always entered in the 5’-3’ direction.
type SubstanceNucleicAcid_Linkage struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The entity that links the sugar residues together should also be captured for nearly
	// all naturally occurring nucleic acid the linkage is a phosphate group. For many
	// synthetic oligonucleotides phosphorothioate linkages are often seen. Linkage
	// connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or
	// 5’-5’ this should be specified.
	Connectivity string `json:"connectivity"`
	// Extensions for connectivity
	Connectivity_ext *Element `json:"_connectivity"`
	// Each linkage will be registered as a fragment and have an ID.
	Identifier *Identifier `json:"identifier"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Residues shall be captured as described in 5.3.6.8.3.
	ResidueSite string `json:"residueSite"`
	// Extensions for residueSite
	ResidueSite_ext *Element `json:"_residueSite"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Each linkage will be registered as a fragment and have at least one name. A single
	// name shall be assigned to each linkage.
	Name string `json:"name"`
}

// Immunization_Reaction is Describes the event of a patient being administered a vaccine or a record of an
// immunization as reported by a patient, a clinician or another party.
type Immunization_Reaction struct {
	// Self-reported indicator.
	Reported bool `json:"reported"`
	// Extensions for reported
	Reported_ext *Element `json:"_reported"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Date of reaction to the immunization.
	Date string `json:"date"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Details of the reaction.
	Detail *Reference `json:"detail"`
}

// SubstanceSpecification_Property is The detailed description of a substance, typically at a level beyond what is used
// for prescribing.
type SubstanceSpecification_Property struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A substance upon which a defining property depends (e.g. for solubility: in water,
	// in alcohol).
	DefiningSubstanceReference *Reference `json:"definingSubstanceReference"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A category for this property, e.g. Physical, Chemical, Enzymatic.
	Category *CodeableConcept `json:"category"`
	// Property type e.g. viscosity, pH, isoelectric point.
	Code *CodeableConcept `json:"code"`
	// Parameters that were used in the measurement of a property (e.g. for viscosity:
	// measured at 20C with a pH of 7.1).
	Parameters string `json:"parameters"`
	// Extensions for parameters
	Parameters_ext *Element `json:"_parameters"`
	// A substance upon which a defining property depends (e.g. for solubility: in water,
	// in alcohol).
	DefiningSubstanceCodeableConcept *CodeableConcept `json:"definingSubstanceCodeableConcept"`
	// Quantitative value for this property.
	AmountQuantity *Quantity `json:"amountQuantity"`
	// Quantitative value for this property.
	// pattern ^[ \r\n\t\S]+$
	AmountString string `json:"amountString"`
	// Extensions for amountString
	AmountString_ext *Element `json:"_amountString"`
}

// SubstanceReferenceInformation_GeneElement is Todo.
type SubstanceReferenceInformation_GeneElement struct {
	// Todo.
	Type *CodeableConcept `json:"type"`
	// Todo.
	Element *Identifier `json:"element"`
	// Todo.
	Source []*Reference `json:"source"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// ClaimResponse_Insurance is This resource provides the adjudication details from the processing of a Claim
// resource.
type ClaimResponse_Insurance struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A number to uniquely identify insurance entries and provide a sequence of coverages
	// to convey coordination of benefit order.
	Sequence uint64 `json:"sequence"`
	// A flag to indicate that this Coverage is to be used for adjudication of this claim
	// when set to true.
	Focal bool `json:"focal"`
	// Extensions for focal
	Focal_ext *Element `json:"_focal"`
	// Reference to the insurance card level information contained in the Coverage
	// resource. The coverage issuing insurer will use these details to locate the
	// patient's actual coverage within the insurer's information system.
	Coverage *Reference `json:"coverage,omitempty"`
	// Extensions for businessArrangement
	BusinessArrangement_ext *Element `json:"_businessArrangement"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// A business agreement number established between the provider and the insurer for
	// special business processing purposes.
	BusinessArrangement string `json:"businessArrangement"`
	// The result of the adjudication of the line items for the Coverage specified in this
	// insurance.
	ClaimResponse *Reference `json:"claimResponse"`
}

// ExplanationOfBenefit_SubDetail1 is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_SubDetail1 struct {
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity"`
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
	// The quantity times the unit price for an additional service or product or charge.
	Net *Money `json:"net"`
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []uint64 `json:"noteNumber"`
	// When the value is a group code then this item collects a set of related claim
	// details, otherwise this contains the product, service, drug or other billing code
	// for the item.
	ProductOrService *CodeableConcept `json:"productOrService,omitempty"`
	// Item typification or modifiers codes to convey additional context for the product or
	// service.
	Modifier []*CodeableConcept `json:"modifier"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *Money `json:"unitPrice"`
	// A real number that represents a multiplier used in determining the overall value of
	// services delivered and/or goods received. The concept of a Factor allows for a
	// discount or surcharge multiplier to be applied to a monetary amount.
	Factor float64 `json:"factor"`
	// Extensions for noteNumber
	NoteNumber_ext []*Element `json:"_noteNumber"`
	// The adjudication results.
	Adjudication []*ExplanationOfBenefit_Adjudication `json:"adjudication"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// MedicationRequest_DispenseRequest is An order or request for both supply of the medication and the instructions for
// administration of the medication to a patient. The resource is called
// "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to
// generalize the use across inpatient and outpatient settings, including care plans,
// etc., and to harmonize with workflow patterns.
type MedicationRequest_DispenseRequest struct {
	// Indicates the intended dispensing Organization specified by the prescriber.
	Performer *Reference `json:"performer"`
	// The minimum period of time that must occur between dispenses of the medication.
	DispenseInterval *Duration `json:"dispenseInterval"`
	// This indicates the validity period of a prescription (stale dating the Prescription).
	ValidityPeriod *Period `json:"validityPeriod"`
	// An integer indicating the number of times, in addition to the original dispense,
	// (aka refills or repeats) that the patient can receive the prescribed medication.
	// Usage Notes: This integer does not include the original order dispense. This means
	// that if an order indicates dispense 30 tablets plus "3 repeats", then the order can
	// be dispensed a total of 4 times and the patient can receive a total of 120 tablets.
	// A prescriber may explicitly say that zero refills are permitted after the initial
	// dispense.
	NumberOfRepeatsAllowed uint64 `json:"numberOfRepeatsAllowed"`
	// Indicates the quantity or duration for the first dispense of the medication.
	InitialFill *MedicationRequest_InitialFill `json:"initialFill"`
	// Extensions for numberOfRepeatsAllowed
	NumberOfRepeatsAllowed_ext *Element `json:"_numberOfRepeatsAllowed"`
	// The amount that is to be dispensed for one fill.
	Quantity *Quantity `json:"quantity"`
	// Identifies the period time over which the supplied product is expected to be used,
	// or the length of time the dispense is expected to last.
	ExpectedSupplyDuration *Duration `json:"expectedSupplyDuration"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// MedicinalProductAuthorization_Procedure is The regulatory authorization of a medicinal product.
type MedicinalProductAuthorization_Procedure struct {
	// Date of procedure.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	DateDateTime string `json:"dateDateTime"`
	// Applcations submitted to obtain a marketing authorization.
	Application []*MedicinalProductAuthorization_Procedure `json:"application"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Date of procedure.
	DatePeriod *Period `json:"datePeriod"`
	// Identifier for this procedure.
	Identifier *Identifier `json:"identifier"`
	// Type of procedure.
	Type *CodeableConcept `json:"type,omitempty"`
	// Extensions for dateDateTime
	DateDateTime_ext *Element `json:"_dateDateTime"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Specimen_Processing is A sample to be used for analysis.
type Specimen_Processing struct {
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// A record of the time or period when the specimen processing occurred.  For example
	// the time of sample fixation or the period of time the sample was in formalin.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	TimeDateTime string `json:"timeDateTime"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Textual description of procedure.
	Description string `json:"description"`
	// A coded value specifying the procedure used to process the specimen.
	Procedure *CodeableConcept `json:"procedure"`
	// Material used in the processing step.
	Additive []*Reference `json:"additive"`
	// Extensions for timeDateTime
	TimeDateTime_ext *Element `json:"_timeDateTime"`
	// A record of the time or period when the specimen processing occurred.  For example
	// the time of sample fixation or the period of time the sample was in formalin.
	TimePeriod *Period `json:"timePeriod"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// Ratio is A relationship of two Quantity values - expressed as a numerator and a denominator.
type Ratio struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The value of the numerator.
	Numerator *Quantity `json:"numerator"`
	// The value of the denominator.
	Denominator *Quantity `json:"denominator"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// InsurancePlan_SpecificCost is Details of a Health Insurance product/plan provided by an organization.
type InsurancePlan_SpecificCost struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance
	// Abuse; Hospice, Home Health).
	Category *CodeableConcept `json:"category,omitempty"`
	// List of the specific benefits under this category of benefit.
	Benefit []*InsurancePlan_Benefit1 `json:"benefit"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// QuestionnaireResponse_Answer is A structured set of questions and their answers. The questions are ordered and
// grouped into coherent subsets, corresponding to the structure of the grouping of the
// questionnaire being responded to.
type QuestionnaireResponse_Answer struct {
	// The answer (or one of the answers) provided by the respondent to the question.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	ValueTime string `json:"valueTime"`
	// Extensions for valueTime
	ValueTime_ext *Element `json:"_valueTime"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// Extensions for valueUri
	ValueUri_ext *Element `json:"_valueUri"`
	// The answer (or one of the answers) provided by the respondent to the question.
	ValueReference *Reference `json:"valueReference"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// Extensions for valueDate
	ValueDate_ext *Element `json:"_valueDate"`
	// The answer (or one of the answers) provided by the respondent to the question.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	ValueDate string `json:"valueDate"`
	// The answer (or one of the answers) provided by the respondent to the question.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	ValueDateTime string `json:"valueDateTime"`
	// The answer (or one of the answers) provided by the respondent to the question.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// The answer (or one of the answers) provided by the respondent to the question.
	// pattern ^\S*$
	ValueUri string `json:"valueUri"`
	// The answer (or one of the answers) provided by the respondent to the question.
	ValueCoding *Coding `json:"valueCoding"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The answer (or one of the answers) provided by the respondent to the question.
	// pattern ^-?([0]|([1-9][0-9]*))$
	ValueInteger int64 `json:"valueInteger"`
	// Extensions for valueInteger
	ValueInteger_ext *Element `json:"_valueInteger"`
	// Nested groups and/or questions found within this particular answer.
	Item []*QuestionnaireResponse_Item `json:"item"`
	// Extensions for valueDateTime
	ValueDateTime_ext *Element `json:"_valueDateTime"`
	// The answer (or one of the answers) provided by the respondent to the question.
	ValueAttachment *Attachment `json:"valueAttachment"`
	// Extensions for valueDecimal
	ValueDecimal_ext *Element `json:"_valueDecimal"`
	// The answer (or one of the answers) provided by the respondent to the question.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The answer (or one of the answers) provided by the respondent to the question.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// The answer (or one of the answers) provided by the respondent to the question.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	ValueDecimal float64 `json:"valueDecimal"`
}

// SubstanceSpecification_Name is The detailed description of a substance, typically at a level beyond what is used
// for prescribing.
type SubstanceSpecification_Name struct {
	// The status of the name.
	Status *CodeableConcept `json:"status"`
	// A synonym of this name.
	Synonym []*SubstanceSpecification_Name `json:"synonym"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The actual name.
	Name string `json:"name"`
	// A translation for this name.
	Translation []*SubstanceSpecification_Name `json:"translation"`
	// The use context of this name for example if there is a different name a drug active
	// ingredient as opposed to a food colour additive.
	Domain []*CodeableConcept `json:"domain"`
	// The jurisdiction where this name applies.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// Details of the official nature of this name.
	Official []*SubstanceSpecification_Official `json:"official"`
	// If this is the preferred name for this substance.
	Preferred bool `json:"preferred"`
	// Extensions for preferred
	Preferred_ext *Element `json:"_preferred"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Name type.
	Type *CodeableConcept `json:"type"`
	// Language of the name.
	Language []*CodeableConcept `json:"language"`
	// Supporting literature.
	Source []*Reference `json:"source"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Task_Input is A task to be performed.
type Task_Input struct {
	// The value of the input parameter as a basic type.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// Extensions for valuePositiveInt
	ValuePositiveInt_ext *Element `json:"_valuePositiveInt"`
	// The value of the input parameter as a basic type.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// The value of the input parameter as a basic type.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	ValueTime string `json:"valueTime"`
	// Extensions for valueTime
	ValueTime_ext *Element `json:"_valueTime"`
	// A code or description indicating how the input is intended to be used as part of the
	// task execution.
	Type *CodeableConcept `json:"type,omitempty"`
	// The value of the input parameter as a basic type.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	ValueDateTime string `json:"valueDateTime"`
	// The value of the input parameter as a basic type.
	// pattern ^-?([0]|([1-9][0-9]*))$
	ValueInteger int64 `json:"valueInteger"`
	// The value of the input parameter as a basic type.
	// pattern ^[1-9][0-9]*$
	ValuePositiveInt uint64 `json:"valuePositiveInt"`
	// The value of the input parameter as a basic type.
	ValueAddress *Address `json:"valueAddress"`
	// The value of the input parameter as a basic type.
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept"`
	// The value of the input parameter as a basic type.
	ValueCoding *Coding `json:"valueCoding"`
	// The value of the input parameter as a basic type.
	ValueDistance *Distance `json:"valueDistance"`
	// The value of the input parameter as a basic type.
	ValueDataRequirement *DataRequirement `json:"valueDataRequirement"`
	// Extensions for valueInstant
	ValueInstant_ext *Element `json:"_valueInstant"`
	// The value of the input parameter as a basic type.
	ValueAge *Age `json:"valueAge"`
	// The value of the input parameter as a basic type.
	ValueSignature *Signature `json:"valueSignature"`
	// The value of the input parameter as a basic type.
	ValueParameterDefinition *ParameterDefinition `json:"valueParameterDefinition"`
	// Extensions for valueCanonical
	ValueCanonical_ext *Element `json:"_valueCanonical"`
	// The value of the input parameter as a basic type.
	// pattern ^[A-Za-z0-9\-\.]{1,64}$
	ValueId string `json:"valueId"`
	// Extensions for valueMarkdown
	ValueMarkdown_ext *Element `json:"_valueMarkdown"`
	// The value of the input parameter as a basic type.
	// pattern ^\S*$
	ValueUri string `json:"valueUri"`
	// Extensions for valueUuid
	ValueUuid_ext *Element `json:"_valueUuid"`
	// The value of the input parameter as a basic type.
	ValueAnnotation *Annotation `json:"valueAnnotation"`
	// The value of the input parameter as a basic type.
	ValueAttachment *Attachment `json:"valueAttachment"`
	// The value of the input parameter as a basic type.
	ValueDuration *Duration `json:"valueDuration"`
	// The value of the input parameter as a basic type.
	ValueHumanName *HumanName `json:"valueHumanName"`
	// The value of the input parameter as a basic type.
	ValueIdentifier *Identifier `json:"valueIdentifier"`
	// The value of the input parameter as a basic type.
	ValueTriggerDefinition *TriggerDefinition `json:"valueTriggerDefinition"`
	// The value of the input parameter as a basic type.
	ValueDosage *Dosage `json:"valueDosage"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The value of the input parameter as a basic type.
	// pattern ^[^\s]+(\s[^\s]+)*$
	ValueCode string `json:"valueCode"`
	// Extensions for valueUri
	ValueUri_ext *Element `json:"_valueUri"`
	// The value of the input parameter as a basic type.
	ValueRange *Range `json:"valueRange"`
	// The value of the input parameter as a basic type.
	ValueRatio *Ratio `json:"valueRatio"`
	// The value of the input parameter as a basic type.
	ValueUsageContext *UsageContext `json:"valueUsageContext"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The value of the input parameter as a basic type.
	// pattern ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$
	ValueOid string `json:"valueOid"`
	// Extensions for valueOid
	ValueOid_ext *Element `json:"_valueOid"`
	// The value of the input parameter as a basic type.
	ValuePeriod *Period `json:"valuePeriod"`
	// The value of the input parameter as a basic type.
	// pattern ^\S*$
	ValueCanonical string `json:"valueCanonical"`
	// Extensions for valueId
	ValueId_ext *Element `json:"_valueId"`
	// The value of the input parameter as a basic type.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$
	ValueInstant string `json:"valueInstant"`
	// Extensions for valueUnsignedInt
	ValueUnsignedInt_ext *Element `json:"_valueUnsignedInt"`
	// The value of the input parameter as a basic type.
	// pattern ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
	ValueUuid string `json:"valueUuid"`
	// The value of the input parameter as a basic type.
	ValueContactPoint *ContactPoint `json:"valueContactPoint"`
	// The value of the input parameter as a basic type.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// The value of the input parameter as a basic type.
	// pattern ^\S*$
	ValueUrl string `json:"valueUrl"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for valueBase64Binary
	ValueBase64Binary_ext *Element `json:"_valueBase64Binary"`
	// Extensions for valueDecimal
	ValueDecimal_ext *Element `json:"_valueDecimal"`
	// The value of the input parameter as a basic type.
	ValueTiming *Timing `json:"valueTiming"`
	// The value of the input parameter as a basic type.
	ValueContactDetail *ContactDetail `json:"valueContactDetail"`
	// The value of the input parameter as a basic type.
	ValueContributor *Contributor `json:"valueContributor"`
	// The value of the input parameter as a basic type.
	// pattern ^(\s*([0-9a-zA-Z\+/=]){4}\s*)+$
	ValueBase64Binary string `json:"valueBase64Binary"`
	// Extensions for valueCode
	ValueCode_ext *Element `json:"_valueCode"`
	// Extensions for valueUrl
	ValueUrl_ext *Element `json:"_valueUrl"`
	// The value of the input parameter as a basic type.
	ValueSampledData *SampledData `json:"valueSampledData"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// The value of the input parameter as a basic type.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	ValueDecimal float64 `json:"valueDecimal"`
	// Extensions for valueInteger
	ValueInteger_ext *Element `json:"_valueInteger"`
	// The value of the input parameter as a basic type.
	// pattern ^[ \r\n\t\S]+$
	ValueMarkdown string `json:"valueMarkdown"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// The value of the input parameter as a basic type.
	ValueCount *Count `json:"valueCount"`
	// The value of the input parameter as a basic type.
	ValueMoney *Money `json:"valueMoney"`
	// The value of the input parameter as a basic type.
	ValueReference *Reference `json:"valueReference"`
	// The value of the input parameter as a basic type.
	ValueExpression *Expression `json:"valueExpression"`
	// Extensions for valueDateTime
	ValueDateTime_ext *Element `json:"_valueDateTime"`
	// The value of the input parameter as a basic type.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	ValueDate string `json:"valueDate"`
	// Extensions for valueDate
	ValueDate_ext *Element `json:"_valueDate"`
	// The value of the input parameter as a basic type.
	// pattern ^[0]|([1-9][0-9]*)$
	ValueUnsignedInt uint64 `json:"valueUnsignedInt"`
	// The value of the input parameter as a basic type.
	ValueRelatedArtifact *RelatedArtifact `json:"valueRelatedArtifact"`
}

// Annotation is A  text note which also  contains information about who made the statement and when.
type Annotation struct {
	// Extensions for authorString
	AuthorString_ext *Element `json:"_authorString"`
	// Indicates when this particular annotation was made.
	Time string `json:"time"`
	// The text of the annotation in markdown format.
	Text string `json:"text"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The individual responsible for making the annotation.
	AuthorReference *Reference `json:"authorReference"`
	// The individual responsible for making the annotation.
	// pattern ^[ \r\n\t\S]+$
	AuthorString string `json:"authorString"`
	// Extensions for time
	Time_ext *Element `json:"_time"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// ProdCharacteristic is The marketing status describes the date when a medicinal product is actually put on
// the market or the date as of which it is no longer available.
type ProdCharacteristic struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Where applicable, the depth can be specified using a numerical value and its unit of
	// measurement The unit of measurement shall be specified in accordance with ISO 11240
	// and the resulting terminology The symbol and the symbol identifier shall be used.
	Depth *Quantity `json:"depth"`
	// Where applicable, the weight can be specified using a numerical value and its unit
	// of measurement The unit of measurement shall be specified in accordance with ISO
	// 11240 and the resulting terminology The symbol and the symbol identifier shall be
	// used.
	Weight *Quantity `json:"weight"`
	// Where applicable, the shape can be specified An appropriate controlled vocabulary
	// shall be used The term and the term identifier shall be used.
	Shape string `json:"shape"`
	// Extensions for color
	Color_ext []*Element `json:"_color"`
	// Extensions for shape
	Shape_ext *Element `json:"_shape"`
	// Where applicable, the imprint can be specified as text.
	Imprint []string `json:"imprint"`
	// Extensions for imprint
	Imprint_ext []*Element `json:"_imprint"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Where applicable, the height can be specified using a numerical value and its unit
	// of measurement The unit of measurement shall be specified in accordance with ISO
	// 11240 and the resulting terminology The symbol and the symbol identifier shall be
	// used.
	Height *Quantity `json:"height"`
	// Where applicable, the width can be specified using a numerical value and its unit of
	// measurement The unit of measurement shall be specified in accordance with ISO 11240
	// and the resulting terminology The symbol and the symbol identifier shall be used.
	Width *Quantity `json:"width"`
	// Where applicable, the nominal volume can be specified using a numerical value and
	// its unit of measurement The unit of measurement shall be specified in accordance
	// with ISO 11240 and the resulting terminology The symbol and the symbol identifier
	// shall be used.
	NominalVolume *Quantity `json:"nominalVolume"`
	// Where applicable, the external diameter can be specified using a numerical value and
	// its unit of measurement The unit of measurement shall be specified in accordance
	// with ISO 11240 and the resulting terminology The symbol and the symbol identifier
	// shall be used.
	ExternalDiameter *Quantity `json:"externalDiameter"`
	// Where applicable, the color can be specified An appropriate controlled vocabulary
	// shall be used The term and the term identifier shall be used.
	Color []string `json:"color"`
	// Where applicable, the image can be provided The format of the image attachment shall
	// be specified by regional implementations.
	Image []*Attachment `json:"image"`
	// Where applicable, the scoring can be specified An appropriate controlled vocabulary
	// shall be used The term and the term identifier shall be used.
	Scoring *CodeableConcept `json:"scoring"`
}

// ElementDefinition is Captures constraints on each element within the resource, profile, or extension.
type ElementDefinition struct {
	// The maximum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^[0]|([1-9][0-9]*)$
	MaxValueUnsignedInt uint64 `json:"maxValueUnsignedInt"`
	// Extensions for defaultValueInstant
	DefaultValueInstant_ext *Element `json:"_defaultValueInstant"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueAttachment *Attachment `json:"defaultValueAttachment"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternTiming *Timing `json:"patternTiming"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternUsageContext *UsageContext `json:"patternUsageContext"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueQuantity *Quantity `json:"minValueQuantity"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	MaxValueDate string `json:"maxValueDate"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^\S*$
	DefaultValueUrl string `json:"defaultValueUrl"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^true|false$
	PatternBoolean bool `json:"patternBoolean"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternHumanName *HumanName `json:"patternHumanName"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$
	MinValueInstant string `json:"minValueInstant"`
	// Extensions for isSummary
	IsSummary_ext *Element `json:"_isSummary"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for meaningWhenMissing
	MeaningWhenMissing_ext *Element `json:"_meaningWhenMissing"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternPeriod *Period `json:"patternPeriod"`
	// The minimum number of times this element SHALL appear in the instance.
	Min uint64 `json:"min"`
	// Extensions for fixedDateTime
	FixedDateTime_ext *Element `json:"_fixedDateTime"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedRelatedArtifact *RelatedArtifact `json:"fixedRelatedArtifact"`
	// Extensions for patternDecimal
	PatternDecimal_ext *Element `json:"_patternDecimal"`
	// Extensions for patternTime
	PatternTime_ext *Element `json:"_patternTime"`
	// Extensions for maxValueDateTime
	MaxValueDateTime_ext *Element `json:"_maxValueDateTime"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueDistance *Distance `json:"defaultValueDistance"`
	// If present, indicates that the order of the repeating element has meaning and
	// describes what that meaning is.  If absent, it means that the order of the element
	// has no meaning.
	OrderMeaning string `json:"orderMeaning"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternAge *Age `json:"patternAge"`
	// If true, the value of this element affects the interpretation of the element or
	// resource that contains it, and the value of the element cannot be ignored.
	// Typically, this is used for status, negation and qualification codes. The effect of
	// this is that the element cannot be ignored by systems: they SHALL either recognize
	// the element and process it, and/or a pre-determination has been made that it is not
	// relevant to their particular system.
	IsModifier bool `json:"isModifier"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueReference *Reference `json:"defaultValueReference"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedPeriod *Period `json:"fixedPeriod"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternContributor *Contributor `json:"patternContributor"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternParameterDefinition *ParameterDefinition `json:"patternParameterDefinition"`
	// Extensions for maxValueInstant
	MaxValueInstant_ext *Element `json:"_maxValueInstant"`
	// Extensions for fixedBase64Binary
	FixedBase64Binary_ext *Element `json:"_fixedBase64Binary"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedHumanName *HumanName `json:"fixedHumanName"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedContributor *Contributor `json:"fixedContributor"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
	PatternUuid string `json:"patternUuid"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternMoney *Money `json:"patternMoney"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^\S*$
	FixedCanonical string `json:"fixedCanonical"`
	// Extensions for fixedUri
	FixedUri_ext *Element `json:"_fixedUri"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternSignature *Signature `json:"patternSignature"`
	// Extensions for patternBoolean
	PatternBoolean_ext *Element `json:"_patternBoolean"`
	// Extensions for patternMarkdown
	PatternMarkdown_ext *Element `json:"_patternMarkdown"`
	// Extensions for patternUrl
	PatternUrl_ext *Element `json:"_patternUrl"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternIdentifier *Identifier `json:"patternIdentifier"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternTriggerDefinition *TriggerDefinition `json:"patternTriggerDefinition"`
	// Extensions for minValueDecimal
	MinValueDecimal_ext *Element `json:"_minValueDecimal"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedCoding *Coding `json:"fixedCoding"`
	// Extensions for patternDate
	PatternDate_ext *Element `json:"_patternDate"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^\S*$
	PatternUri string `json:"patternUri"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternCount *Count `json:"patternCount"`
	// A single preferred label which is the text to display beside the element indicating
	// its meaning or to use to prompt for the element in a user display or form.
	Label string `json:"label"`
	// Extensions for short
	Short_ext *Element `json:"_short"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^[0]|([1-9][0-9]*)$
	FixedUnsignedInt uint64 `json:"fixedUnsignedInt"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	PatternDate string `json:"patternDate"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternSampledData *SampledData `json:"patternSampledData"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^-?([0]|([1-9][0-9]*))$
	MinValueInteger int64 `json:"minValueInteger"`
	// Provides a complete explanation of the meaning of the data element for human
	// readability.  For the case of elements derived from existing elements (e.g.
	// constraints), the definition SHALL be consistent with the base definition, but
	// convey the meaning of the element in the particular context of use of the resource.
	// (Note: The text you are reading is specified in ElementDefinition.definition).
	Definition string `json:"definition"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValuePeriod *Period `json:"defaultValuePeriod"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueRange *Range `json:"defaultValueRange"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^[A-Za-z0-9\-\.]{1,64}$
	FixedId string `json:"fixedId"`
	// Extensions for minValuePositiveInt
	MinValuePositiveInt_ext *Element `json:"_minValuePositiveInt"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	FixedDateTime string `json:"fixedDateTime"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	FixedTime string `json:"fixedTime"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedAge *Age `json:"fixedAge"`
	// Extensions for patternUuid
	PatternUuid_ext *Element `json:"_patternUuid"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueRelatedArtifact *RelatedArtifact `json:"defaultValueRelatedArtifact"`
	// Extensions for fixedBoolean
	FixedBoolean_ext *Element `json:"_fixedBoolean"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedDosage *Dosage `json:"fixedDosage"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternDosage *Dosage `json:"patternDosage"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedReference *Reference `json:"fixedReference"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	PatternTime string `json:"patternTime"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	MinValueDecimal float64 `json:"minValueDecimal"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^\S*$
	FixedUri string `json:"fixedUri"`
	// Extensions for isModifier
	IsModifier_ext *Element `json:"_isModifier"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^true|false$
	DefaultValueBoolean bool `json:"defaultValueBoolean"`
	// Extensions for fixedPositiveInt
	FixedPositiveInt_ext *Element `json:"_fixedPositiveInt"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^[^\s]+(\s[^\s]+)*$
	PatternCode string `json:"patternCode"`
	// Extensions for minValueTime
	MinValueTime_ext *Element `json:"_minValueTime"`
	// A reference to an invariant that may make additional statements about the
	// cardinality or value in the instance.
	Condition []string `json:"condition"`
	// Extensions for maxValueUnsignedInt
	MaxValueUnsignedInt_ext *Element `json:"_maxValueUnsignedInt"`
	// Binds to a value set if this element is coded (code, Coding, CodeableConcept,
	// Quantity), or the data types (string, uri).
	Binding *ElementDefinition_Binding `json:"binding"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
	DefaultValueUuid string `json:"defaultValueUuid"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueSampledData *SampledData `json:"defaultValueSampledData"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^(\s*([0-9a-zA-Z\+/=]){4}\s*)+$
	FixedBase64Binary string `json:"fixedBase64Binary"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	FixedDate string `json:"fixedDate"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternCoding *Coding `json:"patternCoding"`
	// Extensions for minValueDate
	MinValueDate_ext *Element `json:"_minValueDate"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	DefaultValueDate string `json:"defaultValueDate"`
	// Extensions for patternId
	PatternId_ext *Element `json:"_patternId"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$
	PatternOid string `json:"patternOid"`
	// Extensions for maxValueInteger
	MaxValueInteger_ext *Element `json:"_maxValueInteger"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueSignature *Signature `json:"defaultValueSignature"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	MinValueDate string `json:"minValueDate"`
	// Identifies a concept from an external specification that roughly corresponds to this
	// element.
	Mapping []*ElementDefinition_Mapping `json:"mapping"`
	// Extensions for orderMeaning
	OrderMeaning_ext *Element `json:"_orderMeaning"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedQuantity *Quantity `json:"fixedQuantity"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^[1-9][0-9]*$
	PatternPositiveInt uint64 `json:"patternPositiveInt"`
	// Codes that define how this element is represented in instances, when the deviation
	// varies from the normal case.
	Representation []ElementDefinitionRepresentation `json:"representation"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^(\s*([0-9a-zA-Z\+/=]){4}\s*)+$
	DefaultValueBase64Binary string `json:"defaultValueBase64Binary"`
	// Extensions for fixedDate
	FixedDate_ext *Element `json:"_fixedDate"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternDataRequirement *DataRequirement `json:"patternDataRequirement"`
	// Extensions for maxLength
	MaxLength_ext *Element `json:"_maxLength"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^[^\s]+(\s[^\s]+)*$
	DefaultValueCode string `json:"defaultValueCode"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueCoding *Coding `json:"defaultValueCoding"`
	// Extensions for fixedId
	FixedId_ext *Element `json:"_fixedId"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedRange *Range `json:"fixedRange"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternContactPoint *ContactPoint `json:"patternContactPoint"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^[0]|([1-9][0-9]*)$
	MinValueUnsignedInt uint64 `json:"minValueUnsignedInt"`
	// Extensions for fixedInstant
	FixedInstant_ext *Element `json:"_fixedInstant"`
	// Extensions for patternInstant
	PatternInstant_ext *Element `json:"_patternInstant"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternReference *Reference `json:"patternReference"`
	// Extensions for defaultValueBoolean
	DefaultValueBoolean_ext *Element `json:"_defaultValueBoolean"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^[0]|([1-9][0-9]*)$
	DefaultValueUnsignedInt uint64 `json:"defaultValueUnsignedInt"`
	// A sample value for this element demonstrating the type of information that would
	// typically be found in the element.
	Example []*ElementDefinition_Example `json:"example"`
	// Extensions for minValueInteger
	MinValueInteger_ext *Element `json:"_minValueInteger"`
	// Extensions for defaultValueCanonical
	DefaultValueCanonical_ext *Element `json:"_defaultValueCanonical"`
	// Extensions for defaultValueString
	DefaultValueString_ext *Element `json:"_defaultValueString"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedAnnotation *Annotation `json:"fixedAnnotation"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedMoney *Money `json:"fixedMoney"`
	// If true, implementations that produce or consume resources SHALL provide "support"
	// for the element in some meaningful way.  If false, the element may be ignored and
	// not supported. If false, whether to populate or use the data element in any way is
	// at the discretion of the implementation.
	MustSupport bool `json:"mustSupport"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueDosage *Dosage `json:"defaultValueDosage"`
	// Extensions for fixedInteger
	FixedInteger_ext *Element `json:"_fixedInteger"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	MaxValueDateTime string `json:"maxValueDateTime"`
	// Extensions for defaultValueMarkdown
	DefaultValueMarkdown_ext *Element `json:"_defaultValueMarkdown"`
	// Extensions for fixedOid
	FixedOid_ext *Element `json:"_fixedOid"`
	// Extensions for patternCode
	PatternCode_ext *Element `json:"_patternCode"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternCodeableConcept *CodeableConcept `json:"patternCodeableConcept"`
	// Extensions for condition
	Condition_ext []*Element `json:"_condition"`
	// This element is for traceability of why the element was created and why the
	// constraints exist as they do. This may be used to point to source materials or
	// specifications that drove the structure of this element.
	Requirements string `json:"requirements"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^\S*$
	DefaultValueUri string `json:"defaultValueUri"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedRatio *Ratio `json:"fixedRatio"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	MaxValueTime string `json:"maxValueTime"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for representation
	Representation_ext []*Element `json:"_representation"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueAnnotation *Annotation `json:"defaultValueAnnotation"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueParameterDefinition *ParameterDefinition `json:"defaultValueParameterDefinition"`
	// Extensions for fixedCode
	FixedCode_ext *Element `json:"_fixedCode"`
	// Extensions for fixedTime
	FixedTime_ext *Element `json:"_fixedTime"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternRelatedArtifact *RelatedArtifact `json:"patternRelatedArtifact"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^-?([0]|([1-9][0-9]*))$
	FixedInteger int64 `json:"fixedInteger"`
	// Extensions for patternOid
	PatternOid_ext *Element `json:"_patternOid"`
	// Information about the base definition of the element, provided to make it
	// unnecessary for tools to trace the deviation of the element through the derived and
	// related profiles. When the element definition is not the original definition of an
	// element - i.g. either in a constraint on another type, or for elements from a super
	// type in a snap shot - then the information in provided in the element definition may
	// be different to the base definition. On the original definition of the element, it
	// will be same.
	Base *ElementDefinition_Base `json:"base"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$
	DefaultValueOid string `json:"defaultValueOid"`
	// Extensions for defaultValueUri
	DefaultValueUri_ext *Element `json:"_defaultValueUri"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueCount *Count `json:"defaultValueCount"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueRatio *Ratio `json:"defaultValueRatio"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueUsageContext *UsageContext `json:"defaultValueUsageContext"`
	// Extensions for patternPositiveInt
	PatternPositiveInt_ext *Element `json:"_patternPositiveInt"`
	// Extensions for patternUri
	PatternUri_ext *Element `json:"_patternUri"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	MinValueDateTime string `json:"minValueDateTime"`
	// Extensions for minValueUnsignedInt
	MinValueUnsignedInt_ext *Element `json:"_minValueUnsignedInt"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueContactDetail *ContactDetail `json:"defaultValueContactDetail"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueTriggerDefinition *TriggerDefinition `json:"defaultValueTriggerDefinition"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedCount *Count `json:"fixedCount"`
	// Extensions for maxValueTime
	MaxValueTime_ext *Element `json:"_maxValueTime"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedTiming *Timing `json:"fixedTiming"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$
	PatternInstant string `json:"patternInstant"`
	// The name of this element definition slice, when slicing is working. The name must be
	// a token with no dots or spaces. This is a unique name referring to a specific set of
	// constraints applied to this element, used to provide a name to different slices of
	// the same element.
	SliceName string `json:"sliceName"`
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^-?([0]|([1-9][0-9]*))$
	DefaultValueInteger int64 `json:"defaultValueInteger"`
	// Extensions for defaultValueUrl
	DefaultValueUrl_ext *Element `json:"_defaultValueUrl"`
	// Extensions for defaultValueUuid
	DefaultValueUuid_ext *Element `json:"_defaultValueUuid"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueDuration *Duration `json:"defaultValueDuration"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^[ \r\n\t\S]+$
	PatternMarkdown string `json:"patternMarkdown"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^[1-9][0-9]*$
	DefaultValuePositiveInt uint64 `json:"defaultValuePositiveInt"`
	// Extensions for defaultValueTime
	DefaultValueTime_ext *Element `json:"_defaultValueTime"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
	FixedUuid string `json:"fixedUuid"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternQuantity *Quantity `json:"patternQuantity"`
	// A code that has the same meaning as the element in a particular terminology.
	Code []*Coding `json:"code"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^[ \r\n\t\S]+$
	FixedString string `json:"fixedString"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedSignature *Signature `json:"fixedSignature"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternRange *Range `json:"patternRange"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternContactDetail *ContactDetail `json:"patternContactDetail"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedDistance *Distance `json:"fixedDistance"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedParameterDefinition *ParameterDefinition `json:"fixedParameterDefinition"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^[ \r\n\t\S]+$
	PatternString string `json:"patternString"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternDuration *Duration `json:"patternDuration"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueQuantity *Quantity `json:"maxValueQuantity"`
	// Formal constraints such as co-occurrence and other constraints that can be
	// computationally evaluated within the context of the instance.
	Constraint []*ElementDefinition_Constraint `json:"constraint"`
	// Extensions for sliceName
	SliceName_ext *Element `json:"_sliceName"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedAttachment *Attachment `json:"fixedAttachment"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^[0]|([1-9][0-9]*)$
	PatternUnsignedInt uint64 `json:"patternUnsignedInt"`
	// Extensions for label
	Label_ext *Element `json:"_label"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$
	DefaultValueInstant string `json:"defaultValueInstant"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueAddress *Address `json:"defaultValueAddress"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	DefaultValueDateTime string `json:"defaultValueDateTime"`
	// Extensions for patternCanonical
	PatternCanonical_ext *Element `json:"_patternCanonical"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^[ \r\n\t\S]+$
	FixedMarkdown string `json:"fixedMarkdown"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternAddress *Address `json:"patternAddress"`
	// The data type or resource that the value of this element is permitted to be.
	Type []*ElementDefinition_Type `json:"type"`
	// Extensions for defaultValueDecimal
	DefaultValueDecimal_ext *Element `json:"_defaultValueDecimal"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^[ \r\n\t\S]+$
	DefaultValueMarkdown string `json:"defaultValueMarkdown"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueCodeableConcept *CodeableConcept `json:"defaultValueCodeableConcept"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueMoney *Money `json:"defaultValueMoney"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	FixedDecimal float64 `json:"fixedDecimal"`
	// Extensions for mustSupport
	MustSupport_ext *Element `json:"_mustSupport"`
	// Extensions for patternString
	PatternString_ext *Element `json:"_patternString"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternDistance *Distance `json:"patternDistance"`
	// Extensions for definition
	Definition_ext *Element `json:"_definition"`
	// Explanatory notes and implementation guidance about the data element, including
	// notes about how to use the data properly, exceptions to proper use, etc. (Note: The
	// text you are reading is specified in ElementDefinition.comment).
	Comment string `json:"comment"`
	// Extensions for contentReference
	ContentReference_ext *Element `json:"_contentReference"`
	// Extensions for defaultValueDate
	DefaultValueDate_ext *Element `json:"_defaultValueDate"`
	// The Implicit meaning that is to be understood when this element is missing (e.g.
	// 'when this element is missing, the period is ongoing').
	MeaningWhenMissing string `json:"meaningWhenMissing"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^[^\s]+(\s[^\s]+)*$
	FixedCode string `json:"fixedCode"`
	// Extensions for defaultValueOid
	DefaultValueOid_ext *Element `json:"_defaultValueOid"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedIdentifier *Identifier `json:"fixedIdentifier"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedUsageContext *UsageContext `json:"fixedUsageContext"`
	// Extensions for maxValuePositiveInt
	MaxValuePositiveInt_ext *Element `json:"_maxValuePositiveInt"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedDataRequirement *DataRequirement `json:"fixedDataRequirement"`
	// Whether the element should be included if a client requests a search with the
	// parameter _summary=true.
	IsSummary bool `json:"isSummary"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternExpression *Expression `json:"patternExpression"`
	// Extensions for maxValueDecimal
	MaxValueDecimal_ext *Element `json:"_maxValueDecimal"`
	// Identifies an element defined elsewhere in the definition whose content rules should
	// be applied to the current element. ContentReferences bring across all the rules that
	// are in the ElementDefinition for the element, including definitions, cardinality
	// constraints, bindings, invariants etc.
	ContentReference string `json:"contentReference"`
	// Extensions for fixedDecimal
	FixedDecimal_ext *Element `json:"_fixedDecimal"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^\S*$
	FixedUrl string `json:"fixedUrl"`
	// Extensions for fixedUrl
	FixedUrl_ext *Element `json:"_fixedUrl"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	PatternDateTime string `json:"patternDateTime"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternAttachment *Attachment `json:"patternAttachment"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueAge *Age `json:"defaultValueAge"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	PatternDecimal float64 `json:"patternDecimal"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	MaxValueDecimal float64 `json:"maxValueDecimal"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^[A-Za-z0-9\-\.]{1,64}$
	DefaultValueId string `json:"defaultValueId"`
	// Extensions for fixedString
	FixedString_ext *Element `json:"_fixedString"`
	// Explains how that element affects the interpretation of the resource or element that
	// contains it.
	IsModifierReason string `json:"isModifierReason"`
	// Indicates the maximum length in characters that is permitted to be present in
	// conformant instances and which is expected to be supported by conformant consumers
	// that support the element.
	MaxLength int64 `json:"maxLength"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueContactPoint *ContactPoint `json:"defaultValueContactPoint"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueTiming *Timing `json:"defaultValueTiming"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedContactDetail *ContactDetail `json:"fixedContactDetail"`
	// Extensions for patternDateTime
	PatternDateTime_ext *Element `json:"_patternDateTime"`
	// Extensions for patternUnsignedInt
	PatternUnsignedInt_ext *Element `json:"_patternUnsignedInt"`
	// Extensions for minValueInstant
	MinValueInstant_ext *Element `json:"_minValueInstant"`
	// Extensions for minValueDateTime
	MinValueDateTime_ext *Element `json:"_minValueDateTime"`
	// If true, indicates that this slice definition is constraining a slice definition
	// with the same name in an inherited profile. If false, the slice is not overriding
	// any slice in an inherited profile. If missing, the slice might or might not be
	// overriding a slice in an inherited profile, depending on the sliceName.
	SliceIsConstraining bool `json:"sliceIsConstraining"`
	// Extensions for max
	Max_ext *Element `json:"_max"`
	// Extensions for defaultValueBase64Binary
	DefaultValueBase64Binary_ext *Element `json:"_defaultValueBase64Binary"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueIdentifier *Identifier `json:"defaultValueIdentifier"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueDataRequirement *DataRequirement `json:"defaultValueDataRequirement"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^-?([0]|([1-9][0-9]*))$
	PatternInteger int64 `json:"patternInteger"`
	// Indicates that the element is sliced into a set of alternative definitions (i.e. in
	// a structure definition, there are multiple different constraints on a single element
	// in the base resource). Slicing can be used in any resource that has cardinality ..*
	// on the base resource, or any resource with a choice of types. The set of slices is
	// any elements that come after this in the element sequence that have the same path,
	// until a shorter path occurs (the shorter path terminates the set).
	Slicing *ElementDefinition_Slicing `json:"slicing"`
	// Extensions for defaultValueId
	DefaultValueId_ext *Element `json:"_defaultValueId"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueHumanName *HumanName `json:"defaultValueHumanName"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedContactPoint *ContactPoint `json:"fixedContactPoint"`
	// Extensions for patternInteger
	PatternInteger_ext *Element `json:"_patternInteger"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	MinValueTime string `json:"minValueTime"`
	// Extensions for defaultValueCode
	DefaultValueCode_ext *Element `json:"_defaultValueCode"`
	// Extensions for defaultValueInteger
	DefaultValueInteger_ext *Element `json:"_defaultValueInteger"`
	// Extensions for fixedUuid
	FixedUuid_ext *Element `json:"_fixedUuid"`
	// Identifies additional names by which this element might also be known.
	Alias []string `json:"alias"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^\S*$
	DefaultValueCanonical string `json:"defaultValueCanonical"`
	// Extensions for defaultValueUnsignedInt
	DefaultValueUnsignedInt_ext *Element `json:"_defaultValueUnsignedInt"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$
	FixedInstant string `json:"fixedInstant"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$
	MaxValueInstant string `json:"maxValueInstant"`
	// The path identifies the element and is expressed as a "."-separated list of ancestor
	// elements, beginning with the name of the resource or extension.
	Path string `json:"path"`
	// Extensions for sliceIsConstraining
	SliceIsConstraining_ext *Element `json:"_sliceIsConstraining"`
	// Extensions for requirements
	Requirements_ext *Element `json:"_requirements"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^true|false$
	FixedBoolean bool `json:"fixedBoolean"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedCodeableConcept *CodeableConcept `json:"fixedCodeableConcept"`
	// Extensions for fixedCanonical
	FixedCanonical_ext *Element `json:"_fixedCanonical"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedTriggerDefinition *TriggerDefinition `json:"fixedTriggerDefinition"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^[A-Za-z0-9\-\.]{1,64}$
	PatternId string `json:"patternId"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^-?([0]|([1-9][0-9]*))$
	MaxValueInteger int64 `json:"maxValueInteger"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^[1-9][0-9]*$
	MaxValuePositiveInt uint64 `json:"maxValuePositiveInt"`
	// Extensions for path
	Path_ext *Element `json:"_path"`
	// The maximum number of times this element is permitted to appear in the instance.
	Max string `json:"max"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueContributor *Contributor `json:"defaultValueContributor"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedExpression *Expression `json:"fixedExpression"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed
	// for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	// pattern ^[1-9][0-9]*$
	MinValuePositiveInt uint64 `json:"minValuePositiveInt"`
	// Extensions for maxValueDate
	MaxValueDate_ext *Element `json:"_maxValueDate"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	DefaultValueDecimal float64 `json:"defaultValueDecimal"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueQuantity *Quantity `json:"defaultValueQuantity"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$
	FixedOid string `json:"fixedOid"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^(\s*([0-9a-zA-Z\+/=]){4}\s*)+$
	PatternBase64Binary string `json:"patternBase64Binary"`
	// Extensions for defaultValuePositiveInt
	DefaultValuePositiveInt_ext *Element `json:"_defaultValuePositiveInt"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	DefaultValueTime string `json:"defaultValueTime"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	// pattern ^[ \r\n\t\S]+$
	DefaultValueString string `json:"defaultValueString"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedSampledData *SampledData `json:"fixedSampledData"`
	// Extensions for patternBase64Binary
	PatternBase64Binary_ext *Element `json:"_patternBase64Binary"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternAnnotation *Annotation `json:"patternAnnotation"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	PatternRatio *Ratio `json:"patternRatio"`
	// Extensions for defaultValueDateTime
	DefaultValueDateTime_ext *Element `json:"_defaultValueDateTime"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if
	// not otherwise specified, the abstract is false').
	DefaultValueExpression *Expression `json:"defaultValueExpression"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedDuration *Duration `json:"fixedDuration"`
	// Extensions for isModifierReason
	IsModifierReason_ext *Element `json:"_isModifierReason"`
	// A concise description of what this element means (e.g. for use in autogenerated
	// summaries).
	Short string `json:"short"`
	// Extensions for alias
	Alias_ext []*Element `json:"_alias"`
	// Extensions for min
	Min_ext *Element `json:"_min"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	// pattern ^[1-9][0-9]*$
	FixedPositiveInt uint64 `json:"fixedPositiveInt"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance.
	// For purposes of comparison, non-significant whitespace is ignored, and all values
	// must be an exact match (case and accent sensitive). Missing elements/attributes must
	// also be missing.
	FixedAddress *Address `json:"fixedAddress"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^\S*$
	PatternUrl string `json:"patternUrl"`
	// Extensions for fixedMarkdown
	FixedMarkdown_ext *Element `json:"_fixedMarkdown"`
	// Extensions for fixedUnsignedInt
	FixedUnsignedInt_ext *Element `json:"_fixedUnsignedInt"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value
	// in the pattern must be found in the instance. Other additional values may be found
	// too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided
	// in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided
	// in the pattern[x] array must (recursively) match at least one element from the
	// instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property
	// in the pattern must be present in the complex object, and its value must recursively
	// match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	// pattern ^\S*$
	PatternCanonical string `json:"patternCanonical"`
}

type ElementDefinitionRepresentation string

const ()

// CapabilityStatement_Interaction1 is A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server
// for a particular version of FHIR that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type CapabilityStatement_Interaction1 struct {
	// Guidance specific to the implementation of this operation, such as limitations on
	// the kind of transactions allowed, or information about system wide search is
	// implemented.
	Documentation string `json:"documentation"`
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A coded identifier of the operation, supported by the system.
	Code CapabilityStatement_Interaction1Code `json:"code"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
}

type CapabilityStatement_Interaction1Code string

const (
	CapabilityStatement_Interaction1CodeTransaction   CapabilityStatement_Interaction1Code = "transaction"
	CapabilityStatement_Interaction1CodeBatch         CapabilityStatement_Interaction1Code = "batch"
	CapabilityStatement_Interaction1CodeSearchSystem  CapabilityStatement_Interaction1Code = "search-system"
	CapabilityStatement_Interaction1CodeHistorySystem CapabilityStatement_Interaction1Code = "history-system"
)

// MedicationKnowledge_Ingredient is Information about a medication that is used to support knowledge.
type MedicationKnowledge_Ingredient struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The actual ingredient - either a substance (simple ingredient) or another medication.
	ItemCodeableConcept *CodeableConcept `json:"itemCodeableConcept"`
	// The actual ingredient - either a substance (simple ingredient) or another medication.
	ItemReference *Reference `json:"itemReference"`
	// Indication of whether this ingredient affects the therapeutic action of the drug.
	IsActive bool `json:"isActive"`
	// Extensions for isActive
	IsActive_ext *Element `json:"_isActive"`
	// Specifies how many (or how much) of the items there are in this Medication.  For
	// example, 250 mg per tablet.  This is expressed as a ratio where the numerator is
	// 250mg and the denominator is 1 tablet.
	Strength *Ratio `json:"strength"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// MedicinalProductPharmaceutical_WithdrawalPeriod is A pharmaceutical product described in terms of its composition and dose form.
type MedicinalProductPharmaceutical_WithdrawalPeriod struct {
	// Coded expression for the type of tissue for which the withdrawal period applues,
	// e.g. meat, milk.
	Tissue *CodeableConcept `json:"tissue,omitempty"`
	// A value for the time.
	Value *Quantity `json:"value,omitempty"`
	// Extra information about the withdrawal period.
	SupportingInformation string `json:"supportingInformation"`
	// Extensions for supportingInformation
	SupportingInformation_ext *Element `json:"_supportingInformation"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// MedicationKnowledge_Cost is Information about a medication that is used to support knowledge.
type MedicationKnowledge_Cost struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The category of the cost information.  For example, manufacturers' cost, patient
	// cost, claim reimbursement cost, actual acquisition cost.
	Type *CodeableConcept `json:"type,omitempty"`
	// The source or owner that assigns the price to the medication.
	Source string `json:"source"`
	// Extensions for source
	Source_ext *Element `json:"_source"`
	// The price of the medication.
	Cost *Money `json:"cost,omitempty"`
}

// MedicationKnowledge_Regulatory is Information about a medication that is used to support knowledge.
type MedicationKnowledge_Regulatory struct {
	// The authority that is specifying the regulations.
	RegulatoryAuthority *Reference `json:"regulatoryAuthority,omitempty"`
	// Specifies if changes are allowed when dispensing a medication from a regulatory
	// perspective.
	Substitution []*MedicationKnowledge_Substitution `json:"substitution"`
	// Specifies the schedule of a medication in jurisdiction.
	Schedule []*MedicationKnowledge_Schedule `json:"schedule"`
	// The maximum number of units of the medication that can be dispensed in a period.
	MaxDispense *MedicationKnowledge_MaxDispense `json:"maxDispense"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// SubstanceReferenceInformation_Target is Todo.
type SubstanceReferenceInformation_Target struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Todo.
	Organism *CodeableConcept `json:"organism"`
	// Todo.
	AmountQuantity *Quantity `json:"amountQuantity"`
	// Todo.
	Source []*Reference `json:"source"`
	// Todo.
	// pattern ^[ \r\n\t\S]+$
	AmountString string `json:"amountString"`
	// Extensions for amountString
	AmountString_ext *Element `json:"_amountString"`
	// Todo.
	AmountType *CodeableConcept `json:"amountType"`
	// Todo.
	AmountRange *Range `json:"amountRange"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Todo.
	Type *CodeableConcept `json:"type"`
	// Todo.
	Target *Identifier `json:"target"`
	// Todo.
	Interaction *CodeableConcept `json:"interaction"`
	// Todo.
	OrganismType *CodeableConcept `json:"organismType"`
}

// Task_Output is A task to be performed.
type Task_Output struct {
	// The value of the Output parameter as a basic type.
	ValueContactDetail *ContactDetail `json:"valueContactDetail"`
	// The value of the Output parameter as a basic type.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// The value of the Output parameter as a basic type.
	ValueAge *Age `json:"valueAge"`
	// The value of the Output parameter as a basic type.
	ValueDosage *Dosage `json:"valueDosage"`
	// The value of the Output parameter as a basic type.
	// pattern ^-?([0]|([1-9][0-9]*))$
	ValueInteger int64 `json:"valueInteger"`
	// The value of the Output parameter as a basic type.
	ValueRelatedArtifact *RelatedArtifact `json:"valueRelatedArtifact"`
	// Extensions for valueCode
	ValueCode_ext *Element `json:"_valueCode"`
	// Extensions for valueUrl
	ValueUrl_ext *Element `json:"_valueUrl"`
	// The value of the Output parameter as a basic type.
	ValueCount *Count `json:"valueCount"`
	// The value of the Output parameter as a basic type.
	ValueHumanName *HumanName `json:"valueHumanName"`
	// The value of the Output parameter as a basic type.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The value of the Output parameter as a basic type.
	// pattern ^(\s*([0-9a-zA-Z\+/=]){4}\s*)+$
	ValueBase64Binary string `json:"valueBase64Binary"`
	// The value of the Output parameter as a basic type.
	ValueIdentifier *Identifier `json:"valueIdentifier"`
	// Extensions for valueInstant
	ValueInstant_ext *Element `json:"_valueInstant"`
	// The value of the Output parameter as a basic type.
	ValueAttachment *Attachment `json:"valueAttachment"`
	// The value of the Output parameter as a basic type.
	ValueCoding *Coding `json:"valueCoding"`
	// Extensions for valueCanonical
	ValueCanonical_ext *Element `json:"_valueCanonical"`
	// The value of the Output parameter as a basic type.
	// pattern ^\S*$
	ValueUri string `json:"valueUri"`
	// Extensions for valueUnsignedInt
	ValueUnsignedInt_ext *Element `json:"_valueUnsignedInt"`
	// The value of the Output parameter as a basic type.
	// pattern ^\S*$
	ValueUrl string `json:"valueUrl"`
	// The value of the Output parameter as a basic type.
	ValueSignature *Signature `json:"valueSignature"`
	// The value of the Output parameter as a basic type.
	ValueDataRequirement *DataRequirement `json:"valueDataRequirement"`
	// The value of the Output parameter as a basic type.
	ValueTriggerDefinition *TriggerDefinition `json:"valueTriggerDefinition"`
	// The value of the Output parameter as a basic type.
	// pattern ^[1-9][0-9]*$
	ValuePositiveInt uint64 `json:"valuePositiveInt"`
	// The value of the Output parameter as a basic type.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	ValueTime string `json:"valueTime"`
	// The value of the Output parameter as a basic type.
	ValueSampledData *SampledData `json:"valueSampledData"`
	// Extensions for valueUuid
	ValueUuid_ext *Element `json:"_valueUuid"`
	// The value of the Output parameter as a basic type.
	ValueRatio *Ratio `json:"valueRatio"`
	// The value of the Output parameter as a basic type.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	ValueDateTime string `json:"valueDateTime"`
	// Extensions for valueId
	ValueId_ext *Element `json:"_valueId"`
	// The value of the Output parameter as a basic type.
	// pattern ^[ \r\n\t\S]+$
	ValueMarkdown string `json:"valueMarkdown"`
	// The value of the Output parameter as a basic type.
	ValueAddress *Address `json:"valueAddress"`
	// The value of the Output parameter as a basic type.
	ValueReference *Reference `json:"valueReference"`
	// The value of the Output parameter as a basic type.
	ValueExpression *Expression `json:"valueExpression"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// The value of the Output parameter as a basic type.
	ValueUsageContext *UsageContext `json:"valueUsageContext"`
	// The value of the Output parameter as a basic type.
	// pattern ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$
	ValueOid string `json:"valueOid"`
	// The name of the Output parameter.
	Type *CodeableConcept `json:"type,omitempty"`
	// Extensions for valueBase64Binary
	ValueBase64Binary_ext *Element `json:"_valueBase64Binary"`
	// Extensions for valueOid
	ValueOid_ext *Element `json:"_valueOid"`
	// The value of the Output parameter as a basic type.
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept"`
	// Extensions for valueDate
	ValueDate_ext *Element `json:"_valueDate"`
	// The value of the Output parameter as a basic type.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$
	ValueInstant string `json:"valueInstant"`
	// The value of the Output parameter as a basic type.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	ValueDecimal float64 `json:"valueDecimal"`
	// Extensions for valueDecimal
	ValueDecimal_ext *Element `json:"_valueDecimal"`
	// Extensions for valuePositiveInt
	ValuePositiveInt_ext *Element `json:"_valuePositiveInt"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// The value of the Output parameter as a basic type.
	ValueParameterDefinition *ParameterDefinition `json:"valueParameterDefinition"`
	// The value of the Output parameter as a basic type.
	// pattern ^[^\s]+(\s[^\s]+)*$
	ValueCode string `json:"valueCode"`
	// The value of the Output parameter as a basic type.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	ValueDate string `json:"valueDate"`
	// The value of the Output parameter as a basic type.
	// pattern ^[0]|([1-9][0-9]*)$
	ValueUnsignedInt uint64 `json:"valueUnsignedInt"`
	// The value of the Output parameter as a basic type.
	ValueMoney *Money `json:"valueMoney"`
	// The value of the Output parameter as a basic type.
	ValueTiming *Timing `json:"valueTiming"`
	// Extensions for valueInteger
	ValueInteger_ext *Element `json:"_valueInteger"`
	// The value of the Output parameter as a basic type.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// Extensions for valueTime
	ValueTime_ext *Element `json:"_valueTime"`
	// Extensions for valueUri
	ValueUri_ext *Element `json:"_valueUri"`
	// The value of the Output parameter as a basic type.
	// pattern ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
	ValueUuid string `json:"valueUuid"`
	// The value of the Output parameter as a basic type.
	ValueAnnotation *Annotation `json:"valueAnnotation"`
	// The value of the Output parameter as a basic type.
	ValueContactPoint *ContactPoint `json:"valueContactPoint"`
	// The value of the Output parameter as a basic type.
	ValuePeriod *Period `json:"valuePeriod"`
	// The value of the Output parameter as a basic type.
	// pattern ^\S*$
	ValueCanonical string `json:"valueCanonical"`
	// Extensions for valueDateTime
	ValueDateTime_ext *Element `json:"_valueDateTime"`
	// Extensions for valueMarkdown
	ValueMarkdown_ext *Element `json:"_valueMarkdown"`
	// The value of the Output parameter as a basic type.
	ValueDistance *Distance `json:"valueDistance"`
	// The value of the Output parameter as a basic type.
	ValueDuration *Duration `json:"valueDuration"`
	// The value of the Output parameter as a basic type.
	ValueRange *Range `json:"valueRange"`
	// The value of the Output parameter as a basic type.
	ValueContributor *Contributor `json:"valueContributor"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The value of the Output parameter as a basic type.
	// pattern ^[A-Za-z0-9\-\.]{1,64}$
	ValueId string `json:"valueId"`
}

// DataRequirement_DateFilter is Describes a required data item for evaluation in terms of the type of data, and
// optional code or date-based filters of the data.
type DataRequirement_DateFilter struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The date-valued attribute of the filter. The specified path SHALL be a FHIRPath
	// resolveable on the specified type of the DataRequirement, and SHALL consist only of
	// identifiers, constant indexers, and .resolve(). The path is allowed to contain
	// qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse
	// multiple-cardinality sub-elements (see the [Simple FHIRPath
	// Profile](fhirpath.html#simple) for full details). Note that the index must be an
	// integer constant. The path must resolve to an element of type date, dateTime,
	// Period, Schedule, or Timing.
	Path string `json:"path"`
	// The value of the filter. If period is specified, the filter will return only those
	// data items that fall within the bounds determined by the Period, inclusive of the
	// period boundaries. If dateTime is specified, the filter will return only those data
	// items that are equal to the specified dateTime. If a Duration is specified, the
	// filter will return only those data items that fall within Duration before now.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	ValueDateTime string `json:"valueDateTime"`
	// Extensions for valueDateTime
	ValueDateTime_ext *Element `json:"_valueDateTime"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for searchParam
	SearchParam_ext *Element `json:"_searchParam"`
	// The value of the filter. If period is specified, the filter will return only those
	// data items that fall within the bounds determined by the Period, inclusive of the
	// period boundaries. If dateTime is specified, the filter will return only those data
	// items that are equal to the specified dateTime. If a Duration is specified, the
	// filter will return only those data items that fall within Duration before now.
	ValuePeriod *Period `json:"valuePeriod"`
	// The value of the filter. If period is specified, the filter will return only those
	// data items that fall within the bounds determined by the Period, inclusive of the
	// period boundaries. If dateTime is specified, the filter will return only those data
	// items that are equal to the specified dateTime. If a Duration is specified, the
	// filter will return only those data items that fall within Duration before now.
	ValueDuration *Duration `json:"valueDuration"`
	// Extensions for path
	Path_ext *Element `json:"_path"`
	// A date parameter that refers to a search parameter defined on the specified type of
	// the DataRequirement, and which searches on elements of type date, dateTime, Period,
	// Schedule, or Timing.
	SearchParam string `json:"searchParam"`
}

// CapabilityStatement_Endpoint is A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server
// for a particular version of FHIR that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type CapabilityStatement_Endpoint struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A list of the messaging transport protocol(s) identifiers, supported by this
	// endpoint.
	Protocol *Coding `json:"protocol,omitempty"`
	// The network address of the endpoint. For solutions that do not use network addresses
	// for routing, it can be just an identifier.
	Address string `json:"address"`
	// Extensions for address
	Address_ext *Element `json:"_address"`
}

// Procedure_Performer is An action that is or was performed on or for a patient. This can be a physical
// intervention like an operation, or less invasive like long term services,
// counseling, or hypnotherapy.
type Procedure_Performer struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Distinguishes the type of involvement of the performer in the procedure. For
	// example, surgeon, anaesthetist, endoscopist.
	Function *CodeableConcept `json:"function"`
	// The practitioner who was involved in the procedure.
	Actor *Reference `json:"actor,omitempty"`
	// The organization the device or practitioner was acting on behalf of.
	OnBehalfOf *Reference `json:"onBehalfOf"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// StructureMap_Dependent is A Map of relationships between 2 structures that can be used to transform data.
type StructureMap_Dependent struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Name of a rule or group to apply.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Variable to pass to the rule or group.
	Variable []string `json:"variable"`
	// Extensions for variable
	Variable_ext []*Element `json:"_variable"`
}

// VisionPrescription_LensSpecification is An authorization for the provision of glasses and/or contact lenses to a patient.
type VisionPrescription_LensSpecification struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Lens power measured in dioptres (0.25 units).
	Sphere float64 `json:"sphere"`
	// Adjustment for astigmatism measured in integer degrees.
	Axis int64 `json:"axis"`
	// Contact lens diameter measured in millimetres.
	Diameter float64 `json:"diameter"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for cylinder
	Cylinder_ext *Element `json:"_cylinder"`
	// Extensions for add
	Add_ext *Element `json:"_add"`
	// The recommended maximum wear period for the lens.
	Duration *Quantity `json:"duration"`
	// Brand recommendations or restrictions.
	Brand string `json:"brand"`
	// Extensions for axis
	Axis_ext *Element `json:"_axis"`
	// Contact lens power measured in dioptres (0.25 units).
	Power float64 `json:"power"`
	// Extensions for power
	Power_ext *Element `json:"_power"`
	// Extensions for diameter
	Diameter_ext *Element `json:"_diameter"`
	// Identifies the type of vision correction product which is required for the patient.
	Product *CodeableConcept `json:"product,omitempty"`
	// Allows for adjustment on two axis.
	Prism []*VisionPrescription_Prism `json:"prism"`
	// Power adjustment for multifocal lenses measured in dioptres (0.25 units).
	Add float64 `json:"add"`
	// Extensions for brand
	Brand_ext *Element `json:"_brand"`
	// Extensions for color
	Color_ext *Element `json:"_color"`
	// The eye for which the lens specification applies.
	Eye VisionPrescription_LensSpecificationEye `json:"eye"`
	// Extensions for eye
	Eye_ext *Element `json:"_eye"`
	// Extensions for backCurve
	BackCurve_ext *Element `json:"_backCurve"`
	// Back curvature measured in millimetres.
	BackCurve float64 `json:"backCurve"`
	// Extensions for sphere
	Sphere_ext *Element `json:"_sphere"`
	// Power adjustment for astigmatism measured in dioptres (0.25 units).
	Cylinder float64 `json:"cylinder"`
	// Notes for special requirements such as coatings and lens materials.
	Note []*Annotation `json:"note"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Special color or pattern.
	Color string `json:"color"`
}

type VisionPrescription_LensSpecificationEye string

const (
	VisionPrescription_LensSpecificationEyeRight VisionPrescription_LensSpecificationEye = "right"
	VisionPrescription_LensSpecificationEyeLeft  VisionPrescription_LensSpecificationEye = "left"
)

// Attachment is For referring to data content defined in other formats.
type Attachment struct {
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A location where the data can be accessed.
	Url string `json:"url"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Extensions for size
	Size_ext *Element `json:"_size"`
	// The calculated hash of the data using SHA-1. Represented using base64.
	Hash base64Binary `json:"hash"`
	// Extensions for creation
	Creation_ext *Element `json:"_creation"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for hash
	Hash_ext *Element `json:"_hash"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// The date that the attachment was first created.
	Creation string `json:"creation"`
	// Extensions for contentType
	ContentType_ext *Element `json:"_contentType"`
	// The human language of the content. The value can be any valid value according to BCP
	// 47.
	Language string `json:"language"`
	// Extensions for data
	Data_ext *Element `json:"_data"`
	// The number of bytes of data that make up this attachment (before base64 encoding, if
	// that is done).
	Size uint64 `json:"size"`
	// A label or set of text to display in place of the data.
	Title string `json:"title"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The actual data of the attachment - a sequence of bytes, base64 encoded.
	Data base64Binary `json:"data"`
	// Identifies the type of the data in the attachment and allows a method to be chosen
	// to interpret or render the data. Includes mime type parameters such as charset where
	// appropriate.
	ContentType string `json:"contentType"`
}

// SubstanceSourceMaterial_Author is Source material shall capture information on the taxonomic and anatomical origins as
// well as the fraction of a material that can result in or can be modified to form a
// substance. This set of data elements shall be used to define polymer substances
// isolated from biological matrices. Taxonomic and anatomical origins shall be
// described using a controlled vocabulary as required. This information is captured
// for naturally derived polymers ( . starch) and structurally diverse substances. For
// Organisms belonging to the Kingdom Plantae the Substance level defines the fresh
// material of a single species or infraspecies, the Herbal Drug and the Herbal
// preparation. For Herbal preparations, the fraction information will be captured at
// the Substance information level and additional information for herbal extracts will
// be captured at the Specified Substance Group 1 information level. See for further
// explanation the Substance Class: Structurally Diverse and the herbal annex.
type SubstanceSourceMaterial_Author struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of author of an organism species shall be specified. The parenthetical
	// author of an organism species refers to the first author who published the
	// plant/animal name (of any rank). The primary author of an organism species refers to
	// the first author(s), who validly published the plant/animal name.
	AuthorType *CodeableConcept `json:"authorType"`
	// The author of an organism species shall be specified. The author year of an organism
	// shall also be specified when applicable; refers to the year in which the first
	// author(s) published the infraspecific plant/animal name (of any rank).
	AuthorDescription string `json:"authorDescription"`
	// Extensions for authorDescription
	AuthorDescription_ext *Element `json:"_authorDescription"`
}

// TerminologyCapabilities_Closure is A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a
// FHIR Terminology Server that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type TerminologyCapabilities_Closure struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// If cross-system closure is supported.
	Translation bool `json:"translation"`
	// Extensions for translation
	Translation_ext *Element `json:"_translation"`
}

// SpecimenDefinition_Container is A kind of specimen with associated set of requirements.
type SpecimenDefinition_Container struct {
	// The type of material of the container.
	Material *CodeableConcept `json:"material"`
	// Color of container cap.
	Cap *CodeableConcept `json:"cap"`
	// The minimum volume to be conditioned in the container.
	MinimumVolumeQuantity *Quantity `json:"minimumVolumeQuantity"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Special processing that should be applied to the container for this kind of specimen.
	Preparation string `json:"preparation"`
	// The minimum volume to be conditioned in the container.
	// pattern ^[ \r\n\t\S]+$
	MinimumVolumeString string `json:"minimumVolumeString"`
	// Extensions for minimumVolumeString
	MinimumVolumeString_ext *Element `json:"_minimumVolumeString"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The type of container used to contain this kind of specimen.
	Type *CodeableConcept `json:"type"`
	// The textual description of the kind of container.
	Description string `json:"description"`
	// The capacity (volume or other measure) of this kind of container.
	Capacity *Quantity `json:"capacity"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Substance introduced in the kind of container to preserve, maintain or enhance the
	// specimen. Examples: Formalin, Citrate, EDTA.
	Additive []*SpecimenDefinition_Additive `json:"additive"`
	// Extensions for preparation
	Preparation_ext *Element `json:"_preparation"`
}

// TestReport_Operation is A summary of information based on the results of executing a TestScript.
type TestReport_Operation struct {
	// The result of this operation.
	Result TestReport_OperationResult `json:"result"`
	// Extensions for result
	Result_ext *Element `json:"_result"`
	// An explanatory message associated with the result.
	Message string `json:"message"`
	// Extensions for message
	Message_ext *Element `json:"_message"`
	// A link to further details on the result.
	Detail string `json:"detail"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for detail
	Detail_ext *Element `json:"_detail"`
}

type TestReport_OperationResult string

const (
	TestReport_OperationResultPass    TestReport_OperationResult = "pass"
	TestReport_OperationResultSkip    TestReport_OperationResult = "skip"
	TestReport_OperationResultFail    TestReport_OperationResult = "fail"
	TestReport_OperationResultWarning TestReport_OperationResult = "warning"
	TestReport_OperationResultError   TestReport_OperationResult = "error"
)

// uuid is A UUID, represented as a URI
type uuid string

var uuidPattern = regexp.MustCompile(`^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`)

func (t *uuid) Validate() bool {
	return uuidPattern.MatchString(string(*t))
}

// CapabilityStatement_Operation is A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server
// for a particular version of FHIR that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type CapabilityStatement_Operation struct {
	// Where the formal definition can be found. If a server references the base definition
	// of an Operation (i.e. from the specification itself such as
	// ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it
	// supports the full capabilities of the operation - e.g. both GET and POST invocation.
	//  If it only supports a subset, it must define its own custom
	// [[[OperationDefinition]]] with a 'base' of the original OperationDefinition.  The
	// custom definition would describe the specific subset of functionality supported.
	Definition string `json:"definition,omitempty"`
	// Documentation that describes anything special about the operation behavior, possibly
	// detailing different behavior for system, type and instance-level invocation of the
	// operation.
	Documentation string `json:"documentation"`
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The name of the operation or query. For an operation, this is the name  prefixed
	// with $ and used in the URL. For a query, this is the name used in the _query
	// parameter when the query is called.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
}

// ChargeItem_Performer is The resource ChargeItem describes the provision of healthcare provider products for
// a certain patient, therefore referring not only to the product, but containing in
// addition details of the provision, like date, time, amounts and participating
// organizations and persons. Main Usage of the ChargeItem is to enable the billing
// process and internal cost allocation.
type ChargeItem_Performer struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Describes the type of performance or participation(e.g. primary surgeon,
	// anesthesiologiest, etc.).
	Function *CodeableConcept `json:"function"`
	// The device, practitioner, etc. who performed or participated in the service.
	Actor *Reference `json:"actor,omitempty"`
}

// Contract_Offer is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract_Offer struct {
	// Offer Recipient.
	Party []*Contract_Party `json:"party"`
	// The owner of an asset has the residual control rights over the asset: the right to
	// decide all usages of the asset in any way not inconsistent with a prior contract,
	// custom, or law (Hart, 1995, p. 30).
	Topic *Reference `json:"topic"`
	// Type of choice made by accepting party with respect to an offer made by an offeror/
	// grantee.
	Decision *CodeableConcept `json:"decision"`
	// Extensions for linkId
	LinkId_ext []*Element `json:"_linkId"`
	// Security labels that protects the offer.
	SecurityLabelNumber []uint64 `json:"securityLabelNumber"`
	// Extensions for securityLabelNumber
	SecurityLabelNumber_ext []*Element `json:"_securityLabelNumber"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Unique identifier for this particular Contract Provision.
	Identifier []*Identifier `json:"identifier"`
	// How the decision about a Contract was conveyed.
	DecisionMode []*CodeableConcept `json:"decisionMode"`
	// Human readable form of this Contract Offer.
	Text string `json:"text"`
	// The id of the clause or question text of the offer in the referenced
	// questionnaire/response.
	LinkId []string `json:"linkId"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Type of Contract Provision such as specific requirements, purposes for actions,
	// obligations, prohibitions, e.g. life time maximum benefit.
	Type *CodeableConcept `json:"type"`
	// Response to offer text.
	Answer []*Contract_Answer `json:"answer"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
}

// ImplementationGuide_Resource is A set of rules of how a particular interoperability or standards problem is solved -
// typically through the use of FHIR resources. This resource is used to gather all the
// parts of an implementation guide into a logical whole and to publish a computable
// definition of all the parts.
type ImplementationGuide_Resource struct {
	// Extensions for exampleCanonical
	ExampleCanonical_ext *Element `json:"_exampleCanonical"`
	// A human assigned name for the resource. All resources SHOULD have a name, but the
	// name may be extracted from the resource (e.g. ValueSet.name).
	Name string `json:"name"`
	// Extensions for exampleBoolean
	ExampleBoolean_ext *Element `json:"_exampleBoolean"`
	// If true or a reference, indicates the resource is an example instance.  If a
	// reference is present, indicates that the example is an example of the specified
	// profile.
	// pattern ^\S*$
	ExampleCanonical string `json:"exampleCanonical"`
	// Extensions for groupingId
	GroupingId_ext *Element `json:"_groupingId"`
	// If true or a reference, indicates the resource is an example instance.  If a
	// reference is present, indicates that the example is an example of the specified
	// profile.
	// pattern ^true|false$
	ExampleBoolean bool `json:"exampleBoolean"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Where this resource is found.
	Reference *Reference `json:"reference,omitempty"`
	// Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions
	// are specified, the resource is assumed to apply to all the versions stated in
	// ImplementationGuide.fhirVersion.
	FhirVersion []ImplementationGuide_ResourceFhirVersion `json:"fhirVersion"`
	// Extensions for fhirVersion
	FhirVersion_ext []*Element `json:"_fhirVersion"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Reference to the id of the grouping this resource appears in.
	GroupingId string `json:"groupingId"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// A description of the reason that a resource has been included in the implementation
	// guide.
	Description string `json:"description"`
}

type ImplementationGuide_ResourceFhirVersion string

const ()

// ResourceList is
type ResourceList struct {
}

// Meta is The metadata about a resource. This is content in the resource that is maintained by
// the infrastructure. Changes to the content might not always be associated with
// version changes to the resource.
type Meta struct {
	// A list of profiles (references to [[[StructureDefinition]]] resources) that this
	// resource claims to conform to. The URL is a reference to
	// [[[StructureDefinition.url]]].
	Profile []string `json:"profile"`
	// Security labels applied to this resource. These tags connect specific resources to
	// the overall security policy and infrastructure.
	Security []*Coding `json:"security"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The version specific identifier, as it appears in the version portion of the URL.
	// This value changes when the resource is created, updated, or deleted.
	VersionId string `json:"versionId"`
	// Extensions for versionId
	VersionId_ext *Element `json:"_versionId"`
	// Extensions for lastUpdated
	LastUpdated_ext *Element `json:"_lastUpdated"`
	// A uri that identifies the source system of the resource. This provides a minimal
	// amount of [[[Provenance]]] information that can be used to track or differentiate
	// the source of information in the resource. The source may identify another FHIR
	// server, document, message, database, etc.
	Source string `json:"source"`
	// Extensions for source
	Source_ext *Element `json:"_source"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// When the resource last changed - e.g. when the version changed.
	LastUpdated string `json:"lastUpdated"`
	// Tags applied to this resource. Tags are intended to be used to identify and relate
	// resources to process and workflow, and applications are not required to consider the
	// tags when interpreting the meaning of a resource.
	Tag []*Coding `json:"tag"`
}

// ClaimResponse_Detail1 is This resource provides the adjudication details from the processing of a Claim
// resource.
type ClaimResponse_Detail1 struct {
	// When the value is a group code then this item collects a set of related claim
	// details, otherwise this contains the product, service, drug or other billing code
	// for the item.
	ProductOrService *CodeableConcept `json:"productOrService,omitempty"`
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity"`
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []uint64 `json:"noteNumber"`
	// The quantity times the unit price for an additional service or product or charge.
	Net *Money `json:"net"`
	// The third-tier service adjudications for payor added services.
	SubDetail []*ClaimResponse_SubDetail1 `json:"subDetail"`
	// Item typification or modifiers codes to convey additional context for the product or
	// service.
	Modifier []*CodeableConcept `json:"modifier"`
	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *Money `json:"unitPrice"`
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
	// The adjudication results.
	Adjudication []*ClaimResponse_Adjudication `json:"adjudication,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// A real number that represents a multiplier used in determining the overall value of
	// services delivered and/or goods received. The concept of a Factor allows for a
	// discount or surcharge multiplier to be applied to a monetary amount.
	Factor float64 `json:"factor"`
	// Extensions for noteNumber
	NoteNumber_ext []*Element `json:"_noteNumber"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// TestScript_Action2 is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_Action2 struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An operation would involve a REST request to a server.
	Operation *TestScript_Operation `json:"operation,omitempty"`
}

// MedicationKnowledge_PatientCharacteristics is Information about a medication that is used to support knowledge.
type MedicationKnowledge_PatientCharacteristics struct {
	// Extensions for value
	Value_ext []*Element `json:"_value"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Specific characteristic that is relevant to the administration guideline (e.g.
	// height, weight, gender).
	CharacteristicCodeableConcept *CodeableConcept `json:"characteristicCodeableConcept"`
	// Specific characteristic that is relevant to the administration guideline (e.g.
	// height, weight, gender).
	CharacteristicQuantity *Quantity `json:"characteristicQuantity"`
	// The specific characteristic (e.g. height, weight, gender, etc.).
	Value []string `json:"value"`
}

// MedicationKnowledge_Substitution is Information about a medication that is used to support knowledge.
type MedicationKnowledge_Substitution struct {
	// Extensions for allowed
	Allowed_ext *Element `json:"_allowed"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Specifies the type of substitution allowed.
	Type *CodeableConcept `json:"type,omitempty"`
	// Specifies if regulation allows for changes in the medication when dispensing.
	Allowed bool `json:"allowed"`
}

// TestReport_Setup is A summary of information based on the results of executing a TestScript.
type TestReport_Setup struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Action would contain either an operation or an assertion.
	Action []*TestReport_Action `json:"action,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// Coding is A reference to a code defined by a terminology system.
type Coding struct {
	// A representation of the meaning of the code in the system, following the rules of
	// the system.
	Display string `json:"display"`
	// Indicates that this coding was chosen by a user directly - e.g. off a pick list of
	// available items (codes or displays).
	UserSelected bool `json:"userSelected"`
	// Extensions for userSelected
	UserSelected_ext *Element `json:"_userSelected"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The identification of the code system that defines the meaning of the symbol in the
	// code.
	System string `json:"system"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// A symbol in syntax defined by the system. The symbol may be a predefined code or an
	// expression in a syntax defined by the coding system (e.g. post-coordination).
	Code string `json:"code"`
	// Extensions for display
	Display_ext *Element `json:"_display"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for system
	System_ext *Element `json:"_system"`
	// The version of the code system which was used when choosing this code. Note that a
	// well-maintained code system does not need the version reported, because the meaning
	// of codes is consistent across versions. However this cannot consistently be assured,
	// and when the meaning is not guaranteed to be consistent, the version SHOULD be
	// exchanged.
	Version string `json:"version"`
}

// HumanName is A human's name with the ability to identify parts and usage.
type HumanName struct {
	// Extensions for prefix
	Prefix_ext []*Element `json:"_prefix"`
	// Part of the name that is acquired as a title due to academic, legal, employment or
	// nobility status, etc. and that appears at the end of the name.
	Suffix []string `json:"suffix"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for use
	Use_ext *Element `json:"_use"`
	// Extensions for family
	Family_ext *Element `json:"_family"`
	// Given name.
	Given []string `json:"given"`
	// Part of the name that is acquired as a title due to academic, legal, employment or
	// nobility status, etc. and that appears at the start of the name.
	Prefix []string `json:"prefix"`
	// The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the
	// family name of a son is the first name of his father.
	Family string `json:"family"`
	// Extensions for given
	Given_ext []*Element `json:"_given"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Identifies the purpose for this name.
	Use HumanNameUse `json:"use"`
	// Specifies the entire name as it should be displayed e.g. on an application UI. This
	// may be provided instead of or as well as the specific parts.
	Text string `json:"text"`
	// Indicates the period of time when this name was valid for the named person.
	Period *Period `json:"period"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
	// Extensions for suffix
	Suffix_ext []*Element `json:"_suffix"`
}

type HumanNameUse string

const (
	HumanNameUseUsual     HumanNameUse = "usual"
	HumanNameUseOfficial  HumanNameUse = "official"
	HumanNameUseTemp      HumanNameUse = "temp"
	HumanNameUseNickname  HumanNameUse = "nickname"
	HumanNameUseAnonymous HumanNameUse = "anonymous"
	HumanNameUseOld       HumanNameUse = "old"
	HumanNameUseMaiden    HumanNameUse = "maiden"
)

// CodeSystem_Property is The CodeSystem resource is used to declare the existence of and describe a code
// system or code system supplement and its key properties, and optionally define a
// part or all of its content.
type CodeSystem_Property struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A code that is used to identify the property. The code is used internally (in
	// CodeSystem.concept.property.code) and also externally, such as in property filters.
	Code string `json:"code"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// Reference to the formal meaning of the property. One possible source of meaning is
	// the [Concept Properties](codesystem-concept-properties.html) code system.
	Uri string `json:"uri"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for uri
	Uri_ext *Element `json:"_uri"`
	// A description of the property- why it is defined, and how its value might be used.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// The type of the property value. Properties of type "code" contain a code defined by
	// the code system (e.g. a reference to another defined concept).
	Type CodeSystem_PropertyType `json:"type"`
}

type CodeSystem_PropertyType string

const (
	CodeSystem_PropertyTypeCode     CodeSystem_PropertyType = "code"
	CodeSystem_PropertyTypeCoding   CodeSystem_PropertyType = "Coding"
	CodeSystem_PropertyTypeString   CodeSystem_PropertyType = "string"
	CodeSystem_PropertyTypeInteger  CodeSystem_PropertyType = "integer"
	CodeSystem_PropertyTypeBoolean  CodeSystem_PropertyType = "boolean"
	CodeSystem_PropertyTypeDateTime CodeSystem_PropertyType = "dateTime"
	CodeSystem_PropertyTypeDecimal  CodeSystem_PropertyType = "decimal"
)

// CoverageEligibilityRequest_Diagnosis is The CoverageEligibilityRequest provides patient and insurance coverage information
// to an insurer for them to respond, in the form of an CoverageEligibilityResponse,
// with information regarding whether the stated coverage is valid and in-force and
// optionally to provide the insurance details of the policy.
type CoverageEligibilityRequest_Diagnosis struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The nature of illness or problem in a coded form or as a reference to an external
	// defined Condition.
	DiagnosisCodeableConcept *CodeableConcept `json:"diagnosisCodeableConcept"`
	// The nature of illness or problem in a coded form or as a reference to an external
	// defined Condition.
	DiagnosisReference *Reference `json:"diagnosisReference"`
}

// PlanDefinition_Condition is This resource allows for the definition of various types of plans as a sharable,
// consumable, and executable artifact. The resource is general enough to support the
// description of a broad range of clinical artifacts such as clinical decision support
// rules, order sets and protocols.
type PlanDefinition_Condition struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The kind of condition.
	Kind PlanDefinition_ConditionKind `json:"kind"`
	// Extensions for kind
	Kind_ext *Element `json:"_kind"`
	// An expression that returns true or false, indicating whether the condition is
	// satisfied.
	Expression *Expression `json:"expression"`
}

type PlanDefinition_ConditionKind string

const (
	PlanDefinition_ConditionKindApplicability PlanDefinition_ConditionKind = "applicability"
	PlanDefinition_ConditionKindStart         PlanDefinition_ConditionKind = "start"
	PlanDefinition_ConditionKindStop          PlanDefinition_ConditionKind = "stop"
)

// SampledData is A series of measurements taken by a device, with upper and lower limits. There may
// be more than one dimension in the data.
type SampledData struct {
	// The base quantity that a measured value of zero represents. In addition, this
	// provides the units of the entire measurement series.
	Origin *Quantity `json:"origin,omitempty"`
	// Extensions for lowerLimit
	LowerLimit_ext *Element `json:"_lowerLimit"`
	// A series of data points which are decimal values separated by a single space
	// (character u20). The special values "E" (error), "L" (below detection limit) and "U"
	// (above detection limit) can also be used in place of a decimal value.
	Data string `json:"data"`
	// The length of time between sampling times, measured in milliseconds.
	Period float64 `json:"period"`
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A correction factor that is applied to the sampled data points before they are added
	// to the origin.
	Factor float64 `json:"factor"`
	// The number of sample points at each time point. If this value is greater than one,
	// then the dimensions will be interlaced - all the sample points for a point in time
	// will be recorded at once.
	Dimensions uint64 `json:"dimensions"`
	// Extensions for dimensions
	Dimensions_ext *Element `json:"_dimensions"`
	// Extensions for upperLimit
	UpperLimit_ext *Element `json:"_upperLimit"`
	// Extensions for data
	Data_ext *Element `json:"_data"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for period
	Period_ext *Element `json:"_period"`
	// The lower limit of detection of the measured points. This is needed if any of the
	// data points have the value "L" (lower than detection limit).
	LowerLimit float64 `json:"lowerLimit"`
	// The upper limit of detection of the measured points. This is needed if any of the
	// data points have the value "U" (higher than detection limit).
	UpperLimit float64 `json:"upperLimit"`
}

// ImplementationGuide_Page1 is A set of rules of how a particular interoperability or standards problem is solved -
// typically through the use of FHIR resources. This resource is used to gather all the
// parts of an implementation guide into a logical whole and to publish a computable
// definition of all the parts.
type ImplementationGuide_Page1 struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Relative path to the page.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Label for the page intended for human display.
	Title string `json:"title"`
	// Extensions for anchor
	Anchor_ext []*Element `json:"_anchor"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// The name of an anchor available on the page.
	Anchor []string `json:"anchor"`
}

// MolecularSequence_Roc is Raw data describing a biological sequence.
type MolecularSequence_Roc struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for numFN
	NumFN_ext []*Element `json:"_numFN"`
	// Extensions for precision
	Precision_ext []*Element `json:"_precision"`
	// Calculated sensitivity if the GQ score threshold was set to "score" field value.
	Sensitivity []float64 `json:"sensitivity"`
	// Extensions for score
	Score_ext []*Element `json:"_score"`
	// The number of false positives if the GQ score threshold was set to "score" field
	// value.
	NumFP []int64 `json:"numFP"`
	// Extensions for numFP
	NumFP_ext []*Element `json:"_numFP"`
	// Extensions for sensitivity
	Sensitivity_ext []*Element `json:"_sensitivity"`
	// Calculated fScore if the GQ score threshold was set to "score" field value.
	FMeasure []float64 `json:"fMeasure"`
	// Extensions for fMeasure
	FMeasure_ext []*Element `json:"_fMeasure"`
	// Invidual data point representing the GQ (genotype quality) score threshold.
	Score []int64 `json:"score"`
	// The number of true positives if the GQ score threshold was set to "score" field
	// value.
	NumTP []int64 `json:"numTP"`
	// Extensions for numTP
	NumTP_ext []*Element `json:"_numTP"`
	// The number of false negatives if the GQ score threshold was set to "score" field
	// value.
	NumFN []int64 `json:"numFN"`
	// Calculated precision if the GQ score threshold was set to "score" field value.
	Precision []float64 `json:"precision"`
}

// PlanDefinition_RelatedAction is This resource allows for the definition of various types of plans as a sharable,
// consumable, and executable artifact. The resource is general enough to support the
// description of a broad range of clinical artifacts such as clinical decision support
// rules, order sets and protocols.
type PlanDefinition_RelatedAction struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The element id of the related action.
	ActionId string `json:"actionId"`
	// The relationship of this action to the related action.
	Relationship PlanDefinition_RelatedActionRelationship `json:"relationship"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A duration or range of durations to apply to the relationship. For example, 30-60
	// minutes before.
	OffsetDuration *Duration `json:"offsetDuration"`
	// A duration or range of durations to apply to the relationship. For example, 30-60
	// minutes before.
	OffsetRange *Range `json:"offsetRange"`
	// Extensions for actionId
	ActionId_ext *Element `json:"_actionId"`
	// Extensions for relationship
	Relationship_ext *Element `json:"_relationship"`
}

type PlanDefinition_RelatedActionRelationship string

const (
	PlanDefinition_RelatedActionRelationshipBeforeStart         PlanDefinition_RelatedActionRelationship = "before-start"
	PlanDefinition_RelatedActionRelationshipBefore              PlanDefinition_RelatedActionRelationship = "before"
	PlanDefinition_RelatedActionRelationshipBeforeEnd           PlanDefinition_RelatedActionRelationship = "before-end"
	PlanDefinition_RelatedActionRelationshipConcurrentWithStart PlanDefinition_RelatedActionRelationship = "concurrent-with-start"
	PlanDefinition_RelatedActionRelationshipConcurrent          PlanDefinition_RelatedActionRelationship = "concurrent"
	PlanDefinition_RelatedActionRelationshipConcurrentWithEnd   PlanDefinition_RelatedActionRelationship = "concurrent-with-end"
	PlanDefinition_RelatedActionRelationshipAfterStart          PlanDefinition_RelatedActionRelationship = "after-start"
	PlanDefinition_RelatedActionRelationshipAfter               PlanDefinition_RelatedActionRelationship = "after"
	PlanDefinition_RelatedActionRelationshipAfterEnd            PlanDefinition_RelatedActionRelationship = "after-end"
)

// SubstanceSpecification_Relationship is The detailed description of a substance, typically at a level beyond what is used
// for prescribing.
type SubstanceSpecification_Relationship struct {
	// An operator for the amount, for example "average", "approximately", "less than".
	AmountType *CodeableConcept `json:"amountType"`
	// Supporting literature.
	Source []*Reference `json:"source"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// For example "salt to parent", "active moiety", "starting material".
	Relationship *CodeableConcept `json:"relationship"`
	// Extensions for isDefining
	IsDefining_ext *Element `json:"_isDefining"`
	// A numeric factor for the relationship, for instance to express that the salt of a
	// substance has some percentage of the active substance in relation to some other.
	// pattern ^[ \r\n\t\S]+$
	AmountString string `json:"amountString"`
	// A pointer to another substance, as a resource or just a representational code.
	SubstanceReference *Reference `json:"substanceReference"`
	// A numeric factor for the relationship, for instance to express that the salt of a
	// substance has some percentage of the active substance in relation to some other.
	AmountQuantity *Quantity `json:"amountQuantity"`
	// A numeric factor for the relationship, for instance to express that the salt of a
	// substance has some percentage of the active substance in relation to some other.
	AmountRange *Range `json:"amountRange"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// For example where an enzyme strongly bonds with a particular substance, this is a
	// defining relationship for that enzyme, out of several possible substance
	// relationships.
	IsDefining bool `json:"isDefining"`
	// A numeric factor for the relationship, for instance to express that the salt of a
	// substance has some percentage of the active substance in relation to some other.
	AmountRatio *Ratio `json:"amountRatio"`
	// For use when the numeric.
	AmountRatioLowLimit *Ratio `json:"amountRatioLowLimit"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A pointer to another substance, as a resource or just a representational code.
	SubstanceCodeableConcept *CodeableConcept `json:"substanceCodeableConcept"`
	// Extensions for amountString
	AmountString_ext *Element `json:"_amountString"`
}

// TerminologyCapabilities_Expansion is A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a
// FHIR Terminology Server that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type TerminologyCapabilities_Expansion struct {
	// Extensions for incomplete
	Incomplete_ext *Element `json:"_incomplete"`
	// Supported expansion parameter.
	Parameter []*TerminologyCapabilities_Parameter `json:"parameter"`
	// Documentation about text searching works.
	TextFilter string `json:"textFilter"`
	// Extensions for textFilter
	TextFilter_ext *Element `json:"_textFilter"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Whether the server supports paging on expansion.
	Paging bool `json:"paging"`
	// Allow request for incomplete expansions?
	Incomplete bool `json:"incomplete"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Whether the server can return nested value sets.
	Hierarchical bool `json:"hierarchical"`
	// Extensions for hierarchical
	Hierarchical_ext *Element `json:"_hierarchical"`
	// Extensions for paging
	Paging_ext *Element `json:"_paging"`
}

// RelatedArtifact is Related artifacts such as additional documentation, justification, or bibliographic
// references.
type RelatedArtifact struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The related resource, such as a library, value set, profile, or other knowledge
	// resource.
	Resource string `json:"resource"`
	// Extensions for citation
	Citation_ext *Element `json:"_citation"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Extensions for label
	Label_ext *Element `json:"_label"`
	// A brief description of the document or knowledge resource being referenced, suitable
	// for display to a consumer.
	Display string `json:"display"`
	// The document being referenced, represented as an attachment. This is exclusive with
	// the resource element.
	Document *Attachment `json:"document"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// A short label that can be used to reference the citation from elsewhere in the
	// containing artifact, such as a footnote index.
	Label string `json:"label"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// A url for the artifact that can be followed to access the actual content.
	Url string `json:"url"`
	// The type of relationship to the related artifact.
	Type RelatedArtifactType `json:"type"`
	// Extensions for display
	Display_ext *Element `json:"_display"`
	// A bibliographic citation for the related artifact. This text SHOULD be formatted
	// according to an accepted citation format.
	Citation string `json:"citation"`
}

type RelatedArtifactType string

const (
	RelatedArtifactTypeDocumentation RelatedArtifactType = "documentation"
	RelatedArtifactTypeJustification RelatedArtifactType = "justification"
	RelatedArtifactTypeCitation      RelatedArtifactType = "citation"
	RelatedArtifactTypePredecessor   RelatedArtifactType = "predecessor"
	RelatedArtifactTypeSuccessor     RelatedArtifactType = "successor"
	RelatedArtifactTypeDerivedFrom   RelatedArtifactType = "derived-from"
	RelatedArtifactTypeDependsOn     RelatedArtifactType = "depends-on"
	RelatedArtifactTypeComposedOf    RelatedArtifactType = "composed-of"
)

// ElementDefinition_Example is Captures constraints on each element within the resource, profile, or extension.
type ElementDefinition_Example struct {
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	ValueDateTime string `json:"valueDateTime"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^[A-Za-z0-9\-\.]{1,64}$
	ValueId string `json:"valueId"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$
	ValueOid string `json:"valueOid"`
	// Extensions for valueUnsignedInt
	ValueUnsignedInt_ext *Element `json:"_valueUnsignedInt"`
	// Extensions for valueCanonical
	ValueCanonical_ext *Element `json:"_valueCanonical"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
	ValueUuid string `json:"valueUuid"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueHumanName *HumanName `json:"valueHumanName"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueMoney *Money `json:"valueMoney"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValuePeriod *Period `json:"valuePeriod"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueSampledData *SampledData `json:"valueSampledData"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueTiming *Timing `json:"valueTiming"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueContributor *Contributor `json:"valueContributor"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^\S*$
	ValueCanonical string `json:"valueCanonical"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^[ \r\n\t\S]+$
	ValueMarkdown string `json:"valueMarkdown"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	ValueTime string `json:"valueTime"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueAddress *Address `json:"valueAddress"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueCoding *Coding `json:"valueCoding"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueReference *Reference `json:"valueReference"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^[0]|([1-9][0-9]*)$
	ValueUnsignedInt uint64 `json:"valueUnsignedInt"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^\S*$
	ValueUri string `json:"valueUri"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueDistance *Distance `json:"valueDistance"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueDuration *Duration `json:"valueDuration"`
	// Extensions for valueMarkdown
	ValueMarkdown_ext *Element `json:"_valueMarkdown"`
	// Extensions for valueTime
	ValueTime_ext *Element `json:"_valueTime"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueContactPoint *ContactPoint `json:"valueContactPoint"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueRatio *Ratio `json:"valueRatio"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueTriggerDefinition *TriggerDefinition `json:"valueTriggerDefinition"`
	// Extensions for valueId
	ValueId_ext *Element `json:"_valueId"`
	// Extensions for valueUrl
	ValueUrl_ext *Element `json:"_valueUrl"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueAge *Age `json:"valueAge"`
	// Extensions for valueDecimal
	ValueDecimal_ext *Element `json:"_valueDecimal"`
	// Extensions for valueInstant
	ValueInstant_ext *Element `json:"_valueInstant"`
	// Extensions for valueOid
	ValueOid_ext *Element `json:"_valueOid"`
	// Extensions for valueUri
	ValueUri_ext *Element `json:"_valueUri"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Describes the purpose of this example amoung the set of examples.
	Label string `json:"label"`
	// Extensions for valueDate
	ValueDate_ext *Element `json:"_valueDate"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^[1-9][0-9]*$
	ValuePositiveInt uint64 `json:"valuePositiveInt"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^\S*$
	ValueUrl string `json:"valueUrl"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	ValueDate string `json:"valueDate"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$
	ValueInstant string `json:"valueInstant"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^-?([0]|([1-9][0-9]*))$
	ValueInteger int64 `json:"valueInteger"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// Extensions for valuePositiveInt
	ValuePositiveInt_ext *Element `json:"_valuePositiveInt"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueAnnotation *Annotation `json:"valueAnnotation"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueAttachment *Attachment `json:"valueAttachment"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueParameterDefinition *ParameterDefinition `json:"valueParameterDefinition"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueRelatedArtifact *RelatedArtifact `json:"valueRelatedArtifact"`
	// Extensions for label
	Label_ext *Element `json:"_label"`
	// Extensions for valueBase64Binary
	ValueBase64Binary_ext *Element `json:"_valueBase64Binary"`
	// Extensions for valueInteger
	ValueInteger_ext *Element `json:"_valueInteger"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^(\s*([0-9a-zA-Z\+/=]){4}\s*)+$
	ValueBase64Binary string `json:"valueBase64Binary"`
	// Extensions for valueDateTime
	ValueDateTime_ext *Element `json:"_valueDateTime"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueCount *Count `json:"valueCount"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueRange *Range `json:"valueRange"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueDataRequirement *DataRequirement `json:"valueDataRequirement"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueUsageContext *UsageContext `json:"valueUsageContext"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	ValueDecimal float64 `json:"valueDecimal"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueIdentifier *Identifier `json:"valueIdentifier"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueDosage *Dosage `json:"valueDosage"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	// pattern ^[^\s]+(\s[^\s]+)*$
	ValueCode string `json:"valueCode"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// Extensions for valueUuid
	ValueUuid_ext *Element `json:"_valueUuid"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueSignature *Signature `json:"valueSignature"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueExpression *Expression `json:"valueExpression"`
	// Extensions for valueCode
	ValueCode_ext *Element `json:"_valueCode"`
	// The actual value for the element, which must be one of the types allowed for this
	// element.
	ValueContactDetail *ContactDetail `json:"valueContactDetail"`
}

// CodeSystem_Concept is The CodeSystem resource is used to declare the existence of and describe a code
// system or code system supplement and its key properties, and optionally define a
// part or all of its content.
type CodeSystem_Concept struct {
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// The formal definition of the concept. The code system resource does not make formal
	// definitions required, because of the prevalence of legacy systems. However, they are
	// highly recommended, as without them there is no formal meaning associated with the
	// concept.
	Definition string `json:"definition"`
	// Extensions for definition
	Definition_ext *Element `json:"_definition"`
	// Defines children of a concept to produce a hierarchy of concepts. The nature of the
	// relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.
	Concept []*CodeSystem_Concept `json:"concept"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A code - a text symbol - that uniquely identifies the concept within the code system.
	Code string `json:"code"`
	// Additional representations for the concept - other languages, aliases, specialized
	// purposes, used for particular purposes, etc.
	Designation []*CodeSystem_Designation `json:"designation"`
	// A property value for this concept.
	Property []*CodeSystem_Property1 `json:"property"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A human readable string that is the recommended default way to present this concept
	// to a user.
	Display string `json:"display"`
	// Extensions for display
	Display_ext *Element `json:"_display"`
}

// SpecimenDefinition_TypeTested is A kind of specimen with associated set of requirements.
type SpecimenDefinition_TypeTested struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The specimen's container.
	Container *SpecimenDefinition_Container `json:"container"`
	// Requirements for delivery and special handling of this kind of conditioned specimen.
	Requirement string `json:"requirement"`
	// Set of instructions for preservation/transport of the specimen at a defined
	// temperature interval, prior the testing process.
	Handling []*SpecimenDefinition_Handling `json:"handling"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for isDerived
	IsDerived_ext *Element `json:"_isDerived"`
	// Extensions for requirement
	Requirement_ext *Element `json:"_requirement"`
	// Criterion for rejection of the specimen in its container by the laboratory.
	RejectionCriterion []*CodeableConcept `json:"rejectionCriterion"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The kind of specimen conditioned for testing expected by lab.
	Type *CodeableConcept `json:"type"`
	// The preference for this type of conditioned specimen.
	Preference SpecimenDefinition_TypeTestedPreference `json:"preference"`
	// Extensions for preference
	Preference_ext *Element `json:"_preference"`
	// Primary of secondary specimen.
	IsDerived bool `json:"isDerived"`
	// The usual time that a specimen of this kind is retained after the ordered tests are
	// completed, for the purpose of additional testing.
	RetentionTime *Duration `json:"retentionTime"`
}

type SpecimenDefinition_TypeTestedPreference string

const (
	SpecimenDefinition_TypeTestedPreferencePreferred SpecimenDefinition_TypeTestedPreference = "preferred"
	SpecimenDefinition_TypeTestedPreferenceAlternate SpecimenDefinition_TypeTestedPreference = "alternate"
)

// CareTeam_Participant is The Care Team includes all the people and organizations who plan to participate in
// the coordination and delivery of care for a patient.
type CareTeam_Participant struct {
	// The organization of the practitioner.
	OnBehalfOf *Reference `json:"onBehalfOf"`
	// Indicates when the specific member or organization did (or is intended to) come into
	// effect and end.
	Period *Period `json:"period"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates specific responsibility of an individual within the care team, such as
	// "Primary care physician", "Trained social worker counselor", "Caregiver", etc.
	Role []*CodeableConcept `json:"role"`
	// The specific person or organization who is participating/expected to participate in
	// the care team.
	Member *Reference `json:"member"`
}

// ImagingStudy_Instance is Representation of the content produced in a DICOM imaging study. A study comprises a
// set of series, each of which includes a set of Service-Object Pair Instances (SOP
// Instances - images or other data) acquired or produced in a common context.  A
// series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may
// have multiple series of different modalities.
type ImagingStudy_Instance struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The number of instance in the series.
	Number uint64 `json:"number"`
	// The description of the instance.
	Title string `json:"title"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The DICOM SOP Instance UID for this image or other DICOM content.
	Uid string `json:"uid"`
	// Extensions for uid
	Uid_ext *Element `json:"_uid"`
	// DICOM instance  type.
	SopClass *Coding `json:"sopClass,omitempty"`
	// Extensions for number
	Number_ext *Element `json:"_number"`
}

// ValueSet_Include is A ValueSet resource instance specifies a set of codes drawn from one or more code
// systems, intended for use in a particular context. Value sets link between
// [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
type ValueSet_Include struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An absolute URI which is the code system from which the selected codes come from.
	System string `json:"system"`
	// Extensions for system
	System_ext *Element `json:"_system"`
	// The version of the code system that the codes are selected from, or the special
	// version '*' for all versions.
	Version string `json:"version"`
	// Specifies a concept to be included or excluded.
	Concept []*ValueSet_Concept `json:"concept"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Select concepts by specify a matching criterion based on the properties (including
	// relationships) defined by the system, or on filters defined by the system. If
	// multiple filters are specified, they SHALL all be true.
	Filter []*ValueSet_Filter `json:"filter"`
	// Selects the concepts found in this value set (based on its value set definition).
	// This is an absolute URI that is a reference to ValueSet.url.  If multiple value sets
	// are specified this includes the union of the contents of all of the referenced value
	// sets.
	ValueSet []string `json:"valueSet"`
}

// ImplementationGuide_Global is A set of rules of how a particular interoperability or standards problem is solved -
// typically through the use of FHIR resources. This resource is used to gather all the
// parts of an implementation guide into a logical whole and to publish a computable
// definition of all the parts.
type ImplementationGuide_Global struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of resource that all instances must conform to.
	Type string `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// A reference to the profile that all instances must conform to.
	Profile string `json:"profile,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// MedicationKnowledge_MaxDispense is Information about a medication that is used to support knowledge.
type MedicationKnowledge_MaxDispense struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The maximum number of units of the medication that can be dispensed.
	Quantity *Quantity `json:"quantity,omitempty"`
	// The period that applies to the maximum number of units.
	Period *Duration `json:"period"`
}

// Parameters_Parameter is This resource is a non-persisted resource used to pass information into and back
// from an [operation](operations.html). It has no other use, and there is no RESTful
// endpoint associated with it.
type Parameters_Parameter struct {
	// If the parameter is a data type.
	ValueHumanName *HumanName `json:"valueHumanName"`
	// If the parameter is a data type.
	ValueRange *Range `json:"valueRange"`
	// If the parameter is a data type.
	ValueSampledData *SampledData `json:"valueSampledData"`
	// If the parameter is a data type.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// Extensions for valueDateTime
	ValueDateTime_ext *Element `json:"_valueDateTime"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// If the parameter is a data type.
	// pattern ^\S*$
	ValueUrl string `json:"valueUrl"`
	// If the parameter is a data type.
	// pattern ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
	ValueUuid string `json:"valueUuid"`
	// The name of the parameter (reference to the operation definition).
	Name string `json:"name"`
	// Extensions for valueDecimal
	ValueDecimal_ext *Element `json:"_valueDecimal"`
	// If the parameter is a data type.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// If the parameter is a data type.
	ValueCoding *Coding `json:"valueCoding"`
	// If the parameter is a data type.
	ValuePeriod *Period `json:"valuePeriod"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for valueCode
	ValueCode_ext *Element `json:"_valueCode"`
	// If the parameter is a data type.
	// pattern ^-?([0]|([1-9][0-9]*))$
	ValueInteger int64 `json:"valueInteger"`
	// Extensions for valueInstant
	ValueInstant_ext *Element `json:"_valueInstant"`
	// Extensions for valuePositiveInt
	ValuePositiveInt_ext *Element `json:"_valuePositiveInt"`
	// If the parameter is a data type.
	ValueAnnotation *Annotation `json:"valueAnnotation"`
	// If the parameter is a data type.
	ValueRatio *Ratio `json:"valueRatio"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// If the parameter is a data type.
	// pattern ^(\s*([0-9a-zA-Z\+/=]){4}\s*)+$
	ValueBase64Binary string `json:"valueBase64Binary"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// If the parameter is a data type.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	ValueDateTime string `json:"valueDateTime"`
	// If the parameter is a data type.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$
	ValueInstant string `json:"valueInstant"`
	// If the parameter is a data type.
	// pattern ^\S*$
	ValueCanonical string `json:"valueCanonical"`
	// If the parameter is a data type.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	ValueDate string `json:"valueDate"`
	// If the parameter is a data type.
	ValueContactDetail *ContactDetail `json:"valueContactDetail"`
	// If the parameter is a data type.
	ValueDosage *Dosage `json:"valueDosage"`
	// If the parameter is a data type.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	ValueTime string `json:"valueTime"`
	// If the parameter is a data type.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// If the parameter is a whole resource.
	Resource *ResourceList `json:"resource"`
	// A named part of a multi-part parameter.
	Part []*Parameters_Parameter `json:"part"`
	// Extensions for valueDate
	ValueDate_ext *Element `json:"_valueDate"`
	// Extensions for valueId
	ValueId_ext *Element `json:"_valueId"`
	// If the parameter is a data type.
	ValueDistance *Distance `json:"valueDistance"`
	// If the parameter is a data type.
	ValueDataRequirement *DataRequirement `json:"valueDataRequirement"`
	// If the parameter is a data type.
	ValueTriggerDefinition *TriggerDefinition `json:"valueTriggerDefinition"`
	// If the parameter is a data type.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	ValueDecimal float64 `json:"valueDecimal"`
	// Extensions for valueUuid
	ValueUuid_ext *Element `json:"_valueUuid"`
	// If the parameter is a data type.
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept"`
	// If the parameter is a data type.
	ValueDuration *Duration `json:"valueDuration"`
	// If the parameter is a data type.
	ValueTiming *Timing `json:"valueTiming"`
	// If the parameter is a data type.
	ValueReference *Reference `json:"valueReference"`
	// If the parameter is a data type.
	ValueContributor *Contributor `json:"valueContributor"`
	// If the parameter is a data type.
	ValueRelatedArtifact *RelatedArtifact `json:"valueRelatedArtifact"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// If the parameter is a data type.
	// pattern ^[^\s]+(\s[^\s]+)*$
	ValueCode string `json:"valueCode"`
	// If the parameter is a data type.
	// pattern ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$
	ValueOid string `json:"valueOid"`
	// Extensions for valueTime
	ValueTime_ext *Element `json:"_valueTime"`
	// Extensions for valueUnsignedInt
	ValueUnsignedInt_ext *Element `json:"_valueUnsignedInt"`
	// Extensions for valueInteger
	ValueInteger_ext *Element `json:"_valueInteger"`
	// If the parameter is a data type.
	ValueIdentifier *Identifier `json:"valueIdentifier"`
	// If the parameter is a data type.
	ValueParameterDefinition *ParameterDefinition `json:"valueParameterDefinition"`
	// If the parameter is a data type.
	ValueUsageContext *UsageContext `json:"valueUsageContext"`
	// Extensions for valueOid
	ValueOid_ext *Element `json:"_valueOid"`
	// Extensions for valueUri
	ValueUri_ext *Element `json:"_valueUri"`
	// If the parameter is a data type.
	ValueAge *Age `json:"valueAge"`
	// If the parameter is a data type.
	ValueMoney *Money `json:"valueMoney"`
	// If the parameter is a data type.
	ValueSignature *Signature `json:"valueSignature"`
	// Extensions for valueCanonical
	ValueCanonical_ext *Element `json:"_valueCanonical"`
	// Extensions for valueMarkdown
	ValueMarkdown_ext *Element `json:"_valueMarkdown"`
	// If the parameter is a data type.
	// pattern ^[0]|([1-9][0-9]*)$
	ValueUnsignedInt uint64 `json:"valueUnsignedInt"`
	// If the parameter is a data type.
	ValueCount *Count `json:"valueCount"`
	// Extensions for valueBase64Binary
	ValueBase64Binary_ext *Element `json:"_valueBase64Binary"`
	// If the parameter is a data type.
	// pattern ^\S*$
	ValueUri string `json:"valueUri"`
	// Extensions for valueUrl
	ValueUrl_ext *Element `json:"_valueUrl"`
	// If the parameter is a data type.
	ValueAddress *Address `json:"valueAddress"`
	// If the parameter is a data type.
	ValueContactPoint *ContactPoint `json:"valueContactPoint"`
	// If the parameter is a data type.
	ValueExpression *Expression `json:"valueExpression"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// If the parameter is a data type.
	// pattern ^[A-Za-z0-9\-\.]{1,64}$
	ValueId string `json:"valueId"`
	// If the parameter is a data type.
	// pattern ^[ \r\n\t\S]+$
	ValueMarkdown string `json:"valueMarkdown"`
	// If the parameter is a data type.
	// pattern ^[1-9][0-9]*$
	ValuePositiveInt uint64 `json:"valuePositiveInt"`
	// If the parameter is a data type.
	ValueAttachment *Attachment `json:"valueAttachment"`
}

// TestScript_Origin is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_Origin struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Abstract name given to an origin server in this test script.  The name is provided
	// as a number starting at 1.
	Index int64 `json:"index"`
	// Extensions for index
	Index_ext *Element `json:"_index"`
	// The type of origin profile the test system supports.
	Profile *Coding `json:"profile,omitempty"`
}

// uri is String of characters used to identify a name or a resource
type uri string

var uriPattern = regexp.MustCompile(`^\S*$`)

func (t *uri) Validate() bool {
	return uriPattern.MatchString(string(*t))
}

// TestScript_Destination is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_Destination struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Abstract name given to a destination server in this test script.  The name is
	// provided as a number starting at 1.
	Index int64 `json:"index"`
	// Extensions for index
	Index_ext *Element `json:"_index"`
	// The type of destination profile the test system supports.
	Profile *Coding `json:"profile,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// MedicinalProduct_Name is Detailed definition of a medicinal product, typically for uses other than direct
// patient care (e.g. regulatory use).
type MedicinalProduct_Name struct {
	// Coding words or phrases of the name.
	NamePart []*MedicinalProduct_NamePart `json:"namePart"`
	// Country where the name applies.
	CountryLanguage []*MedicinalProduct_CountryLanguage `json:"countryLanguage"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The full product name.
	ProductName string `json:"productName"`
	// Extensions for productName
	ProductName_ext *Element `json:"_productName"`
}

// VerificationResult_Validator is Describes validation requirements, source(s), status and dates for one or more
// elements.
type VerificationResult_Validator struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Reference to the organization validating information.
	Organization *Reference `json:"organization,omitempty"`
	// A digital identity certificate associated with the validator.
	IdentityCertificate string `json:"identityCertificate"`
	// Extensions for identityCertificate
	IdentityCertificate_ext *Element `json:"_identityCertificate"`
	// Signed assertion by the validator that they have validated the information.
	AttestationSignature *Signature `json:"attestationSignature"`
}

// OperationDefinition_Binding is A formal computable definition of an operation (on the RESTful interface) or a named
// query (using the search interaction).
type OperationDefinition_Binding struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates the degree of conformance expectations associated with this binding - that
	// is, the degree to which the provided value set must be adhered to in the instances.
	Strength OperationDefinition_BindingStrength `json:"strength"`
	// Extensions for strength
	Strength_ext *Element `json:"_strength"`
	// Points to the value set or external definition (e.g. implicit value set) that
	// identifies the set of codes to be used.
	ValueSet string `json:"valueSet,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

type OperationDefinition_BindingStrength string

const (
	OperationDefinition_BindingStrengthRequired   OperationDefinition_BindingStrength = "required"
	OperationDefinition_BindingStrengthExtensible OperationDefinition_BindingStrength = "extensible"
	OperationDefinition_BindingStrengthPreferred  OperationDefinition_BindingStrength = "preferred"
	OperationDefinition_BindingStrengthExample    OperationDefinition_BindingStrength = "example"
)

// StructureDefinition_Differential is A definition of a FHIR structure. This resource is used to describe the underlying
// resources, data types defined in FHIR, and also for describing extensions and
// constraints on resources and data types.
type StructureDefinition_Differential struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Captures constraints on each element within the resource.
	Element []*ElementDefinition `json:"element,omitempty"`
}

// ChargeItemDefinition_Applicability is The ChargeItemDefinition resource provides the properties that apply to the
// (billing) codes necessary to calculate costs and prices. The properties may differ
// largely depending on type and realm, therefore this resource gives only a rough
// structure and requires profiling for each type of billing code system.
type ChargeItemDefinition_Applicability struct {
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Extensions for expression
	Expression_ext *Element `json:"_expression"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A brief, natural language description of the condition that effectively communicates
	// the intended semantics.
	Description string `json:"description"`
	// The media type of the language for the expression, e.g. "text/cql" for Clinical
	// Query Language expressions or "text/fhirpath" for FHIRPath expressions.
	Language string `json:"language"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// An expression that returns true or false, indicating whether the condition is
	// satisfied. When using FHIRPath expressions, the %context environment variable must
	// be replaced at runtime with the ChargeItem resource to which this definition is
	// applied.
	Expression string `json:"expression"`
}

// ExplanationOfBenefit_Adjudication is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_Adjudication struct {
	// A non-monetary value associated with the category. Mutually exclusive to the amount
	// element above.
	Value float64 `json:"value"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A code to indicate the information type of this adjudication record. Information
	// types may include: the value submitted, maximum values or percentages allowed or
	// payable under the plan, amounts that the patient is responsible for in-aggregate or
	// pertaining to this item, amounts paid by other coverages, and the benefit payable
	// for this item.
	Category *CodeableConcept `json:"category,omitempty"`
	// A code supporting the understanding of the adjudication result and explaining
	// variance from expected amount.
	Reason *CodeableConcept `json:"reason"`
	// Monetary amount associated with the category.
	Amount *Money `json:"amount"`
}

// MedicationKnowledge_Packaging is Information about a medication that is used to support knowledge.
type MedicationKnowledge_Packaging struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A code that defines the specific type of packaging that the medication can be found
	// in (e.g. blister sleeve, tube, bottle).
	Type *CodeableConcept `json:"type"`
	// The number of product units the package would contain if fully loaded.
	Quantity *Quantity `json:"quantity"`
}

// SupplyRequest_Parameter is A record of a request for a medication, substance or device used in the healthcare
// setting.
type SupplyRequest_Parameter struct {
	// A code or string that identifies the device detail being asserted.
	Code *CodeableConcept `json:"code"`
	// The value of the device detail.
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept"`
	// The value of the device detail.
	ValueRange *Range `json:"valueRange"`
	// The value of the device detail.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The value of the device detail.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// Timing_Repeat is Specifies an event that may occur multiple times. Timing schedules are used to
// record when things are planned, expected or requested to occur. The most common
// usage is in dosage instructions for medications. They are also used when planning
// care of various kinds, and may be used for reporting the schedule to which past
// regular activities were carried out.
type Timing_Repeat struct {
	// Either a duration for the length of the timing schedule, a range of possible length,
	// or outer bounds for start and/or end limits of the timing schedule.
	BoundsDuration *Duration `json:"boundsDuration"`
	// Either a duration for the length of the timing schedule, a range of possible length,
	// or outer bounds for start and/or end limits of the timing schedule.
	BoundsPeriod *Period `json:"boundsPeriod"`
	// Extensions for durationMax
	DurationMax_ext *Element `json:"_durationMax"`
	// The units of time for the period in UCUM units.
	PeriodUnit Timing_RepeatPeriodUnit `json:"periodUnit"`
	// If one or more days of week is provided, then the action happens only on the
	// specified day(s).
	DayOfWeek []string `json:"dayOfWeek"`
	// Extensions for dayOfWeek
	DayOfWeek_ext []*Element `json:"_dayOfWeek"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for countMax
	CountMax_ext *Element `json:"_countMax"`
	// Extensions for timeOfDay
	TimeOfDay_ext []*Element `json:"_timeOfDay"`
	// A total count of the desired number of repetitions across the duration of the entire
	// timing specification. If countMax is present, this element indicates the lower bound
	// of the allowed range of count values.
	Count uint64 `json:"count"`
	// Extensions for frequencyMax
	FrequencyMax_ext *Element `json:"_frequencyMax"`
	// Extensions for periodMax
	PeriodMax_ext *Element `json:"_periodMax"`
	// Specified time of day for action to take place.
	TimeOfDay []string `json:"timeOfDay"`
	// An approximate time period during the day, potentially linked to an event of daily
	// living that indicates when the action should occur.
	When []Timing_RepeatWhen `json:"when"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The units of time for the duration, in UCUM units.
	DurationUnit Timing_RepeatDurationUnit `json:"durationUnit"`
	// Extensions for period
	Period_ext *Element `json:"_period"`
	// Extensions for offset
	Offset_ext *Element `json:"_offset"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Either a duration for the length of the timing schedule, a range of possible length,
	// or outer bounds for start and/or end limits of the timing schedule.
	BoundsRange *Range `json:"boundsRange"`
	// Extensions for count
	Count_ext *Element `json:"_count"`
	// The number of times to repeat the action within the specified period. If
	// frequencyMax is present, this element indicates the lower bound of the allowed range
	// of the frequency.
	Frequency uint64 `json:"frequency"`
	// Extensions for frequency
	Frequency_ext *Element `json:"_frequency"`
	// Extensions for when
	When_ext []*Element `json:"_when"`
	// The number of minutes from the event. If the event code does not indicate whether
	// the minutes is before or after the event, then the offset is assumed to be after the
	// event.
	Offset uint64 `json:"offset"`
	// If present, indicates that the period is a range from [period] to [periodMax],
	// allowing expressing concepts such as "do this once every 3-5 days.
	PeriodMax float64 `json:"periodMax"`
	// If present, indicates that the count is a range - so to perform the action between
	// [count] and [countMax] times.
	CountMax uint64 `json:"countMax"`
	// If present, indicates that the duration is a range - so to perform the action
	// between [duration] and [durationMax] time length.
	DurationMax float64 `json:"durationMax"`
	// Indicates the duration of time over which repetitions are to occur; e.g. to express
	// "3 times per day", 3 would be the frequency and "1 day" would be the period. If
	// periodMax is present, this element indicates the lower bound of the allowed range of
	// the period length.
	Period float64 `json:"period"`
	// Extensions for periodUnit
	PeriodUnit_ext *Element `json:"_periodUnit"`
	// How long this thing happens for when it happens. If durationMax is present, this
	// element indicates the lower bound of the allowed range of the duration.
	Duration float64 `json:"duration"`
	// Extensions for duration
	Duration_ext *Element `json:"_duration"`
	// Extensions for durationUnit
	DurationUnit_ext *Element `json:"_durationUnit"`
	// If present, indicates that the frequency is a range - so to repeat between
	// [frequency] and [frequencyMax] times within the period or period range.
	FrequencyMax uint64 `json:"frequencyMax"`
}

type Timing_RepeatWhen string
type Timing_RepeatDurationUnit string
type Timing_RepeatPeriodUnit string

const (
	Timing_RepeatDurationUnitS   Timing_RepeatDurationUnit = "s"
	Timing_RepeatDurationUnitMin Timing_RepeatDurationUnit = "min"
	Timing_RepeatDurationUnitH   Timing_RepeatDurationUnit = "h"
	Timing_RepeatDurationUnitD   Timing_RepeatDurationUnit = "d"
	Timing_RepeatDurationUnitWk  Timing_RepeatDurationUnit = "wk"
	Timing_RepeatDurationUnitMo  Timing_RepeatDurationUnit = "mo"
	Timing_RepeatDurationUnitA   Timing_RepeatDurationUnit = "a"
	Timing_RepeatPeriodUnitS     Timing_RepeatPeriodUnit   = "s"
	Timing_RepeatPeriodUnitMin   Timing_RepeatPeriodUnit   = "min"
	Timing_RepeatPeriodUnitH     Timing_RepeatPeriodUnit   = "h"
	Timing_RepeatPeriodUnitD     Timing_RepeatPeriodUnit   = "d"
	Timing_RepeatPeriodUnitWk    Timing_RepeatPeriodUnit   = "wk"
	Timing_RepeatPeriodUnitMo    Timing_RepeatPeriodUnit   = "mo"
	Timing_RepeatPeriodUnitA     Timing_RepeatPeriodUnit   = "a"
)

// BiologicallyDerivedProduct_Processing is A material substance originating from a biological entity intended to be
// transplanted or infused
// into another (possibly the same) biological entity.
type BiologicallyDerivedProduct_Processing struct {
	// Extensions for timeDateTime
	TimeDateTime_ext *Element `json:"_timeDateTime"`
	// Time of processing.
	TimePeriod *Period `json:"timePeriod"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Substance added during processing.
	Additive *Reference `json:"additive"`
	// Description of of processing.
	Description string `json:"description"`
	// Procesing code.
	Procedure *CodeableConcept `json:"procedure"`
	// Time of processing.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	TimeDateTime string `json:"timeDateTime"`
}

// MedicationKnowledge_RelatedMedicationKnowledge is Information about a medication that is used to support knowledge.
type MedicationKnowledge_RelatedMedicationKnowledge struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The category of the associated medication knowledge reference.
	Type *CodeableConcept `json:"type,omitempty"`
	// Associated documentation about the associated medication knowledge.
	Reference []*Reference `json:"reference,omitempty"`
}

// SubstanceSourceMaterial_Hybrid is Source material shall capture information on the taxonomic and anatomical origins as
// well as the fraction of a material that can result in or can be modified to form a
// substance. This set of data elements shall be used to define polymer substances
// isolated from biological matrices. Taxonomic and anatomical origins shall be
// described using a controlled vocabulary as required. This information is captured
// for naturally derived polymers ( . starch) and structurally diverse substances. For
// Organisms belonging to the Kingdom Plantae the Substance level defines the fresh
// material of a single species or infraspecies, the Herbal Drug and the Herbal
// preparation. For Herbal preparations, the fraction information will be captured at
// the Substance information level and additional information for herbal extracts will
// be captured at the Specified Substance Group 1 information level. See for further
// explanation the Substance Class: Structurally Diverse and the herbal annex.
type SubstanceSourceMaterial_Hybrid struct {
	// The hybrid type of an organism shall be specified.
	HybridType *CodeableConcept `json:"hybridType"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for maternalOrganismId
	MaternalOrganismId_ext *Element `json:"_maternalOrganismId"`
	// The name of the maternal species constituting the hybrid organism shall be
	// specified. For plants, the parents aren’t always known, and it is unlikely that it
	// will be known which is maternal and which is paternal.
	MaternalOrganismName string `json:"maternalOrganismName"`
	// The identifier of the paternal species constituting the hybrid organism shall be
	// specified based on a controlled vocabulary.
	PaternalOrganismId string `json:"paternalOrganismId"`
	// The name of the paternal species constituting the hybrid organism shall be specified.
	PaternalOrganismName string `json:"paternalOrganismName"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The identifier of the maternal species constituting the hybrid organism shall be
	// specified based on a controlled vocabulary. For plants, the parents aren’t always
	// known, and it is unlikely that it will be known which is maternal and which is
	// paternal.
	MaternalOrganismId string `json:"maternalOrganismId"`
	// Extensions for maternalOrganismName
	MaternalOrganismName_ext *Element `json:"_maternalOrganismName"`
	// Extensions for paternalOrganismId
	PaternalOrganismId_ext *Element `json:"_paternalOrganismId"`
	// Extensions for paternalOrganismName
	PaternalOrganismName_ext *Element `json:"_paternalOrganismName"`
}

// SubstanceSpecification_Structure is The detailed description of a substance, typically at a level beyond what is used
// for prescribing.
type SubstanceSpecification_Structure struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Stereochemistry type.
	Stereochemistry *CodeableConcept `json:"stereochemistry"`
	// Extensions for molecularFormula
	MolecularFormula_ext *Element `json:"_molecularFormula"`
	// Specified per moiety according to the Hill system, i.e. first C, then H, then
	// alphabetical, each moiety separated by a dot.
	MolecularFormulaByMoiety string `json:"molecularFormulaByMoiety"`
	// Extensions for molecularFormulaByMoiety
	MolecularFormulaByMoiety_ext *Element `json:"_molecularFormulaByMoiety"`
	// Molecular structural representation.
	Representation []*SubstanceSpecification_Representation `json:"representation"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Optical activity type.
	OpticalActivity *CodeableConcept `json:"opticalActivity"`
	// Molecular formula.
	MolecularFormula string `json:"molecularFormula"`
	// Applicable for single substances that contain a radionuclide or a non-natural
	// isotopic ratio.
	Isotope []*SubstanceSpecification_Isotope `json:"isotope"`
	// The molecular weight or weight range (for proteins, polymers or nucleic acids).
	MolecularWeight *SubstanceSpecification_MolecularWeight `json:"molecularWeight"`
	// Supporting literature.
	Source []*Reference `json:"source"`
}

// TerminologyCapabilities_Translation is A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a
// FHIR Terminology Server that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type TerminologyCapabilities_Translation struct {
	// Whether the client must identify the map.
	NeedsMap bool `json:"needsMap"`
	// Extensions for needsMap
	NeedsMap_ext *Element `json:"_needsMap"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// GraphDefinition_Target is A formal computable definition of a graph of resources - that is, a coherent set of
// resources that form a graph by following references. The Graph Definition resource
// defines a set and makes rules about the set.
type GraphDefinition_Target struct {
	// Compartment Consistency Rules.
	Compartment []*GraphDefinition_Compartment `json:"compartment"`
	// Additional links from target resource.
	Link []*GraphDefinition_Link `json:"link"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Type of resource this link refers to.
	Type string `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// A set of parameters to look up.
	Params string `json:"params"`
	// Profile for the target resource.
	Profile string `json:"profile"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for params
	Params_ext *Element `json:"_params"`
}

// MedicinalProductPharmaceutical_RouteOfAdministration is A pharmaceutical product described in terms of its composition and dose form.
type MedicinalProductPharmaceutical_RouteOfAdministration struct {
	// The maximum dose per treatment period that can be administered as per the protocol
	// referenced in the clinical trial authorisation.
	MaxDosePerTreatmentPeriod *Ratio `json:"maxDosePerTreatmentPeriod"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Coded expression for the route.
	Code *CodeableConcept `json:"code,omitempty"`
	// The maximum dose per day (maximum dose quantity to be administered in any one 24-h
	// period) that can be administered as per the protocol referenced in the clinical
	// trial authorisation.
	MaxDosePerDay *Quantity `json:"maxDosePerDay"`
	// A species for which this route applies.
	TargetSpecies []*MedicinalProductPharmaceutical_TargetSpecies `json:"targetSpecies"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The first dose (dose quantity) administered in humans can be specified, for a
	// product under investigation, using a numerical value and its unit of measurement.
	FirstDose *Quantity `json:"firstDose"`
	// The maximum single dose that can be administered as per the protocol of a clinical
	// trial can be specified using a numerical value and its unit of measurement.
	MaxSingleDose *Quantity `json:"maxSingleDose"`
	// The maximum treatment period during which an Investigational Medicinal Product can
	// be administered as per the protocol referenced in the clinical trial authorisation.
	MaxTreatmentPeriod *Duration `json:"maxTreatmentPeriod"`
}

// Observation_ReferenceRange is Measurements and simple assertions made about a patient, device or other subject.
type Observation_ReferenceRange struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The value of the low bound of the reference range.  The low bound of the reference
	// range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If
	// the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is
	// <=2.3).
	Low *Quantity `json:"low"`
	// The value of the high bound of the reference range.  The high bound of the reference
	// range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If
	// the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is
	// >= 2.3).
	High *Quantity `json:"high"`
	// Codes to indicate the what part of the targeted reference population it applies to.
	// For example, the normal or therapeutic range.
	Type *CodeableConcept `json:"type"`
	// Text based reference range in an observation which may be used when a quantitative
	// range is not appropriate for an observation.  An example would be a reference value
	// of "Negative" or a list or table of "normals".
	Text string `json:"text"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Codes to indicate the target population this reference range applies to.  For
	// example, a reference range may be based on the normal population or a particular sex
	// or race.  Multiple `appliesTo`  are interpreted as an "AND" of the target
	// populations.  For example, to represent a target population of African American
	// females, both a code of female and a code for African American would be used.
	AppliesTo []*CodeableConcept `json:"appliesTo"`
	// The age at which this reference range is applicable. This is a neonatal age (e.g.
	// number of weeks at term) if the meaning says so.
	Age *Range `json:"age"`
}

// RequestGroup_Condition is A group of related requests that can be used to capture intended activities that
// have inter-dependencies such as "give this medication after that one".
type RequestGroup_Condition struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The kind of condition.
	Kind string `json:"kind"`
	// Extensions for kind
	Kind_ext *Element `json:"_kind"`
	// An expression that returns true or false, indicating whether or not the condition is
	// satisfied.
	Expression *Expression `json:"expression"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// ValueSet_Concept is A ValueSet resource instance specifies a set of codes drawn from one or more code
// systems, intended for use in a particular context. Value sets link between
// [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
type ValueSet_Concept struct {
	// The text to display to the user for this concept in the context of this valueset. If
	// no display is provided, then applications using the value set use the display
	// specified for the code by the system.
	Display string `json:"display"`
	// Extensions for display
	Display_ext *Element `json:"_display"`
	// Additional representations for this concept when used in this value set - other
	// languages, aliases, specialized purposes, used for particular purposes, etc.
	Designation []*ValueSet_Designation `json:"designation"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Specifies a code for the concept to be included or excluded.
	Code string `json:"code"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
}

// ValueSet_Expansion is A ValueSet resource instance specifies a set of codes drawn from one or more code
// systems, intended for use in a particular context. Value sets link between
// [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
type ValueSet_Expansion struct {
	// If paging is being used, the offset at which this resource starts.  I.e. this
	// resource is a partial view into the expansion. If paging is not being used, this
	// element SHALL NOT be present.
	Offset int64 `json:"offset"`
	// Extensions for offset
	Offset_ext *Element `json:"_offset"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for identifier
	Identifier_ext *Element `json:"_identifier"`
	// The time at which the expansion was produced by the expanding system.
	Timestamp string `json:"timestamp"`
	// Extensions for timestamp
	Timestamp_ext *Element `json:"_timestamp"`
	// The total number of concepts in the expansion. If the number of concept nodes in
	// this resource is less than the stated number, then the server can return more using
	// the offset parameter.
	Total int64 `json:"total"`
	// Extensions for total
	Total_ext *Element `json:"_total"`
	// A parameter that controlled the expansion process. These parameters may be used by
	// users of expanded value sets to check whether the expansion is suitable for a
	// particular purpose, or to pick the correct expansion.
	Parameter []*ValueSet_Parameter `json:"parameter"`
	// The codes that are contained in the value set expansion.
	Contains []*ValueSet_Contains `json:"contains"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An identifier that uniquely identifies this expansion of the valueset, based on a
	// unique combination of the provided parameters, the system default parameters, and
	// the underlying system code system versions etc. Systems may re-use the same
	// identifier as long as those factors remain the same, and the expansion is the same,
	// but are not required to do so. This is a business identifier.
	Identifier string `json:"identifier"`
}

// Dosage is Indicates how the medication is/was taken or should be taken by the patient.
type Dosage struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates the order in which the dosage instructions should be applied or
	// interpreted.
	Sequence int64 `json:"sequence"`
	// Extensions for asNeededBoolean
	AsNeededBoolean_ext *Element `json:"_asNeededBoolean"`
	// Indicates whether the Medication is only taken when needed within a specific dosing
	// schedule (Boolean option), or it indicates the precondition for taking the
	// Medication (CodeableConcept).
	AsNeededCodeableConcept *CodeableConcept `json:"asNeededCodeableConcept"`
	// Upper limit on medication per administration.
	MaxDosePerAdministration *Quantity `json:"maxDosePerAdministration"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
	// Supplemental instructions to the patient on how to take the medication  (e.g. "with
	// meals" or"take half to one hour before food") or warnings for the patient about the
	// medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct
	// sunlight or sunlamps").
	AdditionalInstruction []*CodeableConcept `json:"additionalInstruction"`
	// Instructions in terms that are understood by the patient or consumer.
	PatientInstruction string `json:"patientInstruction"`
	// Body site to administer to.
	Site *CodeableConcept `json:"site"`
	// How drug should enter body.
	Route *CodeableConcept `json:"route"`
	// The amount of medication administered.
	DoseAndRate []*Dosage_DoseAndRate `json:"doseAndRate"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for patientInstruction
	PatientInstruction_ext *Element `json:"_patientInstruction"`
	// Indicates whether the Medication is only taken when needed within a specific dosing
	// schedule (Boolean option), or it indicates the precondition for taking the
	// Medication (CodeableConcept).
	// pattern ^true|false$
	AsNeededBoolean bool `json:"asNeededBoolean"`
	// Upper limit on medication per unit of time.
	MaxDosePerPeriod *Ratio `json:"maxDosePerPeriod"`
	// Upper limit on medication per lifetime of the patient.
	MaxDosePerLifetime *Quantity `json:"maxDosePerLifetime"`
	// Free text dosage instructions e.g. SIG.
	Text string `json:"text"`
	// When medication should be administered.
	Timing *Timing `json:"timing"`
	// Technique for administering medication.
	Method *CodeableConcept `json:"method"`
}

// Location_HoursOfOperation is Details and position information for a physical place where services are provided
// and resources and participants may be stored, found, contained, or accommodated.
type Location_HoursOfOperation struct {
	// Extensions for daysOfWeek
	DaysOfWeek_ext []*Element `json:"_daysOfWeek"`
	// The Location is open all day.
	AllDay bool `json:"allDay"`
	// Extensions for allDay
	AllDay_ext *Element `json:"_allDay"`
	// Time that the Location opens.
	OpeningTime string `json:"openingTime"`
	// Time that the Location closes.
	ClosingTime string `json:"closingTime"`
	// Extensions for closingTime
	ClosingTime_ext *Element `json:"_closingTime"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Indicates which days of the week are available between the start and end Times.
	DaysOfWeek []string `json:"daysOfWeek"`
	// Extensions for openingTime
	OpeningTime_ext *Element `json:"_openingTime"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// CapabilityStatement_SupportedMessage is A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server
// for a particular version of FHIR that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type CapabilityStatement_SupportedMessage struct {
	// The mode of this event declaration - whether application is sender or receiver.
	Mode CapabilityStatement_SupportedMessageMode `json:"mode"`
	// Extensions for mode
	Mode_ext *Element `json:"_mode"`
	// Points to a message definition that identifies the messaging event, message
	// structure, allowed responses, etc.
	Definition string `json:"definition,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

type CapabilityStatement_SupportedMessageMode string

const (
	CapabilityStatement_SupportedMessageModeSender   CapabilityStatement_SupportedMessageMode = "sender"
	CapabilityStatement_SupportedMessageModeReceiver CapabilityStatement_SupportedMessageMode = "receiver"
)

// List_Entry is A list is a curated collection of resources.
type List_Entry struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The flag allows the system constructing the list to indicate the role and
	// significance of the item in the list.
	Flag *CodeableConcept `json:"flag"`
	// True if this item is marked as deleted in the list.
	Deleted bool `json:"deleted"`
	// Extensions for deleted
	Deleted_ext *Element `json:"_deleted"`
	// When this item was added to the list.
	Date string `json:"date"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A reference to the actual resource from which data was derived.
	Item *Reference `json:"item,omitempty"`
}

// Measure_SupplementalData is The Measure resource provides the definition of a quality measure.
type Measure_SupplementalData struct {
	// The human readable description of this supplemental data.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// The criteria for the supplemental data. This is typically the name of a valid
	// expression defined within a referenced library, but it may also be a path to a
	// specific data element. The criteria defines the data to be returned for this element.
	Criteria *Expression `json:"criteria,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates a meaning for the supplemental data. This can be as simple as a unique
	// identifier, or it can establish meaning in a broader context by drawing from a
	// terminology, allowing supplemental data to be correlated across measures.
	Code *CodeableConcept `json:"code"`
	// An indicator of the intended usage for the supplemental data element. Supplemental
	// data indicates the data is additional information requested to augment the measure
	// information. Risk adjustment factor indicates the data is additional information
	// used to calculate risk adjustment factors when applying a risk model to the measure
	// calculation.
	Usage []*CodeableConcept `json:"usage"`
}

// Specimen_Container is A sample to be used for analysis.
type Specimen_Container struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Id for container. There may be multiple; a manufacturer's bar code, lab assigned
	// identifier, etc. The container ID may differ from the specimen id in some
	// circumstances.
	Identifier []*Identifier `json:"identifier"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// The type of container associated with the specimen (e.g. slide, aliquot, etc.).
	Type *CodeableConcept `json:"type"`
	// The quantity of specimen in the container; may be volume, dimensions, or other
	// appropriate measurements, depending on the specimen type.
	SpecimenQuantity *Quantity `json:"specimenQuantity"`
	// Introduced substance to preserve, maintain or enhance the specimen. Examples:
	// Formalin, Citrate, EDTA.
	AdditiveCodeableConcept *CodeableConcept `json:"additiveCodeableConcept"`
	// Introduced substance to preserve, maintain or enhance the specimen. Examples:
	// Formalin, Citrate, EDTA.
	AdditiveReference *Reference `json:"additiveReference"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Textual description of the container.
	Description string `json:"description"`
	// The capacity (volume or other measure) the container may contain.
	Capacity *Quantity `json:"capacity"`
}

// Subscription_Channel is The subscription resource is used to define a push-based subscription from a server
// to another system. Once a subscription is registered with the server, the server
// checks every resource that is created or updated, and if the resource matches the
// given criteria, it sends a message on the defined "channel" so that another system
// can take an appropriate action.
type Subscription_Channel struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The url that describes the actual end-point to send messages to.
	Endpoint string `json:"endpoint"`
	// Extensions for payload
	Payload_ext *Element `json:"_payload"`
	// Extensions for header
	Header_ext []*Element `json:"_header"`
	// The mime type to send the payload in - either application/fhir+xml, or
	// application/fhir+json. If the payload is not present, then there is no payload in
	// the notification, just a notification. The mime type "text/plain" may also be used
	// for Email and SMS subscriptions.
	Payload string `json:"payload"`
	// Additional headers / information to send as part of the notification.
	Header []string `json:"header"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of channel to send notifications on.
	Type Subscription_ChannelType `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Extensions for endpoint
	Endpoint_ext *Element `json:"_endpoint"`
}

type Subscription_ChannelType string

const (
	Subscription_ChannelTypeRestHook  Subscription_ChannelType = "rest-hook"
	Subscription_ChannelTypeWebsocket Subscription_ChannelType = "websocket"
	Subscription_ChannelTypeEmail     Subscription_ChannelType = "email"
	Subscription_ChannelTypeSms       Subscription_ChannelType = "sms"
	Subscription_ChannelTypeMessage   Subscription_ChannelType = "message"
)

// ExampleScenario_Process is Example of workflow instance.
type ExampleScenario_Process struct {
	// A longer description of the group of operations.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Description of final status after the process ends.
	PostConditions string `json:"postConditions"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The diagram title of the group of operations.
	Title string `json:"title"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// Description of initial status before the process starts.
	PreConditions string `json:"preConditions"`
	// Extensions for preConditions
	PreConditions_ext *Element `json:"_preConditions"`
	// Extensions for postConditions
	PostConditions_ext *Element `json:"_postConditions"`
	// Each step of the process.
	Step []*ExampleScenario_Step `json:"step"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// InsurancePlan_Benefit1 is Details of a Health Insurance product/plan provided by an organization.
type InsurancePlan_Benefit1 struct {
	// List of the costs associated with a specific benefit.
	Cost []*InsurancePlan_Cost `json:"cost"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Type of specific benefit (preventative; primary care office visit; speciality office
	// visit; hospitalization; emergency room; urgent care).
	Type *CodeableConcept `json:"type,omitempty"`
}

// Patient_Contact is Demographics and other administrative information about an individual or animal
// receiving care or other health-related services.
type Patient_Contact struct {
	// The nature of the relationship between the patient and the contact person.
	Relationship []*CodeableConcept `json:"relationship"`
	// A name associated with the contact person.
	Name *HumanName `json:"name"`
	// Administrative Gender - the gender that the contact person is considered to have for
	// administration and record keeping purposes.
	Gender Patient_ContactGender `json:"gender"`
	// Extensions for gender
	Gender_ext *Element `json:"_gender"`
	// The period during which this contact person or organization is valid to be contacted
	// relating to this patient.
	Period *Period `json:"period"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A contact detail for the person, e.g. a telephone number or an email address.
	Telecom []*ContactPoint `json:"telecom"`
	// Address for the contact person.
	Address *Address `json:"address"`
	// Organization on behalf of which the contact is acting or for which the contact is
	// working.
	Organization *Reference `json:"organization"`
}

type Patient_ContactGender string

const (
	Patient_ContactGenderMale    Patient_ContactGender = "male"
	Patient_ContactGenderFemale  Patient_ContactGender = "female"
	Patient_ContactGenderOther   Patient_ContactGender = "other"
	Patient_ContactGenderUnknown Patient_ContactGender = "unknown"
)

// Condition_Stage is A clinical condition, problem, diagnosis, or other event, situation, issue, or
// clinical concept that has risen to a level of concern.
type Condition_Stage struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A simple summary of the stage such as "Stage 3". The determination of the stage is
	// disease-specific.
	Summary *CodeableConcept `json:"summary"`
	// Reference to a formal record of the evidence on which the staging assessment is
	// based.
	Assessment []*Reference `json:"assessment"`
	// The kind of staging, such as pathological or clinical staging.
	Type *CodeableConcept `json:"type"`
}

// OperationDefinition_Parameter is A formal computable definition of an operation (on the RESTful interface) or a named
// query (using the search interaction).
type OperationDefinition_Parameter struct {
	// Whether this is an input or an output parameter.
	Use OperationDefinition_ParameterUse `json:"use"`
	// Extensions for searchType
	SearchType_ext *Element `json:"_searchType"`
	// Used when the type is "Reference" or "canonical", and identifies a profile structure
	// or implementation Guide that applies to the target of the reference this parameter
	// refers to. If any profiles are specified, then the content must conform to at least
	// one of them. The URL can be a local reference - to a contained StructureDefinition,
	// or a reference to another StructureDefinition or Implementation Guide by a canonical
	// URL. When an implementation guide is specified, the target resource SHALL conform to
	// at least one profile defined in the implementation guide.
	TargetProfile []string `json:"targetProfile"`
	// How the parameter is understood as a search parameter. This is only used if the
	// parameter type is 'string'.
	SearchType OperationDefinition_ParameterSearchType `json:"searchType"`
	// The parts of a nested Parameter.
	Part []*OperationDefinition_Parameter `json:"part"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The minimum number of times this parameter SHALL appear in the request or response.
	Min int64 `json:"min"`
	// Extensions for max
	Max_ext *Element `json:"_max"`
	// Describes the meaning or use of this parameter.
	Documentation string `json:"documentation"`
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
	// Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
	Binding *OperationDefinition_Binding `json:"binding"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for use
	Use_ext *Element `json:"_use"`
	// Extensions for min
	Min_ext *Element `json:"_min"`
	// The maximum number of times this element is permitted to appear in the request or
	// response.
	Max string `json:"max"`
	// The type for this parameter.
	Type string `json:"type"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The name of used to identify the parameter.
	Name string `json:"name"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Identifies other resource parameters within the operation invocation that are
	// expected to resolve to this resource.
	ReferencedFrom []*OperationDefinition_ReferencedFrom `json:"referencedFrom"`
}

type OperationDefinition_ParameterUse string
type OperationDefinition_ParameterSearchType string

const (
	OperationDefinition_ParameterUseIn               OperationDefinition_ParameterUse        = "in"
	OperationDefinition_ParameterUseOut              OperationDefinition_ParameterUse        = "out"
	OperationDefinition_ParameterSearchTypeNumber    OperationDefinition_ParameterSearchType = "number"
	OperationDefinition_ParameterSearchTypeDate      OperationDefinition_ParameterSearchType = "date"
	OperationDefinition_ParameterSearchTypeString    OperationDefinition_ParameterSearchType = "string"
	OperationDefinition_ParameterSearchTypeToken     OperationDefinition_ParameterSearchType = "token"
	OperationDefinition_ParameterSearchTypeReference OperationDefinition_ParameterSearchType = "reference"
	OperationDefinition_ParameterSearchTypeComposite OperationDefinition_ParameterSearchType = "composite"
	OperationDefinition_ParameterSearchTypeQuantity  OperationDefinition_ParameterSearchType = "quantity"
	OperationDefinition_ParameterSearchTypeUri       OperationDefinition_ParameterSearchType = "uri"
	OperationDefinition_ParameterSearchTypeSpecial   OperationDefinition_ParameterSearchType = "special"
)

// ParameterDefinition is The parameters to the module. This collection specifies both the input and output
// parameters. Input parameters are provided by the caller as part of the $evaluate
// operation. Output parameters are included in the GuidanceResponse.
type ParameterDefinition struct {
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
	// The type of the parameter.
	Type string `json:"type"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for use
	Use_ext *Element `json:"_use"`
	// Extensions for min
	Min_ext *Element `json:"_min"`
	// Extensions for max
	Max_ext *Element `json:"_max"`
	// A brief discussion of what the parameter is for and how it is used by the module.
	Documentation string `json:"documentation"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Whether the parameter is input or output for the module.
	Use string `json:"use"`
	// The maximum number of times this element is permitted to appear in the request or
	// response.
	Max string `json:"max"`
	// If specified, this indicates a profile that the input data must conform to, or that
	// the output data will conform to.
	Profile string `json:"profile"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// The name of the parameter used to allow access to the value of the parameter in
	// evaluation contexts.
	Name string `json:"name"`
	// The minimum number of times this parameter SHALL appear in the request or response.
	Min int64 `json:"min"`
}

// TerminologyCapabilities_CodeSystem is A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a
// FHIR Terminology Server that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type TerminologyCapabilities_CodeSystem struct {
	// Extensions for subsumption
	Subsumption_ext *Element `json:"_subsumption"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// URI for the Code System.
	Uri string `json:"uri"`
	// For the code system, a list of versions that are supported by the server.
	Version []*TerminologyCapabilities_Version `json:"version"`
	// True if subsumption is supported for this version of the code system.
	Subsumption bool `json:"subsumption"`
}

// ValueSet_Compose is A ValueSet resource instance specifies a set of codes drawn from one or more code
// systems, intended for use in a particular context. Value sets link between
// [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
type ValueSet_Compose struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Exclude one or more codes from the value set based on code system filters and/or
	// other value sets.
	Exclude []*ValueSet_Include `json:"exclude"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The Locked Date is  the effective date that is used to determine the version of all
	// referenced Code Systems and Value Set Definitions included in the compose that are
	// not already tied to a specific version.
	LockedDate string `json:"lockedDate"`
	// Extensions for lockedDate
	LockedDate_ext *Element `json:"_lockedDate"`
	// Whether inactive codes - codes that are not approved for current use - are in the
	// value set. If inactive = true, inactive codes are to be included in the expansion,
	// if inactive = false, the inactive codes will not be included in the expansion. If
	// absent, the behavior is determined by the implementation, or by the applicable
	// $expand parameters (but generally, inactive codes would be expected to be included).
	Inactive bool `json:"inactive"`
	// Extensions for inactive
	Inactive_ext *Element `json:"_inactive"`
	// Include one or more codes from a code system or other value set(s).
	Include []*ValueSet_Include `json:"include,omitempty"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// EffectEvidenceSynthesis_SampleSize is The EffectEvidenceSynthesis resource describes the difference in an outcome between
// exposures states in a population where the effect estimate is derived from a
// combination of research studies.
type EffectEvidenceSynthesis_SampleSize struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Human-readable summary of sample size.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Number of studies included in this evidence synthesis.
	NumberOfStudies int64 `json:"numberOfStudies"`
	// Extensions for numberOfStudies
	NumberOfStudies_ext *Element `json:"_numberOfStudies"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for numberOfParticipants
	NumberOfParticipants_ext *Element `json:"_numberOfParticipants"`
	// Number of participants included in this evidence synthesis.
	NumberOfParticipants int64 `json:"numberOfParticipants"`
}

// EpisodeOfCare_Diagnosis is An association between a patient and an organization / healthcare provider(s) during
// which time encounters may occur. The managing organization assumes a level of
// responsibility for the patient during this time.
type EpisodeOfCare_Diagnosis struct {
	// Extensions for rank
	Rank_ext *Element `json:"_rank"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A list of conditions/problems/diagnoses that this episode of care is intended to be
	// providing care for.
	Condition *Reference `json:"condition,omitempty"`
	// Role that this diagnosis has within the episode of care (e.g. admission, billing,
	// discharge …).
	Role *CodeableConcept `json:"role"`
	// Ranking of the diagnosis (for each role type).
	Rank uint64 `json:"rank"`
}

// ImplementationGuide_Template is A set of rules of how a particular interoperability or standards problem is solved -
// typically through the use of FHIR resources. This resource is used to gather all the
// parts of an implementation guide into a logical whole and to publish a computable
// definition of all the parts.
type ImplementationGuide_Template struct {
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Type of template specified.
	Code string `json:"code"`
	// The scope in which the template applies.
	Scope string `json:"scope"`
	// Extensions for scope
	Scope_ext *Element `json:"_scope"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The source location for the template.
	Source string `json:"source"`
	// Extensions for source
	Source_ext *Element `json:"_source"`
}

// code is A string which has at least one character and no leading or trailing whitespace and
// where there is no whitespace other than single spaces in the contents
type code string

var codePattern = regexp.MustCompile(`^[^\s]+(\s[^\s]+)*$`)

func (t *code) Validate() bool {
	return codePattern.MatchString(string(*t))
}

// SubstanceAmount_ReferenceRange is Chemical substances are a single substance type whose primary defining element is
// the molecular structure. Chemical substances shall be defined on the basis of their
// complete covalent molecular structure; the presence of a salt (counter-ion) and/or
// solvates (water, alcohols) is also captured. Purity, grade, physical form or
// particle size are not taken into account in the definition of a chemical substance
// or in the assignment of a Substance ID.
type SubstanceAmount_ReferenceRange struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Lower limit possible or expected.
	LowLimit *Quantity `json:"lowLimit"`
	// Upper limit possible or expected.
	HighLimit *Quantity `json:"highLimit"`
}

// Consent_Provision is A record of a healthcare consumer’s  choices, which permits or denies identified
// recipient(s) or recipient role(s) to perform one or more actions within a given
// policy context, for specific purposes and periods of time.
type Consent_Provision struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Action  to take - permit or deny - when the rule conditions are met.  Not permitted
	// in root rule, required in all nested rules.
	Type Consent_ProvisionType `json:"type"`
	// The class of information covered by this rule. The type can be a FHIR resource type,
	// a profile on a type, or a CDA document, or some other type that indicates what sort
	// of information the consent relates to.
	Class []*Coding `json:"class"`
	// Actions controlled by this Rule.
	Action []*CodeableConcept `json:"action"`
	// The context of the activities a user is taking - why the user is accessing the data
	// - that are controlled by this rule.
	Purpose []*Coding `json:"purpose"`
	// The resources controlled by this rule if specific resources are referenced.
	Data []*Consent_Data `json:"data"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The timeframe in this rule is valid.
	Period *Period `json:"period"`
	// A security label, comprised of 0..* security label fields (Privacy tags), which
	// define which resources are controlled by this exception.
	SecurityLabel []*Coding `json:"securityLabel"`
	// If this code is found in an instance, then the rule applies.
	Code []*CodeableConcept `json:"code"`
	// Rules which provide exceptions to the base rule or subrules.
	Provision []*Consent_Provision `json:"provision"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Who or what is controlled by this rule. Use group to identify a set of actors by
	// some property they share (e.g. 'admitting officers').
	Actor []*Consent_Actor `json:"actor"`
	// Clinical or Operational Relevant period of time that bounds the data controlled by
	// this rule.
	DataPeriod *Period `json:"dataPeriod"`
}

type Consent_ProvisionType string

const (
	Consent_ProvisionTypeDeny   Consent_ProvisionType = "deny"
	Consent_ProvisionTypePermit Consent_ProvisionType = "permit"
)

// Contract_Action is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract_Action struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// When action happens.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	OccurrenceDateTime string `json:"occurrenceDateTime"`
	// Describes why the action is to be performed or not performed in textual form.
	Reason []string `json:"reason"`
	// Who or what initiated the action and has responsibility for its activation.
	Requester []*Reference `json:"requester"`
	// Extensions for requesterLinkId
	RequesterLinkId_ext []*Element `json:"_requesterLinkId"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// True if the term prohibits the  action.
	DoNotPerform bool `json:"doNotPerform"`
	// Extensions for linkId
	LinkId_ext []*Element `json:"_linkId"`
	// Encounter or Episode with primary association to specified term activity.
	Context *Reference `json:"context"`
	// Id [identifier??] of the clause or question text related to the requester of this
	// action in the referenced form or QuestionnaireResponse.
	ContextLinkId []string `json:"contextLinkId"`
	// When action happens.
	OccurrencePeriod *Period `json:"occurrencePeriod"`
	// The type of individual that is desired or required to perform or not perform the
	// action.
	PerformerType []*CodeableConcept `json:"performerType"`
	// Extensions for performerLinkId
	PerformerLinkId_ext []*Element `json:"_performerLinkId"`
	// Comments made about the term action made by the requester, performer, subject or
	// other participants.
	Note []*Annotation `json:"note"`
	// Extensions for securityLabelNumber
	SecurityLabelNumber_ext []*Element `json:"_securityLabelNumber"`
	// Extensions for contextLinkId
	ContextLinkId_ext []*Element `json:"_contextLinkId"`
	// When action happens.
	OccurrenceTiming *Timing `json:"occurrenceTiming"`
	// Indicates who or what is being asked to perform (or not perform) the ction.
	Performer *Reference `json:"performer"`
	// Rationale for the action to be performed or not performed. Describes why the action
	// is permitted or prohibited.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// Indicates another resource whose existence justifies permitting or not permitting
	// this action.
	ReasonReference []*Reference `json:"reasonReference"`
	// Id [identifier??] of the clause or question text related to the reason type or
	// reference of this  action in the referenced form or QuestionnaireResponse.
	ReasonLinkId []string `json:"reasonLinkId"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for doNotPerform
	DoNotPerform_ext *Element `json:"_doNotPerform"`
	// Activity or service obligation to be done or not done, performed or not performed,
	// effectuated or not by this Contract term.
	Type *CodeableConcept `json:"type,omitempty"`
	// Extensions for occurrenceDateTime
	OccurrenceDateTime_ext *Element `json:"_occurrenceDateTime"`
	// The type of role or competency of an individual desired or required to perform or
	// not perform the action.
	PerformerRole *CodeableConcept `json:"performerRole"`
	// Entity of the action.
	Subject []*Contract_Subject `json:"subject"`
	// Current state of the term action.
	Status *CodeableConcept `json:"status,omitempty"`
	// Security labels that protects the action.
	SecurityLabelNumber []uint64 `json:"securityLabelNumber"`
	// Reason or purpose for the action stipulated by this Contract Provision.
	Intent *CodeableConcept `json:"intent,omitempty"`
	// Extensions for reasonLinkId
	ReasonLinkId_ext []*Element `json:"_reasonLinkId"`
	// Id [identifier??] of the clause or question text related to this action in the
	// referenced form or QuestionnaireResponse.
	LinkId []string `json:"linkId"`
	// Id [identifier??] of the clause or question text related to the requester of this
	// action in the referenced form or QuestionnaireResponse.
	RequesterLinkId []string `json:"requesterLinkId"`
	// Id [identifier??] of the clause or question text related to the reason type or
	// reference of this  action in the referenced form or QuestionnaireResponse.
	PerformerLinkId []string `json:"performerLinkId"`
	// Extensions for reason
	Reason_ext []*Element `json:"_reason"`
}

// Device_Property is A type of a manufactured item that is used in the provision of healthcare without
// being substantially changed through that activity. The device may be a medical or
// non-medical device.
type Device_Property struct {
	// Property value as a code, e.g., NTP4 (synced to NTP).
	ValueCode []*CodeableConcept `json:"valueCode"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
	Type *CodeableConcept `json:"type,omitempty"`
	// Property value as a quantity.
	ValueQuantity []*Quantity `json:"valueQuantity"`
}

// MedicinalProductPharmaceutical_TargetSpecies is A pharmaceutical product described in terms of its composition and dose form.
type MedicinalProductPharmaceutical_TargetSpecies struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Coded expression for the species.
	Code *CodeableConcept `json:"code,omitempty"`
	// A species specific time during which consumption of animal product is not
	// appropriate.
	WithdrawalPeriod []*MedicinalProductPharmaceutical_WithdrawalPeriod `json:"withdrawalPeriod"`
}

// Provenance_Entity is Provenance of a resource is a record that describes entities and processes involved
// in producing and delivering or otherwise influencing that resource. Provenance
// provides a critical foundation for assessing authenticity, enabling trust, and
// allowing reproducibility. Provenance assertions are a form of contextual metadata
// and can themselves become important records with their own provenance. Provenance
// statement indicates clinical significance in terms of confidence in authenticity,
// reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document
// Completion - has the artifact been legally authenticated), all of which may impact
// security, privacy, and trust policies.
type Provenance_Entity struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// How the entity was used during the activity.
	Role Provenance_EntityRole `json:"role"`
	// Extensions for role
	Role_ext *Element `json:"_role"`
	// Identity of the  Entity used. May be a logical or physical uri and maybe absolute or
	// relative.
	What *Reference `json:"what,omitempty"`
	// The entity is attributed to an agent to express the agent's responsibility for that
	// entity, possibly along with other agents. This description can be understood as
	// shorthand for saying that the agent was responsible for the activity which generated
	// the entity.
	Agent []*Provenance_Agent `json:"agent"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

type Provenance_EntityRole string

const (
	Provenance_EntityRoleDerivation Provenance_EntityRole = "derivation"
	Provenance_EntityRoleRevision   Provenance_EntityRole = "revision"
	Provenance_EntityRoleQuotation  Provenance_EntityRole = "quotation"
	Provenance_EntityRoleSource     Provenance_EntityRole = "source"
	Provenance_EntityRoleRemoval    Provenance_EntityRole = "removal"
)

// ClaimResponse_ProcessNote is This resource provides the adjudication details from the processing of a Claim
// resource.
type ClaimResponse_ProcessNote struct {
	// Extensions for number
	Number_ext *Element `json:"_number"`
	// The explanation or description associated with the processing.
	Text string `json:"text"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A number to uniquely identify a note entry.
	Number uint64 `json:"number"`
	// The business purpose of the note text.
	Type ClaimResponse_ProcessNoteType `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// A code to define the language used in the text of the note.
	Language *CodeableConcept `json:"language"`
}

type ClaimResponse_ProcessNoteType string

const (
	ClaimResponse_ProcessNoteTypeDisplay   ClaimResponse_ProcessNoteType = "display"
	ClaimResponse_ProcessNoteTypePrint     ClaimResponse_ProcessNoteType = "print"
	ClaimResponse_ProcessNoteTypePrintoper ClaimResponse_ProcessNoteType = "printoper"
)

// Communication_Payload is An occurrence of information being transmitted; e.g. an alert that was sent to a
// responsible provider, a public health agency that was notified about a reportable
// condition.
type Communication_Payload struct {
	// Extensions for contentString
	ContentString_ext *Element `json:"_contentString"`
	// A communicated content (or for multi-part communications, one portion of the
	// communication).
	ContentAttachment *Attachment `json:"contentAttachment"`
	// A communicated content (or for multi-part communications, one portion of the
	// communication).
	ContentReference *Reference `json:"contentReference"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A communicated content (or for multi-part communications, one portion of the
	// communication).
	// pattern ^[ \r\n\t\S]+$
	ContentString string `json:"contentString"`
}

// ConceptMap_Group is A statement of relationships from one set of concepts to one or more other concepts
// - either concepts in code systems, or data element/data element concepts, or classes
// in class models.
type ConceptMap_Group struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for source
	Source_ext *Element `json:"_source"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The specific version of the code system, as determined by the code system authority.
	SourceVersion string `json:"sourceVersion"`
	// Extensions for sourceVersion
	SourceVersion_ext *Element `json:"_sourceVersion"`
	// An absolute URI that identifies the target system that the concepts will be mapped
	// to.
	Target string `json:"target"`
	// Extensions for target
	Target_ext *Element `json:"_target"`
	// The specific version of the code system, as determined by the code system authority.
	TargetVersion string `json:"targetVersion"`
	// Extensions for targetVersion
	TargetVersion_ext *Element `json:"_targetVersion"`
	// Mappings for an individual concept in the source to one or more concepts in the
	// target.
	Element []*ConceptMap_Element `json:"element,omitempty"`
	// An absolute URI that identifies the source system where the concepts to be mapped
	// are defined.
	Source string `json:"source"`
	// What to do when there is no mapping for the source concept. "Unmapped" does not
	// include codes that are unmatched, and the unmapped element is ignored in a code is
	// specified to have equivalence = unmatched.
	Unmapped *ConceptMap_Unmapped `json:"unmapped"`
}

// InsurancePlan_Coverage is Details of a Health Insurance product/plan provided by an organization.
type InsurancePlan_Coverage struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug;
	// Short Term; Long Term Care; Hospice; Home Health).
	Type *CodeableConcept `json:"type,omitempty"`
	// Reference to the network that providing the type of coverage.
	Network []*Reference `json:"network"`
	// Specific benefits under this type of coverage.
	Benefit []*InsurancePlan_Benefit `json:"benefit,omitempty"`
}

// PractitionerRole_NotAvailable is A specific set of Roles/Locations/specialties/services that a practitioner may
// perform at an organization for a period of time.
type PractitionerRole_NotAvailable struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The reason that can be presented to the user as to why this time is not available.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Service is not available (seasonally or for a public holiday) from this date.
	During *Period `json:"during"`
}

// Claim_Item is A provider issued list of professional services and products which have been
// provided, or are to be provided, to a patient which is sent to an insurer for
// reimbursement.
type Claim_Item struct {
	// A claim detail line. Either a simple (a product or service) or a 'group' of
	// sub-details which are simple items.
	Detail []*Claim_Detail `json:"detail"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Exceptions, special conditions and supporting information applicable for this
	// service or product.
	InformationSequence []uint64 `json:"informationSequence"`
	// Item typification or modifiers codes to convey additional context for the product or
	// service.
	Modifier []*CodeableConcept `json:"modifier"`
	// A real number that represents a multiplier used in determining the overall value of
	// services delivered and/or goods received. The concept of a Factor allows for a
	// discount or surcharge multiplier to be applied to a monetary amount.
	Factor float64 `json:"factor"`
	// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
	SubSite []*CodeableConcept `json:"subSite"`
	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *Money `json:"unitPrice"`
	// Unique Device Identifiers associated with this line item.
	Udi []*Reference `json:"udi"`
	// Physical service site on the patient (limb, tooth, etc.).
	BodySite *CodeableConcept `json:"bodySite"`
	// Extensions for careTeamSequence
	CareTeamSequence_ext []*Element `json:"_careTeamSequence"`
	// Extensions for procedureSequence
	ProcedureSequence_ext []*Element `json:"_procedureSequence"`
	// The type of revenue or cost center providing the product and/or service.
	Revenue *CodeableConcept `json:"revenue"`
	// When the value is a group code then this item collects a set of related claim
	// details, otherwise this contains the product, service, drug or other billing code
	// for the item.
	ProductOrService *CodeableConcept `json:"productOrService,omitempty"`
	// Where the product or service was provided.
	LocationReference *Reference `json:"locationReference"`
	// Code to identify the general type of benefits under which products and services are
	// provided.
	Category *CodeableConcept `json:"category"`
	// The date or dates when the service or product was supplied, performed or completed.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	ServicedDate string `json:"servicedDate"`
	// A number to uniquely identify item entries.
	Sequence uint64 `json:"sequence"`
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
	// The quantity times the unit price for an additional service or product or charge.
	Net *Money `json:"net"`
	// Where the product or service was provided.
	LocationCodeableConcept *CodeableConcept `json:"locationCodeableConcept"`
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// CareTeam members related to this service or product.
	CareTeamSequence []uint64 `json:"careTeamSequence"`
	// Procedures applicable for this service or product.
	ProcedureSequence []uint64 `json:"procedureSequence"`
	// Identifies the program under which this may be recovered.
	ProgramCode []*CodeableConcept `json:"programCode"`
	// Extensions for servicedDate
	ServicedDate_ext *Element `json:"_servicedDate"`
	// Where the product or service was provided.
	LocationAddress *Address `json:"locationAddress"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The date or dates when the service or product was supplied, performed or completed.
	ServicedPeriod *Period `json:"servicedPeriod"`
	// The Encounters during which this Claim was created or to which the creation of this
	// record is tightly associated.
	Encounter []*Reference `json:"encounter"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// Diagnosis applicable for this service or product.
	DiagnosisSequence []uint64 `json:"diagnosisSequence"`
	// Extensions for diagnosisSequence
	DiagnosisSequence_ext []*Element `json:"_diagnosisSequence"`
	// Extensions for informationSequence
	InformationSequence_ext []*Element `json:"_informationSequence"`
}

// ClaimResponse_AddItem is This resource provides the adjudication details from the processing of a Claim
// resource.
type ClaimResponse_AddItem struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Where the product or service was provided.
	LocationReference *Reference `json:"locationReference"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for subdetailSequence
	SubdetailSequence_ext []*Element `json:"_subdetailSequence"`
	// The date or dates when the service or product was supplied, performed or completed.
	ServicedPeriod *Period `json:"servicedPeriod"`
	// A real number that represents a multiplier used in determining the overall value of
	// services delivered and/or goods received. The concept of a Factor allows for a
	// discount or surcharge multiplier to be applied to a monetary amount.
	Factor float64 `json:"factor"`
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []uint64 `json:"noteNumber"`
	// The sequence number of the details within the claim item which this line is intended
	// to replace.
	DetailSequence []uint64 `json:"detailSequence"`
	// The sequence number of the sub-details within the details within the claim item
	// which this line is intended to replace.
	SubdetailSequence []uint64 `json:"subdetailSequence"`
	// The providers who are authorized for the services rendered to the patient.
	Provider []*Reference `json:"provider"`
	// When the value is a group code then this item collects a set of related claim
	// details, otherwise this contains the product, service, drug or other billing code
	// for the item.
	ProductOrService *CodeableConcept `json:"productOrService,omitempty"`
	// Where the product or service was provided.
	LocationAddress *Address `json:"locationAddress"`
	// The second-tier service adjudications for payor added services.
	Detail []*ClaimResponse_Detail1 `json:"detail"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Item typification or modifiers codes to convey additional context for the product or
	// service.
	Modifier []*CodeableConcept `json:"modifier"`
	// Identifies the program under which this may be recovered.
	ProgramCode []*CodeableConcept `json:"programCode"`
	// The date or dates when the service or product was supplied, performed or completed.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	ServicedDate string `json:"servicedDate"`
	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *Money `json:"unitPrice"`
	// The adjudication results.
	Adjudication []*ClaimResponse_Adjudication `json:"adjudication,omitempty"`
	// Claim items which this service line is intended to replace.
	ItemSequence []uint64 `json:"itemSequence"`
	// The quantity times the unit price for an additional service or product or charge.
	Net *Money `json:"net"`
	// Physical service site on the patient (limb, tooth, etc.).
	BodySite *CodeableConcept `json:"bodySite"`
	// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
	SubSite []*CodeableConcept `json:"subSite"`
	// Extensions for itemSequence
	ItemSequence_ext []*Element `json:"_itemSequence"`
	// Extensions for detailSequence
	DetailSequence_ext []*Element `json:"_detailSequence"`
	// Extensions for noteNumber
	NoteNumber_ext []*Element `json:"_noteNumber"`
	// Extensions for servicedDate
	ServicedDate_ext *Element `json:"_servicedDate"`
	// Where the product or service was provided.
	LocationCodeableConcept *CodeableConcept `json:"locationCodeableConcept"`
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity"`
}

// CoverageEligibilityResponse_Item is This resource provides eligibility and plan details from the processing of an
// CoverageEligibilityRequest resource.
type CoverageEligibilityResponse_Item struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Code to identify the general type of benefits under which products and services are
	// provided.
	Category *CodeableConcept `json:"category"`
	// Item typification or modifiers codes to convey additional context for the product or
	// service.
	Modifier []*CodeableConcept `json:"modifier"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Indicates if the benefits apply to an individual or to the family.
	Unit *CodeableConcept `json:"unit"`
	// The term or period of the values such as 'maximum lifetime benefit' or 'maximum
	// annual visits'.
	Term *CodeableConcept `json:"term"`
	// Benefits used to date.
	Benefit []*CoverageEligibilityResponse_Benefit `json:"benefit"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// This contains the product, service, drug or other billing code for the item.
	ProductOrService *CodeableConcept `json:"productOrService"`
	// The practitioner who is eligible for the provision of the product or service.
	Provider *Reference `json:"provider"`
	// A short name or tag for the benefit.
	Name string `json:"name"`
	// Extensions for authorizationRequired
	AuthorizationRequired_ext *Element `json:"_authorizationRequired"`
	// A web location for obtaining requirements or descriptive information regarding the
	// preauthorization.
	AuthorizationUrl string `json:"authorizationUrl"`
	// Extensions for authorizationUrl
	AuthorizationUrl_ext *Element `json:"_authorizationUrl"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for excluded
	Excluded_ext *Element `json:"_excluded"`
	// A richer description of the benefit or services covered.
	Description string `json:"description"`
	// Codes or comments regarding information or actions associated with the
	// preauthorization.
	AuthorizationSupporting []*CodeableConcept `json:"authorizationSupporting"`
	// True if the indicated class of service is excluded from the plan, missing or False
	// indicates the product or service is included in the coverage.
	Excluded bool `json:"excluded"`
	// Is a flag to indicate whether the benefits refer to in-network providers or
	// out-of-network providers.
	Network *CodeableConcept `json:"network"`
	// A boolean flag indicating whether a preauthorization is required prior to actual
	// service delivery.
	AuthorizationRequired bool `json:"authorizationRequired"`
}

// EffectEvidenceSynthesis_Certainty is The EffectEvidenceSynthesis resource describes the difference in an outcome between
// exposures states in a population where the effect estimate is derived from a
// combination of research studies.
type EffectEvidenceSynthesis_Certainty struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A rating of the certainty of the effect estimate.
	Rating []*CodeableConcept `json:"rating"`
	// A human-readable string to clarify or explain concepts about the resource.
	Note []*Annotation `json:"note"`
	// A description of a component of the overall certainty.
	CertaintySubcomponent []*EffectEvidenceSynthesis_CertaintySubcomponent `json:"certaintySubcomponent"`
}

// Composition_Event is A set of healthcare-related information that is assembled together into a single
// logical package that provides a single coherent statement of meaning, establishes
// its own context and that has clinical attestation with regard to who is making the
// statement. A Composition defines the structure and narrative content necessary for a
// document. However, a Composition alone does not constitute a document. Rather, the
// Composition must be the first entry in a Bundle where Bundle.type=document, and any
// other resources referenced from Composition must be included as subsequent entries
// in the Bundle (for example Patient, Practitioner, Encounter, etc.).
type Composition_Event struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// This list of codes represents the main clinical acts, such as a colonoscopy or an
	// appendectomy, being documented. In some cases, the event is inherent in the
	// typeCode, such as a "History and Physical Report" in which the procedure being
	// documented is necessarily a "History and Physical" act.
	Code []*CodeableConcept `json:"code"`
	// The period of time covered by the documentation. There is no assertion that the
	// documentation is a complete representation for this period, only that it documents
	// events during this time.
	Period *Period `json:"period"`
	// The description and/or reference of the event(s) being documented. For example, this
	// could be used to document such a colonoscopy or an appendectomy.
	Detail []*Reference `json:"detail"`
}

// ExplanationOfBenefit_Financial is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_Financial struct {
	// The quantity of the benefit which is permitted under the coverage.
	// pattern ^[ \r\n\t\S]+$
	AllowedString string `json:"allowedString"`
	// Extensions for allowedString
	AllowedString_ext *Element `json:"_allowedString"`
	// Extensions for usedUnsignedInt
	UsedUnsignedInt_ext *Element `json:"_usedUnsignedInt"`
	// The quantity of the benefit which have been consumed to date.
	UsedMoney *Money `json:"usedMoney"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Classification of benefit being provided.
	Type *CodeableConcept `json:"type,omitempty"`
	// The quantity of the benefit which is permitted under the coverage.
	// pattern ^[0]|([1-9][0-9]*)$
	AllowedUnsignedInt uint64 `json:"allowedUnsignedInt"`
	// Extensions for allowedUnsignedInt
	AllowedUnsignedInt_ext *Element `json:"_allowedUnsignedInt"`
	// The quantity of the benefit which is permitted under the coverage.
	AllowedMoney *Money `json:"allowedMoney"`
	// The quantity of the benefit which have been consumed to date.
	// pattern ^[0]|([1-9][0-9]*)$
	UsedUnsignedInt uint64 `json:"usedUnsignedInt"`
}

// MedicationAdministration_Dosage is Describes the event of a patient consuming or otherwise being administered a
// medication.  This may be as simple as swallowing a tablet or it may be a long
// running infusion.  Related resources tie this event to the authorizing prescription,
// and the specific encounter between patient and health care practitioner.
type MedicationAdministration_Dosage struct {
	// The amount of the medication given at one administration event.   Use this value
	// when the administration is essentially an instantaneous event such as a swallowing a
	// tablet or giving an injection.
	Dose *Quantity `json:"dose"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A coded specification of the anatomic site where the medication first entered the
	// body.  For example, "left arm".
	Site *CodeableConcept `json:"site"`
	// A coded value indicating the method by which the medication is intended to be or was
	// introduced into or on the body.  This attribute will most often NOT be populated.
	// It is most commonly used for injections.  For example, Slow Push, Deep IV.
	Method *CodeableConcept `json:"method"`
	// Identifies the speed with which the medication was or will be introduced into the
	// patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.
	// May also be expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other
	// examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
	RateRatio *Ratio `json:"rateRatio"`
	// Identifies the speed with which the medication was or will be introduced into the
	// patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.
	// May also be expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other
	// examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
	RateQuantity *Quantity `json:"rateQuantity"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Free text dosage can be used for cases where the dosage administered is too complex
	// to code. When coded dosage is present, the free text dosage may still be present for
	// display to humans.
	//
	// The dosage instructions should reflect the dosage of the medication that was
	// administered.
	Text string `json:"text"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
	// A code specifying the route or physiological path of administration of a therapeutic
	// agent into or onto the patient.  For example, topical, intravenous, etc.
	Route *CodeableConcept `json:"route"`
}

// ResearchElementDefinition_Characteristic is The ResearchElementDefinition resource describes a "PICO" element that knowledge
// (evidence, assertion, recommendation) is about.
type ResearchElementDefinition_Characteristic struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for definitionCanonical
	DefinitionCanonical_ext *Element `json:"_definitionCanonical"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// A narrative description of the time period the study covers.
	StudyEffectiveDescription string `json:"studyEffectiveDescription"`
	// Indicates what effective period the study covers.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	StudyEffectiveDateTime string `json:"studyEffectiveDateTime"`
	// Indicates what effective period the study covers.
	StudyEffectiveTiming *Timing `json:"studyEffectiveTiming"`
	// Indicates how elements are aggregated within the study effective period.
	StudyEffectiveGroupMeasure ResearchElementDefinition_CharacteristicStudyEffectiveGroupMeasure `json:"studyEffectiveGroupMeasure"`
	// Indicates duration from the participant's study entry.
	ParticipantEffectiveTimeFromStart *Duration `json:"participantEffectiveTimeFromStart"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Define members of the research element using Codes (such as condition, medication,
	// or observation), Expressions ( using an expression language such as FHIRPath or CQL)
	// or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionDataRequirement *DataRequirement `json:"definitionDataRequirement"`
	// When true, members with this characteristic are excluded from the element.
	Exclude bool `json:"exclude"`
	// Extensions for studyEffectiveGroupMeasure
	StudyEffectiveGroupMeasure_ext *Element `json:"_studyEffectiveGroupMeasure"`
	// Extensions for participantEffectiveDateTime
	ParticipantEffectiveDateTime_ext *Element `json:"_participantEffectiveDateTime"`
	// Specifies the UCUM unit for the outcome.
	UnitOfMeasure *CodeableConcept `json:"unitOfMeasure"`
	// Extensions for studyEffectiveDescription
	StudyEffectiveDescription_ext *Element `json:"_studyEffectiveDescription"`
	// A narrative description of the time period the study covers.
	ParticipantEffectiveDescription string `json:"participantEffectiveDescription"`
	// Extensions for participantEffectiveDescription
	ParticipantEffectiveDescription_ext *Element `json:"_participantEffectiveDescription"`
	// Use UsageContext to define the members of the population, such as Age Ranges,
	// Genders, Settings.
	UsageContext []*UsageContext `json:"usageContext"`
	// Indicates how elements are aggregated within the study effective period.
	ParticipantEffectiveGroupMeasure ResearchElementDefinition_CharacteristicParticipantEffectiveGroupMeasure `json:"participantEffectiveGroupMeasure"`
	// Define members of the research element using Codes (such as condition, medication,
	// or observation), Expressions ( using an expression language such as FHIRPath or CQL)
	// or DataRequirements (such as Diabetes diagnosis onset in the last year).
	// pattern ^\S*$
	DefinitionCanonical string `json:"definitionCanonical"`
	// Define members of the research element using Codes (such as condition, medication,
	// or observation), Expressions ( using an expression language such as FHIRPath or CQL)
	// or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionExpression *Expression `json:"definitionExpression"`
	// Indicates what effective period the study covers.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	ParticipantEffectiveDateTime string `json:"participantEffectiveDateTime"`
	// Indicates what effective period the study covers.
	ParticipantEffectiveDuration *Duration `json:"participantEffectiveDuration"`
	// Define members of the research element using Codes (such as condition, medication,
	// or observation), Expressions ( using an expression language such as FHIRPath or CQL)
	// or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionCodeableConcept *CodeableConcept `json:"definitionCodeableConcept"`
	// Extensions for studyEffectiveDateTime
	StudyEffectiveDateTime_ext *Element `json:"_studyEffectiveDateTime"`
	// Indicates what effective period the study covers.
	StudyEffectivePeriod *Period `json:"studyEffectivePeriod"`
	// Indicates what effective period the study covers.
	StudyEffectiveDuration *Duration `json:"studyEffectiveDuration"`
	// Indicates duration from the study initiation.
	StudyEffectiveTimeFromStart *Duration `json:"studyEffectiveTimeFromStart"`
	// Indicates what effective period the study covers.
	ParticipantEffectiveTiming *Timing `json:"participantEffectiveTiming"`
	// Extensions for exclude
	Exclude_ext *Element `json:"_exclude"`
	// Indicates what effective period the study covers.
	ParticipantEffectivePeriod *Period `json:"participantEffectivePeriod"`
	// Extensions for participantEffectiveGroupMeasure
	ParticipantEffectiveGroupMeasure_ext *Element `json:"_participantEffectiveGroupMeasure"`
}

type ResearchElementDefinition_CharacteristicStudyEffectiveGroupMeasure string
type ResearchElementDefinition_CharacteristicParticipantEffectiveGroupMeasure string

const (
	ResearchElementDefinition_CharacteristicStudyEffectiveGroupMeasureMean                 ResearchElementDefinition_CharacteristicStudyEffectiveGroupMeasure       = "mean"
	ResearchElementDefinition_CharacteristicStudyEffectiveGroupMeasureMedian               ResearchElementDefinition_CharacteristicStudyEffectiveGroupMeasure       = "median"
	ResearchElementDefinition_CharacteristicStudyEffectiveGroupMeasureMeanOfMean           ResearchElementDefinition_CharacteristicStudyEffectiveGroupMeasure       = "mean-of-mean"
	ResearchElementDefinition_CharacteristicStudyEffectiveGroupMeasureMeanOfMedian         ResearchElementDefinition_CharacteristicStudyEffectiveGroupMeasure       = "mean-of-median"
	ResearchElementDefinition_CharacteristicStudyEffectiveGroupMeasureMedianOfMean         ResearchElementDefinition_CharacteristicStudyEffectiveGroupMeasure       = "median-of-mean"
	ResearchElementDefinition_CharacteristicStudyEffectiveGroupMeasureMedianOfMedian       ResearchElementDefinition_CharacteristicStudyEffectiveGroupMeasure       = "median-of-median"
	ResearchElementDefinition_CharacteristicParticipantEffectiveGroupMeasureMean           ResearchElementDefinition_CharacteristicParticipantEffectiveGroupMeasure = "mean"
	ResearchElementDefinition_CharacteristicParticipantEffectiveGroupMeasureMedian         ResearchElementDefinition_CharacteristicParticipantEffectiveGroupMeasure = "median"
	ResearchElementDefinition_CharacteristicParticipantEffectiveGroupMeasureMeanOfMean     ResearchElementDefinition_CharacteristicParticipantEffectiveGroupMeasure = "mean-of-mean"
	ResearchElementDefinition_CharacteristicParticipantEffectiveGroupMeasureMeanOfMedian   ResearchElementDefinition_CharacteristicParticipantEffectiveGroupMeasure = "mean-of-median"
	ResearchElementDefinition_CharacteristicParticipantEffectiveGroupMeasureMedianOfMean   ResearchElementDefinition_CharacteristicParticipantEffectiveGroupMeasure = "median-of-mean"
	ResearchElementDefinition_CharacteristicParticipantEffectiveGroupMeasureMedianOfMedian ResearchElementDefinition_CharacteristicParticipantEffectiveGroupMeasure = "median-of-median"
)

// Reference is A reference from one resource to another.
type Reference struct {
	// Extensions for display
	Display_ext *Element `json:"_display"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A reference to a location at which the other resource is found. The reference may be
	// a relative reference, in which case it is relative to the service base URL, or an
	// absolute URL that resolves to the location where the resource is found. The
	// reference may be version specific or not. If the reference is not to a FHIR RESTful
	// server, then it should be assumed to be version specific. Internal fragment
	// references (start with '#') refer to contained resources.
	Reference string `json:"reference"`
	// The expected type of the target of the reference. If both Reference.type and
	// Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL
	// be consistent.
	//
	// The type is the Canonical URL of Resource Definition that is the type this reference
	// refers to. References are URLs that are relative to
	// http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to
	// http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for
	// logical models (and can only be used in references in logical models, not resources).
	Type string `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// An identifier for the target resource. This is used when there is no way to
	// reference the other resource directly, either because the entity it represents is
	// not available through a FHIR server, or because there is no way for the author of
	// the resource to convert a known identifier to an actual location. There is no
	// requirement that a Reference.identifier point to something that is actually exposed
	// as a FHIR instance, but it SHALL point to a business concept that would be expected
	// to be exposed as a FHIR instance, and that instance would need to be of a FHIR
	// resource type allowed by the reference.
	Identifier *Identifier `json:"identifier"`
	// Plain text narrative that identifies the resource in addition to the resource
	// reference.
	Display string `json:"display"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for reference
	Reference_ext *Element `json:"_reference"`
}

// AuditEvent_Detail is A record of an event made for purposes of maintaining a security log. Typical uses
// include detection of intrusion attempts and monitoring for inappropriate usage.
type AuditEvent_Detail struct {
	// Extensions for valueBase64Binary
	ValueBase64Binary_ext *Element `json:"_valueBase64Binary"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The type of extra detail provided in the value.
	Type string `json:"type"`
	// The  value of the extra detail.
	// pattern ^(\s*([0-9a-zA-Z\+/=]){4}\s*)+$
	ValueBase64Binary string `json:"valueBase64Binary"`
	// The  value of the extra detail.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
}

// Consent_Data is A record of a healthcare consumer’s  choices, which permits or denies identified
// recipient(s) or recipient role(s) to perform one or more actions within a given
// policy context, for specific purposes and periods of time.
type Consent_Data struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// How the resource reference is interpreted when testing consent restrictions.
	Meaning Consent_DataMeaning `json:"meaning"`
	// Extensions for meaning
	Meaning_ext *Element `json:"_meaning"`
	// A reference to a specific resource that defines which resources are covered by this
	// consent.
	Reference *Reference `json:"reference,omitempty"`
}

type Consent_DataMeaning string

const (
	Consent_DataMeaningInstance   Consent_DataMeaning = "instance"
	Consent_DataMeaningRelated    Consent_DataMeaning = "related"
	Consent_DataMeaningDependents Consent_DataMeaning = "dependents"
	Consent_DataMeaningAuthoredby Consent_DataMeaning = "authoredby"
)

// ExampleScenario_Step is Example of workflow instance.
type ExampleScenario_Step struct {
	// Extensions for pause
	Pause_ext *Element `json:"_pause"`
	// Each interaction or action.
	Operation *ExampleScenario_Operation `json:"operation"`
	// Indicates an alternative step that can be taken instead of the operations on the
	// base step in exceptional/atypical circumstances.
	Alternative []*ExampleScenario_Alternative `json:"alternative"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Nested process.
	Process []*ExampleScenario_Process `json:"process"`
	// If there is a pause in the flow.
	Pause bool `json:"pause"`
}

// RelatedPerson_Communication is Information about a person that is involved in the care for a patient, but who is
// not the target of healthcare, nor has a formal responsibility in the care process.
type RelatedPerson_Communication struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a
	// hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for
	// English, or "en-US" for American English versus "en-EN" for England English.
	Language *CodeableConcept `json:"language,omitempty"`
	// Indicates whether or not the patient prefers this language (over other languages he
	// masters up a certain level).
	Preferred bool `json:"preferred"`
	// Extensions for preferred
	Preferred_ext *Element `json:"_preferred"`
}

// SubstancePolymer_Repeat is Todo.
type SubstancePolymer_Repeat struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for numberOfUnits
	NumberOfUnits_ext *Element `json:"_numberOfUnits"`
	// Todo.
	RepeatUnitAmountType *CodeableConcept `json:"repeatUnitAmountType"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Todo.
	NumberOfUnits int64 `json:"numberOfUnits"`
	// Todo.
	AverageMolecularFormula string `json:"averageMolecularFormula"`
	// Extensions for averageMolecularFormula
	AverageMolecularFormula_ext *Element `json:"_averageMolecularFormula"`
	// Todo.
	RepeatUnit []*SubstancePolymer_RepeatUnit `json:"repeatUnit"`
}

// ExplanationOfBenefit_Detail1 is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_Detail1 struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
	// The adjudication results.
	Adjudication []*ExplanationOfBenefit_Adjudication `json:"adjudication"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *Money `json:"unitPrice"`
	// The quantity times the unit price for an additional service or product or charge.
	Net *Money `json:"net"`
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []uint64 `json:"noteNumber"`
	// Extensions for noteNumber
	NoteNumber_ext []*Element `json:"_noteNumber"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// When the value is a group code then this item collects a set of related claim
	// details, otherwise this contains the product, service, drug or other billing code
	// for the item.
	ProductOrService *CodeableConcept `json:"productOrService,omitempty"`
	// The third-tier service adjudications for payor added services.
	SubDetail []*ExplanationOfBenefit_SubDetail1 `json:"subDetail"`
	// Item typification or modifiers codes to convey additional context for the product or
	// service.
	Modifier []*CodeableConcept `json:"modifier"`
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity"`
	// A real number that represents a multiplier used in determining the overall value of
	// services delivered and/or goods received. The concept of a Factor allows for a
	// discount or surcharge multiplier to be applied to a monetary amount.
	Factor float64 `json:"factor"`
}

// ImplementationGuide_Manifest is A set of rules of how a particular interoperability or standards problem is solved -
// typically through the use of FHIR resources. This resource is used to gather all the
// parts of an implementation guide into a logical whole and to publish a computable
// definition of all the parts.
type ImplementationGuide_Manifest struct {
	// A resource that is part of the implementation guide. Conformance resources (value
	// set, structure definition, capability statements etc.) are obvious candidates for
	// inclusion, but any kind of resource can be included as an example resource.
	Resource []*ImplementationGuide_Resource1 `json:"resource,omitempty"`
	// Information about a page within the IG.
	Page []*ImplementationGuide_Page1 `json:"page"`
	// Indicates a relative path to an image that exists within the IG.
	Image []string `json:"image"`
	// Extensions for image
	Image_ext []*Element `json:"_image"`
	// Indicates the relative path of an additional non-page, non-image file that is part
	// of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink
	// in a derived IG.
	Other []string `json:"other"`
	// Extensions for other
	Other_ext []*Element `json:"_other"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A pointer to official web page, PDF or other rendering of the implementation guide.
	Rendering string `json:"rendering"`
	// Extensions for rendering
	Rendering_ext *Element `json:"_rendering"`
}

// OperationDefinition_Overload is A formal computable definition of an operation (on the RESTful interface) or a named
// query (using the search interaction).
type OperationDefinition_Overload struct {
	// Comments to go on overload.
	Comment string `json:"comment"`
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Name of parameter to include in overload.
	ParameterName []string `json:"parameterName"`
	// Extensions for parameterName
	ParameterName_ext []*Element `json:"_parameterName"`
}

// ExplanationOfBenefit_Detail is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_Detail struct {
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// The type of revenue or cost center providing the product and/or service.
	Revenue *CodeableConcept `json:"revenue"`
	// Item typification or modifiers codes to convey additional context for the product or
	// service.
	Modifier []*CodeableConcept `json:"modifier"`
	// A claim detail line. Either a simple (a product or service) or a 'group' of
	// sub-details which are simple items.
	Sequence uint64 `json:"sequence"`
	// Identifies the program under which this may be recovered.
	ProgramCode []*CodeableConcept `json:"programCode"`
	// Unique Device Identifiers associated with this line item.
	Udi []*Reference `json:"udi"`
	// Extensions for noteNumber
	NoteNumber_ext []*Element `json:"_noteNumber"`
	// Third-tier of goods and services.
	SubDetail []*ExplanationOfBenefit_SubDetail `json:"subDetail"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// When the value is a group code then this item collects a set of related claim
	// details, otherwise this contains the product, service, drug or other billing code
	// for the item.
	ProductOrService *CodeableConcept `json:"productOrService,omitempty"`
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity"`
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []uint64 `json:"noteNumber"`
	// The adjudication results.
	Adjudication []*ExplanationOfBenefit_Adjudication `json:"adjudication"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Code to identify the general type of benefits under which products and services are
	// provided.
	Category *CodeableConcept `json:"category"`
	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *Money `json:"unitPrice"`
	// A real number that represents a multiplier used in determining the overall value of
	// services delivered and/or goods received. The concept of a Factor allows for a
	// discount or surcharge multiplier to be applied to a monetary amount.
	Factor float64 `json:"factor"`
	// The quantity times the unit price for an additional service or product or charge.
	Net *Money `json:"net"`
}

// Group_Member is Represents a defined collection of entities that may be discussed or acted upon
// collectively but which are not expected to act collectively, and are not formally or
// legally recognized; i.e. a collection of entities that isn't an Organization.
type Group_Member struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A reference to the entity that is a member of the group. Must be consistent with
	// Group.type. If the entity is another group, then the type must be the same.
	Entity *Reference `json:"entity,omitempty"`
	// The period that the member was in the group, if known.
	Period *Period `json:"period"`
	// A flag to indicate that the member is no longer in the group, but previously may
	// have been a member.
	Inactive bool `json:"inactive"`
	// Extensions for inactive
	Inactive_ext *Element `json:"_inactive"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// ImplementationGuide_Parameter is A set of rules of how a particular interoperability or standards problem is solved -
// typically through the use of FHIR resources. This resource is used to gather all the
// parts of an implementation guide into a logical whole and to publish a computable
// definition of all the parts.
type ImplementationGuide_Parameter struct {
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// Value for named type.
	Value string `json:"value"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// apply | path-resource | path-pages | path-tx-cache | expansion-parameter |
	// rule-broken-links | generate-xml | generate-json | generate-turtle | html-template.
	Code ImplementationGuide_ParameterCode `json:"code"`
}

type ImplementationGuide_ParameterCode string

const (
	ImplementationGuide_ParameterCodeApply              ImplementationGuide_ParameterCode = "apply"
	ImplementationGuide_ParameterCodePathResource       ImplementationGuide_ParameterCode = "path-resource"
	ImplementationGuide_ParameterCodePathPages          ImplementationGuide_ParameterCode = "path-pages"
	ImplementationGuide_ParameterCodePathTxCache        ImplementationGuide_ParameterCode = "path-tx-cache"
	ImplementationGuide_ParameterCodeExpansionParameter ImplementationGuide_ParameterCode = "expansion-parameter"
	ImplementationGuide_ParameterCodeRuleBrokenLinks    ImplementationGuide_ParameterCode = "rule-broken-links"
	ImplementationGuide_ParameterCodeGenerateXml        ImplementationGuide_ParameterCode = "generate-xml"
	ImplementationGuide_ParameterCodeGenerateJson       ImplementationGuide_ParameterCode = "generate-json"
	ImplementationGuide_ParameterCodeGenerateTurtle     ImplementationGuide_ParameterCode = "generate-turtle"
	ImplementationGuide_ParameterCodeHtmlTemplate       ImplementationGuide_ParameterCode = "html-template"
)

// DataRequirement_Sort is Describes a required data item for evaluation in terms of the type of data, and
// optional code or date-based filters of the data.
type DataRequirement_Sort struct {
	// The attribute of the sort. The specified path must be resolvable from the type of
	// the required data. The path is allowed to contain qualifiers (.) to traverse
	// sub-elements, as well as indexers ([x]) to traverse multiple-cardinality
	// sub-elements. Note that the index must be an integer constant.
	Path string `json:"path"`
	// Extensions for path
	Path_ext *Element `json:"_path"`
	// The direction of the sort, ascending or descending.
	Direction DataRequirement_SortDirection `json:"direction"`
	// Extensions for direction
	Direction_ext *Element `json:"_direction"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

type DataRequirement_SortDirection string

const (
	DataRequirement_SortDirectionAscending  DataRequirement_SortDirection = "ascending"
	DataRequirement_SortDirectionDescending DataRequirement_SortDirection = "descending"
)

// EffectEvidenceSynthesis_EffectEstimate is The EffectEvidenceSynthesis resource describes the difference in an outcome between
// exposures states in a population where the effect estimate is derived from a
// combination of research studies.
type EffectEvidenceSynthesis_EffectEstimate struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The point estimate of the effect estimate.
	Value float64 `json:"value"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// Specifies the UCUM unit for the outcome.
	UnitOfMeasure *CodeableConcept `json:"unitOfMeasure"`
	// A description of the precision of the estimate for the effect.
	PrecisionEstimate []*EffectEvidenceSynthesis_PrecisionEstimate `json:"precisionEstimate"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Human-readable summary of effect estimate.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Examples include relative risk and mean difference.
	Type *CodeableConcept `json:"type"`
	// Used to define variant exposure states such as low-risk state.
	VariantState *CodeableConcept `json:"variantState"`
}

// PractitionerRole_AvailableTime is A specific set of Roles/Locations/specialties/services that a practitioner may
// perform at an organization for a period of time.
type PractitionerRole_AvailableTime struct {
	// The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
	AvailableStartTime string `json:"availableStartTime"`
	// The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
	AvailableEndTime string `json:"availableEndTime"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for daysOfWeek
	DaysOfWeek_ext []*Element `json:"_daysOfWeek"`
	// Is this always available? (hence times are irrelevant) e.g. 24 hour service.
	AllDay bool `json:"allDay"`
	// Extensions for availableEndTime
	AvailableEndTime_ext *Element `json:"_availableEndTime"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates which days of the week are available between the start and end Times.
	DaysOfWeek []string `json:"daysOfWeek"`
	// Extensions for allDay
	AllDay_ext *Element `json:"_allDay"`
	// Extensions for availableStartTime
	AvailableStartTime_ext *Element `json:"_availableStartTime"`
}

// ValueSet_Parameter is A ValueSet resource instance specifies a set of codes drawn from one or more code
// systems, intended for use in a particular context. Value sets link between
// [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
type ValueSet_Parameter struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The value of the parameter.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// The value of the parameter.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// Extensions for valueDecimal
	ValueDecimal_ext *Element `json:"_valueDecimal"`
	// The value of the parameter.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	ValueDateTime string `json:"valueDateTime"`
	// Extensions for valueInteger
	ValueInteger_ext *Element `json:"_valueInteger"`
	// The value of the parameter.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	ValueDecimal float64 `json:"valueDecimal"`
	// The value of the parameter.
	// pattern ^\S*$
	ValueUri string `json:"valueUri"`
	// Extensions for valueUri
	ValueUri_ext *Element `json:"_valueUri"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Name of the input parameter to the $expand operation; may be a server-assigned name
	// for additional default or other server-supplied parameters used to control the
	// expansion process.
	Name string `json:"name"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// The value of the parameter.
	// pattern ^-?([0]|([1-9][0-9]*))$
	ValueInteger int64 `json:"valueInteger"`
	// Extensions for valueCode
	ValueCode_ext *Element `json:"_valueCode"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The value of the parameter.
	// pattern ^[^\s]+(\s[^\s]+)*$
	ValueCode string `json:"valueCode"`
	// Extensions for valueDateTime
	ValueDateTime_ext *Element `json:"_valueDateTime"`
}

// Practitioner_Qualification is A person who is directly or indirectly involved in the provisioning of healthcare.
type Practitioner_Qualification struct {
	// Coded representation of the qualification.
	Code *CodeableConcept `json:"code,omitempty"`
	// Period during which the qualification is valid.
	Period *Period `json:"period"`
	// Organization that regulates and issues the qualification.
	Issuer *Reference `json:"issuer"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An identifier that applies to this person's qualification in this role.
	Identifier []*Identifier `json:"identifier"`
}

// InsurancePlan_Benefit is Details of a Health Insurance product/plan provided by an organization.
type InsurancePlan_Benefit struct {
	// Extensions for requirement
	Requirement_ext *Element `json:"_requirement"`
	// The specific limits on the benefit.
	Limit []*InsurancePlan_Limit `json:"limit"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Type of benefit (primary care; speciality care; inpatient; outpatient).
	Type *CodeableConcept `json:"type,omitempty"`
	// The referral requirements to have access/coverage for this benefit.
	Requirement string `json:"requirement"`
}

// Duration is A length of time.
type Duration struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The value of the measured amount. The value includes an implicit precision in the
	// presentation of the value.
	Value float64 `json:"value"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// How the value should be understood and represented - whether the actual value is
	// greater or less than the stated value due to measurement issues; e.g. if the
	// comparator is "<" , then the real value is < stated value.
	Comparator DurationComparator `json:"comparator"`
	// Extensions for comparator
	Comparator_ext *Element `json:"_comparator"`
	// A human-readable form of the unit.
	Unit string `json:"unit"`
	// A computer processable form of the unit in some unit representation system.
	Code string `json:"code"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for unit
	Unit_ext *Element `json:"_unit"`
	// The identification of the system that provides the coded form of the unit.
	System string `json:"system"`
	// Extensions for system
	System_ext *Element `json:"_system"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
}

type DurationComparator string

const (
	DurationComparatorLt   DurationComparator = "<"
	DurationComparatorLtEq DurationComparator = "<="
	DurationComparatorGtEq DurationComparator = ">="
	DurationComparatorGt   DurationComparator = ">"
)

// Device_DeviceName is A type of a manufactured item that is used in the provision of healthcare without
// being substantially changed through that activity. The device may be a medical or
// non-medical device.
type Device_DeviceName struct {
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The name of the device.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The type of deviceName.
	// UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName |
	// ModelName.
	Type Device_DeviceNameType `json:"type"`
}

type Device_DeviceNameType string

const (
	Device_DeviceNameTypeUdiLabelName        Device_DeviceNameType = "udi-label-name"
	Device_DeviceNameTypeUserFriendlyName    Device_DeviceNameType = "user-friendly-name"
	Device_DeviceNameTypePatientReportedName Device_DeviceNameType = "patient-reported-name"
	Device_DeviceNameTypeManufacturerName    Device_DeviceNameType = "manufacturer-name"
	Device_DeviceNameTypeModelName           Device_DeviceNameType = "model-name"
	Device_DeviceNameTypeOther               Device_DeviceNameType = "other"
)

// MessageHeader_Response is The header for a message exchange that is either requesting or responding to an
// action.  The reference(s) that are the subject of the action as well as other
// information related to the action are typically transmitted in a bundle in which the
// MessageHeader resource instance is the first resource in the bundle.
type MessageHeader_Response struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The MessageHeader.id of the message to which this message is a response.
	Identifier string `json:"identifier"`
	// Extensions for identifier
	Identifier_ext *Element `json:"_identifier"`
	// Code that identifies the type of response to the message - whether it was successful
	// or not, and whether it should be resent or not.
	Code MessageHeader_ResponseCode `json:"code"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// Full details of any issues found in the message.
	Details *Reference `json:"details"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

type MessageHeader_ResponseCode string

const (
	MessageHeader_ResponseCodeOk             MessageHeader_ResponseCode = "ok"
	MessageHeader_ResponseCodeTransientError MessageHeader_ResponseCode = "transient-error"
	MessageHeader_ResponseCodeFatalError     MessageHeader_ResponseCode = "fatal-error"
)

// TerminologyCapabilities_ValidateCode is A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a
// FHIR Terminology Server that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type TerminologyCapabilities_ValidateCode struct {
	// Extensions for translations
	Translations_ext *Element `json:"_translations"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Whether translations are validated.
	Translations bool `json:"translations"`
}

// StructureMap_Target is A Map of relationships between 2 structures that can be used to transform data.
type StructureMap_Target struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Type or variable this rule applies to.
	Context string `json:"context"`
	// Extensions for element
	Element_ext *Element `json:"_element"`
	// Named context for field, if desired, and a field is specified.
	Variable string `json:"variable"`
	// Extensions for transform
	Transform_ext *Element `json:"_transform"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// If field is a list, how to manage the list.
	ListMode []StructureMap_TargetListMode `json:"listMode"`
	// Extensions for listRuleId
	ListRuleId_ext *Element `json:"_listRuleId"`
	// How the data is copied / created.
	Transform StructureMap_TargetTransform `json:"transform"`
	// How to interpret the context.
	ContextType StructureMap_TargetContextType `json:"contextType"`
	// Extensions for contextType
	ContextType_ext *Element `json:"_contextType"`
	// Parameters to the transform.
	Parameter []*StructureMap_Parameter `json:"parameter"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Field to create in the context.
	Element string `json:"element"`
	// Extensions for variable
	Variable_ext *Element `json:"_variable"`
	// Extensions for listMode
	ListMode_ext []*Element `json:"_listMode"`
	// Internal rule reference for shared list items.
	ListRuleId string `json:"listRuleId"`
	// Extensions for context
	Context_ext *Element `json:"_context"`
}

type StructureMap_TargetListMode string
type StructureMap_TargetTransform string
type StructureMap_TargetContextType string

const (
	StructureMap_TargetTransformCreate     StructureMap_TargetTransform   = "create"
	StructureMap_TargetTransformCopy       StructureMap_TargetTransform   = "copy"
	StructureMap_TargetTransformTruncate   StructureMap_TargetTransform   = "truncate"
	StructureMap_TargetTransformEscape     StructureMap_TargetTransform   = "escape"
	StructureMap_TargetTransformCast       StructureMap_TargetTransform   = "cast"
	StructureMap_TargetTransformAppend     StructureMap_TargetTransform   = "append"
	StructureMap_TargetTransformTranslate  StructureMap_TargetTransform   = "translate"
	StructureMap_TargetTransformReference  StructureMap_TargetTransform   = "reference"
	StructureMap_TargetTransformDateOp     StructureMap_TargetTransform   = "dateOp"
	StructureMap_TargetTransformUuid       StructureMap_TargetTransform   = "uuid"
	StructureMap_TargetTransformPointer    StructureMap_TargetTransform   = "pointer"
	StructureMap_TargetTransformEvaluate   StructureMap_TargetTransform   = "evaluate"
	StructureMap_TargetTransformCc         StructureMap_TargetTransform   = "cc"
	StructureMap_TargetTransformC          StructureMap_TargetTransform   = "c"
	StructureMap_TargetTransformQty        StructureMap_TargetTransform   = "qty"
	StructureMap_TargetTransformId         StructureMap_TargetTransform   = "id"
	StructureMap_TargetTransformCp         StructureMap_TargetTransform   = "cp"
	StructureMap_TargetContextTypeType     StructureMap_TargetContextType = "type"
	StructureMap_TargetContextTypeVariable StructureMap_TargetContextType = "variable"
)

// SubstanceSpecification_Moiety is The detailed description of a substance, typically at a level beyond what is used
// for prescribing.
type SubstanceSpecification_Moiety struct {
	// Molecular formula.
	MolecularFormula string `json:"molecularFormula"`
	// Extensions for molecularFormula
	MolecularFormula_ext *Element `json:"_molecularFormula"`
	// Textual name for this moiety substance.
	Name string `json:"name"`
	// Role that the moiety is playing.
	Role *CodeableConcept `json:"role"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Extensions for amountString
	AmountString_ext *Element `json:"_amountString"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Quantitative value for this moiety.
	AmountQuantity *Quantity `json:"amountQuantity"`
	// Quantitative value for this moiety.
	// pattern ^[ \r\n\t\S]+$
	AmountString string `json:"amountString"`
	// Stereochemistry type.
	Stereochemistry *CodeableConcept `json:"stereochemistry"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Identifier by which this moiety substance is known.
	Identifier *Identifier `json:"identifier"`
	// Optical activity type.
	OpticalActivity *CodeableConcept `json:"opticalActivity"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// HealthcareService_NotAvailable is The details of a healthcare service available at a location.
type HealthcareService_NotAvailable struct {
	// Service is not available (seasonally or for a public holiday) from this date.
	During *Period `json:"during"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The reason that can be presented to the user as to why this time is not available.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
}

// NutritionOrder_Nutrient is A request to supply a diet, formula feeding (enteral) or oral nutritional supplement
// to a patient/resident.
type NutritionOrder_Nutrient struct {
	// The nutrient that is being modified such as carbohydrate or sodium.
	Modifier *CodeableConcept `json:"modifier"`
	// The quantity of the specified nutrient to include in diet.
	Amount *Quantity `json:"amount"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// Person_Link is Demographics and administrative information about a person independent of a specific
// health-related context.
type Person_Link struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The resource to which this actual person is associated.
	Target *Reference `json:"target,omitempty"`
	// Level of assurance that this link is associated with the target resource.
	Assurance Person_LinkAssurance `json:"assurance"`
	// Extensions for assurance
	Assurance_ext *Element `json:"_assurance"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

type Person_LinkAssurance string

const (
	Person_LinkAssuranceLevel1 Person_LinkAssurance = "level1"
	Person_LinkAssuranceLevel2 Person_LinkAssurance = "level2"
	Person_LinkAssuranceLevel3 Person_LinkAssurance = "level3"
	Person_LinkAssuranceLevel4 Person_LinkAssurance = "level4"
)

// RiskAssessment_Prediction is An assessment of the likely outcome(s) for a patient or other subject as well as the
// likelihood of each outcome.
type RiskAssessment_Prediction struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// One of the potential outcomes for the patient (e.g. remission, death,  a particular
	// condition).
	Outcome *CodeableConcept `json:"outcome"`
	// Indicates the period of time or age range of the subject to which the specified
	// probability applies.
	WhenRange *Range `json:"whenRange"`
	// Additional information explaining the basis for the prediction.
	Rationale string `json:"rationale"`
	// Extensions for rationale
	Rationale_ext *Element `json:"_rationale"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for probabilityDecimal
	ProbabilityDecimal_ext *Element `json:"_probabilityDecimal"`
	// Indicates how likely the outcome is (in the specified timeframe).
	ProbabilityRange *Range `json:"probabilityRange"`
	// Indicates how likely the outcome is (in the specified timeframe).
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	ProbabilityDecimal float64 `json:"probabilityDecimal"`
	// Indicates the risk for this particular subject (with their specific characteristics)
	// divided by the risk of the population in general.  (Numbers greater than 1 = higher
	// risk than the population, numbers less than 1 = lower risk.).
	RelativeRisk float64 `json:"relativeRisk"`
	// Extensions for relativeRisk
	RelativeRisk_ext *Element `json:"_relativeRisk"`
	// Indicates the period of time or age range of the subject to which the specified
	// probability applies.
	WhenPeriod *Period `json:"whenPeriod"`
	// Indicates how likely the outcome is (in the specified timeframe), expressed as a
	// qualitative value (e.g. low, medium, or high).
	QualitativeRisk *CodeableConcept `json:"qualitativeRisk"`
}

// MedicationKnowledge_Schedule is Information about a medication that is used to support knowledge.
type MedicationKnowledge_Schedule struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Specifies the specific drug schedule.
	Schedule *CodeableConcept `json:"schedule,omitempty"`
}

// SearchParameter_Component is A search parameter that defines a named search item that can be used to
// search/filter on a resource.
type SearchParameter_Component struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The definition of the search parameter that describes this part.
	Definition string `json:"definition,omitempty"`
	// A sub-expression that defines how to extract values for this component from the
	// output of the main SearchParameter.expression.
	Expression string `json:"expression"`
	// Extensions for expression
	Expression_ext *Element `json:"_expression"`
}

// ElementDefinition_Type is Captures constraints on each element within the resource, profile, or extension.
type ElementDefinition_Type struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// URL of Data type or Resource that is a(or the) type used for this element.
	// References are URLs that are relative to http://hl7.org/fhir/StructureDefinition
	// e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string.
	// Absolute URLs are only allowed in logical models.
	Code string `json:"code"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// Identifies a profile structure or implementation Guide that applies to the datatype
	// this element refers to. If any profiles are specified, then the content must conform
	// to at least one of them. The URL can be a local reference - to a contained
	// StructureDefinition, or a reference to another StructureDefinition or Implementation
	// Guide by a canonical URL. When an implementation guide is specified, the type SHALL
	// conform to at least one profile defined in the implementation guide.
	Profile []string `json:"profile"`
	// If the type is a reference to another resource, how the resource is or can be
	// aggregated - is it a contained resource, or a reference, and if the context is a
	// bundle, is it included in the bundle.
	Aggregation []ElementDefinition_TypeAggregation `json:"aggregation"`
	// Whether this reference needs to be version specific or version independent, or
	// whether either can be used.
	Versioning ElementDefinition_TypeVersioning `json:"versioning"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Used when the type is "Reference" or "canonical", and identifies a profile structure
	// or implementation Guide that applies to the target of the reference this element
	// refers to. If any profiles are specified, then the content must conform to at least
	// one of them. The URL can be a local reference - to a contained StructureDefinition,
	// or a reference to another StructureDefinition or Implementation Guide by a canonical
	// URL. When an implementation guide is specified, the target resource SHALL conform to
	// at least one profile defined in the implementation guide.
	TargetProfile []string `json:"targetProfile"`
	// Extensions for aggregation
	Aggregation_ext []*Element `json:"_aggregation"`
	// Extensions for versioning
	Versioning_ext *Element `json:"_versioning"`
}

type ElementDefinition_TypeAggregation string
type ElementDefinition_TypeVersioning string

const (
	ElementDefinition_TypeVersioningEither      ElementDefinition_TypeVersioning = "either"
	ElementDefinition_TypeVersioningIndependent ElementDefinition_TypeVersioning = "independent"
	ElementDefinition_TypeVersioningSpecific    ElementDefinition_TypeVersioning = "specific"
)

// MedicationAdministration_Performer is Describes the event of a patient consuming or otherwise being administered a
// medication.  This may be as simple as swallowing a tablet or it may be a long
// running infusion.  Related resources tie this event to the authorizing prescription,
// and the specific encounter between patient and health care practitioner.
type MedicationAdministration_Performer struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Distinguishes the type of involvement of the performer in the medication
	// administration.
	Function *CodeableConcept `json:"function"`
	// Indicates who or what performed the medication administration.
	Actor *Reference `json:"actor,omitempty"`
}

// ElementDefinition_Slicing is Captures constraints on each element within the resource, profile, or extension.
type ElementDefinition_Slicing struct {
	// If the matching elements have to occur in the same order as defined in the profile.
	Ordered bool `json:"ordered"`
	// Extensions for ordered
	Ordered_ext *Element `json:"_ordered"`
	// Whether additional slices are allowed or not. When the slices are ordered, profile
	// authors can also say that additional slices are only allowed at the end.
	Rules ElementDefinition_SlicingRules `json:"rules"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Designates which child elements are used to discriminate between the slices when
	// processing an instance. If one or more discriminators are provided, the value of the
	// child elements in the instance data SHALL completely distinguish which slice the
	// element in the resource matches based on the allowed values for those elements in
	// each of the slices.
	Discriminator []*ElementDefinition_Discriminator `json:"discriminator"`
	// A human-readable text description of how the slicing works. If there is no
	// discriminator, this is required to be present to provide whatever information is
	// possible about how the slices can be differentiated.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for rules
	Rules_ext *Element `json:"_rules"`
}

type ElementDefinition_SlicingRules string

const (
	ElementDefinition_SlicingRulesClosed    ElementDefinition_SlicingRules = "closed"
	ElementDefinition_SlicingRulesOpen      ElementDefinition_SlicingRules = "open"
	ElementDefinition_SlicingRulesOpenAtEnd ElementDefinition_SlicingRules = "openAtEnd"
)

// PlanDefinition_Goal is This resource allows for the definition of various types of plans as a sharable,
// consumable, and executable artifact. The resource is general enough to support the
// description of a broad range of clinical artifacts such as clinical decision support
// rules, order sets and protocols.
type PlanDefinition_Goal struct {
	// Didactic or other informational resources associated with the goal that provide
	// further supporting information about the goal. Information resources can include
	// inline text commentary and links to web resources.
	Documentation []*RelatedArtifact `json:"documentation"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifies the expected level of importance associated with reaching/sustaining the
	// defined goal.
	Priority *CodeableConcept `json:"priority"`
	// The event after which the goal should begin being pursued.
	Start *CodeableConcept `json:"start"`
	// Identifies problems, conditions, issues, or concerns the goal is intended to address.
	Addresses []*CodeableConcept `json:"addresses"`
	// Indicates what should be done and within what timeframe.
	Target []*PlanDefinition_Target `json:"target"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Indicates a category the goal falls within.
	Category *CodeableConcept `json:"category"`
	// Human-readable and/or coded description of a specific desired objective of care,
	// such as "control blood pressure" or "negotiate an obstacle course" or "dance with
	// child at wedding".
	Description *CodeableConcept `json:"description,omitempty"`
}

// Substance_Instance is A homogeneous material with a definite composition.
type Substance_Instance struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifier associated with the package/container (usually a label affixed directly).
	Identifier *Identifier `json:"identifier"`
	// When the substance is no longer valid to use. For some substances, a single
	// arbitrary date is used for expiry.
	Expiry string `json:"expiry"`
	// Extensions for expiry
	Expiry_ext *Element `json:"_expiry"`
	// The amount of the substance.
	Quantity *Quantity `json:"quantity"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// SubstancePolymer_DegreeOfPolymerisation is Todo.
type SubstancePolymer_DegreeOfPolymerisation struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Todo.
	Degree *CodeableConcept `json:"degree"`
	// Todo.
	Amount *SubstanceAmount `json:"amount"`
}

// TestScript_Assert is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_Assert struct {
	// The value of the HTTP response code to be tested.
	ResponseCode string `json:"responseCode"`
	// Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
	SourceId string `json:"sourceId"`
	// The description would be used by test engines for tracking and reporting purposes.
	Description string `json:"description"`
	// Extensions for compareToSourceId
	CompareToSourceId_ext *Element `json:"_compareToSourceId"`
	// The type of the resource.  See http://build.fhir.org/resourcelist.html.
	Resource string `json:"resource"`
	// The mime-type contents to compare against the request or response message
	// 'Content-Type' header.
	ContentType string `json:"contentType"`
	// Extensions for requestMethod
	RequestMethod_ext *Element `json:"_requestMethod"`
	// The value to use in a comparison against the request URL path string.
	RequestURL string `json:"requestURL"`
	// The label would be used for tracking/logging purposes by test engines.
	Label string `json:"label"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// The FHIRPath expression to evaluate against the source fixture. When
	// compareToSourceId is defined, either compareToSourceExpression or
	// compareToSourcePath must be defined, but not both.
	CompareToSourceExpression string `json:"compareToSourceExpression"`
	// Extensions for navigationLinks
	NavigationLinks_ext *Element `json:"_navigationLinks"`
	// Extensions for resource
	Resource_ext *Element `json:"_resource"`
	// XPath or JSONPath expression to evaluate against the source fixture. When
	// compareToSourceId is defined, either compareToSourceExpression or
	// compareToSourcePath must be defined, but not both.
	CompareToSourcePath string `json:"compareToSourcePath"`
	// Extensions for minimumId
	MinimumId_ext *Element `json:"_minimumId"`
	// Whether or not the test execution performs validation on the bundle navigation links.
	NavigationLinks bool `json:"navigationLinks"`
	// Extensions for label
	Label_ext *Element `json:"_label"`
	// The direction to use for the assertion.
	Direction TestScript_AssertDirection `json:"direction"`
	// The ID of a fixture.  Asserts that the response contains at a minimum the fixture
	// specified by minimumId.
	MinimumId string `json:"minimumId"`
	// Extensions for requestURL
	RequestURL_ext *Element `json:"_requestURL"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Whether or not the test execution will produce a warning only on error for this
	// assert.
	WarningOnly bool `json:"warningOnly"`
	// Extensions for warningOnly
	WarningOnly_ext *Element `json:"_warningOnly"`
	// The HTTP header field name e.g. 'Location'.
	HeaderField string `json:"headerField"`
	// The request method or HTTP operation code to compare against that used by the client
	// system under test.
	RequestMethod TestScript_AssertRequestMethod `json:"requestMethod"`
	// Extensions for response
	Response_ext *Element `json:"_response"`
	// Extensions for responseCode
	ResponseCode_ext *Element `json:"_responseCode"`
	// Extensions for sourceId
	SourceId_ext *Element `json:"_sourceId"`
	// Extensions for direction
	Direction_ext *Element `json:"_direction"`
	// Extensions for compareToSourcePath
	CompareToSourcePath_ext *Element `json:"_compareToSourcePath"`
	// Extensions for expression
	Expression_ext *Element `json:"_expression"`
	// The XPath or JSONPath expression to be evaluated against the fixture representing
	// the response received from server.
	Path string `json:"path"`
	// Extensions for path
	Path_ext *Element `json:"_path"`
	// Extensions for validateProfileId
	ValidateProfileId_ext *Element `json:"_validateProfileId"`
	// Extensions for compareToSourceExpression
	CompareToSourceExpression_ext *Element `json:"_compareToSourceExpression"`
	// Extensions for contentType
	ContentType_ext *Element `json:"_contentType"`
	// Extensions for operator
	Operator_ext *Element `json:"_operator"`
	// okay | created | noContent | notModified | bad | forbidden | notFound |
	// methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
	Response TestScript_AssertResponse `json:"response"`
	// The FHIRPath expression to be evaluated against the request or response message
	// contents - HTTP headers and payload.
	Expression string `json:"expression"`
	// Extensions for headerField
	HeaderField_ext *Element `json:"_headerField"`
	// The operator type defines the conditional behavior of the assert. If not defined,
	// the default is equals.
	Operator TestScript_AssertOperator `json:"operator"`
	// Id of the source fixture used as the contents to be evaluated by either the
	// "source/expression" or "sourceId/path" definition.
	CompareToSourceId string `json:"compareToSourceId"`
	// The ID of the Profile to validate against.
	ValidateProfileId string `json:"validateProfileId"`
	// The value to compare to.
	Value string `json:"value"`
}

type TestScript_AssertOperator string
type TestScript_AssertDirection string
type TestScript_AssertRequestMethod string
type TestScript_AssertResponse string

const (
	TestScript_AssertOperatorEquals             TestScript_AssertOperator      = "equals"
	TestScript_AssertOperatorNotEquals          TestScript_AssertOperator      = "notEquals"
	TestScript_AssertOperatorIn                 TestScript_AssertOperator      = "in"
	TestScript_AssertOperatorNotIn              TestScript_AssertOperator      = "notIn"
	TestScript_AssertOperatorGreaterThan        TestScript_AssertOperator      = "greaterThan"
	TestScript_AssertOperatorLessThan           TestScript_AssertOperator      = "lessThan"
	TestScript_AssertOperatorEmpty              TestScript_AssertOperator      = "empty"
	TestScript_AssertOperatorNotEmpty           TestScript_AssertOperator      = "notEmpty"
	TestScript_AssertOperatorContains           TestScript_AssertOperator      = "contains"
	TestScript_AssertOperatorNotContains        TestScript_AssertOperator      = "notContains"
	TestScript_AssertOperatorEval               TestScript_AssertOperator      = "eval"
	TestScript_AssertDirectionResponse          TestScript_AssertDirection     = "response"
	TestScript_AssertDirectionRequest           TestScript_AssertDirection     = "request"
	TestScript_AssertRequestMethodDelete        TestScript_AssertRequestMethod = "delete"
	TestScript_AssertRequestMethodGet           TestScript_AssertRequestMethod = "get"
	TestScript_AssertRequestMethodOptions       TestScript_AssertRequestMethod = "options"
	TestScript_AssertRequestMethodPatch         TestScript_AssertRequestMethod = "patch"
	TestScript_AssertRequestMethodPost          TestScript_AssertRequestMethod = "post"
	TestScript_AssertRequestMethodPut           TestScript_AssertRequestMethod = "put"
	TestScript_AssertRequestMethodHead          TestScript_AssertRequestMethod = "head"
	TestScript_AssertResponseOkay               TestScript_AssertResponse      = "okay"
	TestScript_AssertResponseCreated            TestScript_AssertResponse      = "created"
	TestScript_AssertResponseNoContent          TestScript_AssertResponse      = "noContent"
	TestScript_AssertResponseNotModified        TestScript_AssertResponse      = "notModified"
	TestScript_AssertResponseBad                TestScript_AssertResponse      = "bad"
	TestScript_AssertResponseForbidden          TestScript_AssertResponse      = "forbidden"
	TestScript_AssertResponseNotFound           TestScript_AssertResponse      = "notFound"
	TestScript_AssertResponseMethodNotAllowed   TestScript_AssertResponse      = "methodNotAllowed"
	TestScript_AssertResponseConflict           TestScript_AssertResponse      = "conflict"
	TestScript_AssertResponseGone               TestScript_AssertResponse      = "gone"
	TestScript_AssertResponsePreconditionFailed TestScript_AssertResponse      = "preconditionFailed"
	TestScript_AssertResponseUnprocessable      TestScript_AssertResponse      = "unprocessable"
)

// Quantity is A measured amount (or an amount that can potentially be measured). Note that
// measured amounts include amounts that are not precisely quantified, including
// amounts involving arbitrary units and floating currencies.
type Quantity struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A human-readable form of the unit.
	Unit string `json:"unit"`
	// Extensions for system
	System_ext *Element `json:"_system"`
	// The identification of the system that provides the coded form of the unit.
	System string `json:"system"`
	// A computer processable form of the unit in some unit representation system.
	Code string `json:"code"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// The value of the measured amount. The value includes an implicit precision in the
	// presentation of the value.
	Value float64 `json:"value"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// How the value should be understood and represented - whether the actual value is
	// greater or less than the stated value due to measurement issues; e.g. if the
	// comparator is "<" , then the real value is < stated value.
	Comparator QuantityComparator `json:"comparator"`
	// Extensions for comparator
	Comparator_ext *Element `json:"_comparator"`
	// Extensions for unit
	Unit_ext *Element `json:"_unit"`
}

type QuantityComparator string

const (
	QuantityComparatorLt   QuantityComparator = "<"
	QuantityComparatorLtEq QuantityComparator = "<="
	QuantityComparatorGtEq QuantityComparator = ">="
	QuantityComparatorGt   QuantityComparator = ">"
)

// CodeSystem_Filter is The CodeSystem resource is used to declare the existence of and describe a code
// system or code system supplement and its key properties, and optionally define a
// part or all of its content.
type CodeSystem_Filter struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// A list of operators that can be used with the filter.
	Operator []string `json:"operator"`
	// Extensions for operator
	Operator_ext []*Element `json:"_operator"`
	// A description of what the value for the filter should be.
	Value string `json:"value"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The code that identifies this filter when it is used as a filter in
	// [[[ValueSet]]].compose.include.filter.
	Code string `json:"code"`
	// A description of how or why the filter is used.
	Description string `json:"description"`
}

// DocumentReference_RelatesTo is A reference to a document of any kind for any purpose. Provides metadata about the
// document so that the document can be discovered and managed. The scope of a document
// is any seralized object with a mime-type, so includes formal patient centric
// documents (CDA), cliical notes, scanned paper, and non-patient specific documents
// like policy text.
type DocumentReference_RelatesTo struct {
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// The target document of this relationship.
	Target *Reference `json:"target,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of relationship that this document has with anther document.
	Code DocumentReference_RelatesToCode `json:"code"`
}

type DocumentReference_RelatesToCode string

const (
	DocumentReference_RelatesToCodeReplaces   DocumentReference_RelatesToCode = "replaces"
	DocumentReference_RelatesToCodeTransforms DocumentReference_RelatesToCode = "transforms"
	DocumentReference_RelatesToCodeSigns      DocumentReference_RelatesToCode = "signs"
	DocumentReference_RelatesToCodeAppends    DocumentReference_RelatesToCode = "appends"
)

// Encounter_ClassHistory is An interaction between a patient and healthcare provider(s) for the purpose of
// providing healthcare service(s) or assessing the health status of a patient.
type Encounter_ClassHistory struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// inpatient | outpatient | ambulatory | emergency +.
	Class *Coding `json:"class,omitempty"`
	// The time that the episode was in the specified class.
	Period *Period `json:"period,omitempty"`
}

// InsurancePlan_Contact is Details of a Health Insurance product/plan provided by an organization.
type InsurancePlan_Contact struct {
	// A contact detail (e.g. a telephone number or an email address) by which the party
	// may be contacted.
	Telecom []*ContactPoint `json:"telecom"`
	// Visiting or postal addresses for the contact.
	Address *Address `json:"address"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates a purpose for which the contact can be reached.
	Purpose *CodeableConcept `json:"purpose"`
	// A name associated with the contact.
	Name *HumanName `json:"name"`
}

// ContactDetail is Specifies contact information for a person or organization.
type ContactDetail struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The name of an individual to contact.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The contact details for the individual (if a name was provided) or the organization.
	Telecom []*ContactPoint `json:"telecom"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// DeviceMetric_Calibration is Describes a measurement, calculation or setting capability of a medical device.
type DeviceMetric_Calibration struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Describes the state of the calibration.
	State DeviceMetric_CalibrationState `json:"state"`
	// Describes the time last calibration has been performed.
	Time string `json:"time"`
	// Extensions for time
	Time_ext *Element `json:"_time"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Describes the type of the calibration method.
	Type DeviceMetric_CalibrationType `json:"type"`
	// Extensions for state
	State_ext *Element `json:"_state"`
}

type DeviceMetric_CalibrationState string
type DeviceMetric_CalibrationType string

const (
	DeviceMetric_CalibrationStateNotCalibrated       DeviceMetric_CalibrationState = "not-calibrated"
	DeviceMetric_CalibrationStateCalibrationRequired DeviceMetric_CalibrationState = "calibration-required"
	DeviceMetric_CalibrationStateCalibrated          DeviceMetric_CalibrationState = "calibrated"
	DeviceMetric_CalibrationStateUnspecified         DeviceMetric_CalibrationState = "unspecified"
	DeviceMetric_CalibrationTypeUnspecified          DeviceMetric_CalibrationType  = "unspecified"
	DeviceMetric_CalibrationTypeOffset               DeviceMetric_CalibrationType  = "offset"
	DeviceMetric_CalibrationTypeGain                 DeviceMetric_CalibrationType  = "gain"
	DeviceMetric_CalibrationTypeTwoPoint             DeviceMetric_CalibrationType  = "two-point"
)

// ExampleScenario_Operation is Example of workflow instance.
type ExampleScenario_Operation struct {
	// Each resource instance used by the responder.
	Response *ExampleScenario_ContainedInstance `json:"response"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Extensions for initiator
	Initiator_ext *Element `json:"_initiator"`
	// Who receives the transaction.
	Receiver string `json:"receiver"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for initiatorActive
	InitiatorActive_ext *Element `json:"_initiatorActive"`
	// Whether the receiver is deactivated right after the transaction.
	ReceiverActive bool `json:"receiverActive"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for number
	Number_ext *Element `json:"_number"`
	// The human-friendly name of the interaction.
	Name string `json:"name"`
	// A comment to be inserted in the diagram.
	Description string `json:"description"`
	// Extensions for receiver
	Receiver_ext *Element `json:"_receiver"`
	// Whether the initiator is deactivated right after the transaction.
	InitiatorActive bool `json:"initiatorActive"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The type of operation - CRUD.
	Type string `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// The sequential number of the interaction, e.g. 1.2.5.
	Number string `json:"number"`
	// Who starts the transaction.
	Initiator string `json:"initiator"`
	// Extensions for receiverActive
	ReceiverActive_ext *Element `json:"_receiverActive"`
	// Each resource instance used by the initiator.
	Request *ExampleScenario_ContainedInstance `json:"request"`
}

// Immunization_ProtocolApplied is Describes the event of a patient being administered a vaccine or a record of an
// immunization as reported by a patient, a clinician or another party.
type Immunization_ProtocolApplied struct {
	// One possible path to achieve presumed immunity against a disease - within the
	// context of an authority.
	Series string `json:"series"`
	// Nominal position in a series.
	// pattern ^[1-9][0-9]*$
	DoseNumberPositiveInt uint64 `json:"doseNumberPositiveInt"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for seriesDosesPositiveInt
	SeriesDosesPositiveInt_ext *Element `json:"_seriesDosesPositiveInt"`
	// The recommended number of doses to achieve immunity.
	// pattern ^[ \r\n\t\S]+$
	SeriesDosesString string `json:"seriesDosesString"`
	// Extensions for seriesDosesString
	SeriesDosesString_ext *Element `json:"_seriesDosesString"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for series
	Series_ext *Element `json:"_series"`
	// The vaccine preventable disease the dose is being administered against.
	TargetDisease []*CodeableConcept `json:"targetDisease"`
	// Extensions for doseNumberPositiveInt
	DoseNumberPositiveInt_ext *Element `json:"_doseNumberPositiveInt"`
	// Nominal position in a series.
	// pattern ^[ \r\n\t\S]+$
	DoseNumberString string `json:"doseNumberString"`
	// Extensions for doseNumberString
	DoseNumberString_ext *Element `json:"_doseNumberString"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Indicates the authority who published the protocol (e.g. ACIP) that is being
	// followed.
	Authority *Reference `json:"authority"`
	// The recommended number of doses to achieve immunity.
	// pattern ^[1-9][0-9]*$
	SeriesDosesPositiveInt uint64 `json:"seriesDosesPositiveInt"`
}

// MedicinalProductInteraction_Interactant is The interactions of the medicinal product with other medicinal products, or other
// forms of interactions.
type MedicinalProductInteraction_Interactant struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The specific medication, food or laboratory test that interacts.
	ItemReference *Reference `json:"itemReference"`
	// The specific medication, food or laboratory test that interacts.
	ItemCodeableConcept *CodeableConcept `json:"itemCodeableConcept"`
}

// PlanDefinition_DynamicValue is This resource allows for the definition of various types of plans as a sharable,
// consumable, and executable artifact. The resource is general enough to support the
// description of a broad range of clinical artifacts such as clinical decision support
// rules, order sets and protocols.
type PlanDefinition_DynamicValue struct {
	// The path to the element to be customized. This is the path on the resource that will
	// hold the result of the calculation defined by the expression. The specified path
	// SHALL be a FHIRPath resolveable on the specified target type of the
	// ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a
	// restricted subset of functions. The path is allowed to contain qualifiers (.) to
	// traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality
	// sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full
	// details).
	Path string `json:"path"`
	// Extensions for path
	Path_ext *Element `json:"_path"`
	// An expression specifying the value of the customized element.
	Expression *Expression `json:"expression"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// AuditEvent_Entity is A record of an event made for purposes of maintaining a security log. Typical uses
// include detection of intrusion attempts and monitoring for inappropriate usage.
type AuditEvent_Entity struct {
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// The query parameters for a query-type entities.
	Query base64Binary `json:"query"`
	// Text that describes the entity in more detail.
	Description string `json:"description"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifies a specific instance of the entity. The reference should be version
	// specific.
	What *Reference `json:"what"`
	// Code representing the role the entity played in the event being audited.
	Role *Coding `json:"role"`
	// Security labels for the identified entity.
	SecurityLabel []*Coding `json:"securityLabel"`
	// Extensions for query
	Query_ext *Element `json:"_query"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Tagged value pairs for conveying additional information about the entity.
	Detail []*AuditEvent_Detail `json:"detail"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Identifier for the data life-cycle stage for the entity.
	Lifecycle *Coding `json:"lifecycle"`
	// A name of the entity in the audit event.
	Name string `json:"name"`
	// The type of the object that was involved in this audit event.
	Type *Coding `json:"type"`
}

// MessageDefinition_Focus is Defines the characteristics of a message that can be shared between systems,
// including the type of event that initiates the message, the content to be
// transmitted and what response(s), if any, are permitted.
type MessageDefinition_Focus struct {
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// A profile that reflects constraints for the focal resource (and potentially for
	// related resources).
	Profile string `json:"profile"`
	// Identifies the minimum number of resources of this type that must be pointed to by a
	// message in order for it to be valid against this MessageDefinition.
	Min uint64 `json:"min"`
	// Identifies the maximum number of resources of this type that must be pointed to by a
	// message in order for it to be valid against this MessageDefinition.
	Max string `json:"max"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for min
	Min_ext *Element `json:"_min"`
	// Extensions for max
	Max_ext *Element `json:"_max"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The kind of resource that must be the focus for this message.
	Code string `json:"code"`
}

// RiskEvidenceSynthesis_SampleSize is The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a
// population plus exposure state where the risk estimate is derived from a combination
// of research studies.
type RiskEvidenceSynthesis_SampleSize struct {
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Number of participants included in this evidence synthesis.
	NumberOfParticipants int64 `json:"numberOfParticipants"`
	// Extensions for numberOfParticipants
	NumberOfParticipants_ext *Element `json:"_numberOfParticipants"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Human-readable summary of sample size.
	Description string `json:"description"`
	// Number of studies included in this evidence synthesis.
	NumberOfStudies int64 `json:"numberOfStudies"`
	// Extensions for numberOfStudies
	NumberOfStudies_ext *Element `json:"_numberOfStudies"`
}

// CapabilityStatement_Security is A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server
// for a particular version of FHIR that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type CapabilityStatement_Security struct {
	// Server adds CORS headers when responding to requests - this enables Javascript
	// applications to use the server.
	Cors bool `json:"cors"`
	// Extensions for cors
	Cors_ext *Element `json:"_cors"`
	// Types of security services that are supported/required by the system.
	Service []*CodeableConcept `json:"service"`
	// General description of how security works.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// Measure_Group is The Measure resource provides the definition of a quality measure.
type Measure_Group struct {
	// The stratifier criteria for the measure report, specified as either the name of a
	// valid CQL expression defined within a referenced library or a valid FHIR Resource
	// Path.
	Stratifier []*Measure_Stratifier `json:"stratifier"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates a meaning for the group. This can be as simple as a unique identifier, or
	// it can establish meaning in a broader context by drawing from a terminology,
	// allowing groups to be correlated across measures.
	Code *CodeableConcept `json:"code"`
	// The human readable description of this population group.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// A population criteria for the measure.
	Population []*Measure_Population `json:"population"`
}

// Procedure_FocalDevice is An action that is or was performed on or for a patient. This can be a physical
// intervention like an operation, or less invasive like long term services,
// counseling, or hypnotherapy.
type Procedure_FocalDevice struct {
	// The kind of change that happened to the device during the procedure.
	Action *CodeableConcept `json:"action"`
	// The device that was manipulated (changed) during the procedure.
	Manipulated *Reference `json:"manipulated,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// ClaimResponse_Detail is This resource provides the adjudication details from the processing of a Claim
// resource.
type ClaimResponse_Detail struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A number to uniquely reference the claim detail entry.
	DetailSequence uint64 `json:"detailSequence"`
	// Extensions for detailSequence
	DetailSequence_ext *Element `json:"_detailSequence"`
	// Extensions for noteNumber
	NoteNumber_ext []*Element `json:"_noteNumber"`
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []uint64 `json:"noteNumber"`
	// The adjudication results.
	Adjudication []*ClaimResponse_Adjudication `json:"adjudication,omitempty"`
	// A sub-detail adjudication of a simple product or service.
	SubDetail []*ClaimResponse_SubDetail `json:"subDetail"`
}

// GraphDefinition_Compartment is A formal computable definition of a graph of resources - that is, a coherent set of
// resources that form a graph by following references. The Graph Definition resource
// defines a set and makes rules about the set.
type GraphDefinition_Compartment struct {
	// Defines how the compartment rule is used - whether it it is used to test whether
	// resources are subject to the rule, or whether it is a rule that must be followed.
	Use GraphDefinition_CompartmentUse `json:"use"`
	// Identifies the compartment.
	Code string `json:"code"`
	// Extensions for rule
	Rule_ext *Element `json:"_rule"`
	// Custom rule, as a FHIRPath expression.
	Expression string `json:"expression"`
	// Extensions for expression
	Expression_ext *Element `json:"_expression"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// identical | matching | different | no-rule | custom.
	Rule GraphDefinition_CompartmentRule `json:"rule"`
	// Documentation for FHIRPath expression.
	Description string `json:"description"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for use
	Use_ext *Element `json:"_use"`
}

type GraphDefinition_CompartmentUse string
type GraphDefinition_CompartmentRule string

const (
	GraphDefinition_CompartmentUseCondition   GraphDefinition_CompartmentUse  = "condition"
	GraphDefinition_CompartmentUseRequirement GraphDefinition_CompartmentUse  = "requirement"
	GraphDefinition_CompartmentRuleIdentical  GraphDefinition_CompartmentRule = "identical"
	GraphDefinition_CompartmentRuleMatching   GraphDefinition_CompartmentRule = "matching"
	GraphDefinition_CompartmentRuleDifferent  GraphDefinition_CompartmentRule = "different"
	GraphDefinition_CompartmentRuleCustom     GraphDefinition_CompartmentRule = "custom"
)

// ImplementationGuide_Resource1 is A set of rules of how a particular interoperability or standards problem is solved -
// typically through the use of FHIR resources. This resource is used to gather all the
// parts of an implementation guide into a logical whole and to publish a computable
// definition of all the parts.
type ImplementationGuide_Resource1 struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Where this resource is found.
	Reference *Reference `json:"reference,omitempty"`
	// Extensions for exampleBoolean
	ExampleBoolean_ext *Element `json:"_exampleBoolean"`
	// Extensions for exampleCanonical
	ExampleCanonical_ext *Element `json:"_exampleCanonical"`
	// Extensions for relativePath
	RelativePath_ext *Element `json:"_relativePath"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// If true or a reference, indicates the resource is an example instance.  If a
	// reference is present, indicates that the example is an example of the specified
	// profile.
	// pattern ^true|false$
	ExampleBoolean bool `json:"exampleBoolean"`
	// If true or a reference, indicates the resource is an example instance.  If a
	// reference is present, indicates that the example is an example of the specified
	// profile.
	// pattern ^\S*$
	ExampleCanonical string `json:"exampleCanonical"`
	// The relative path for primary page for this resource within the IG.
	RelativePath string `json:"relativePath"`
}

// Invoice_Participant is Invoice containing collected ChargeItems from an Account with calculated individual
// and total price for Billing purpose.
type Invoice_Participant struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Describes the type of involvement (e.g. transcriptionist, creator etc.). If the
	// invoice has been created automatically, the Participant may be a billing engine or
	// another kind of device.
	Role *CodeableConcept `json:"role"`
	// The device, practitioner, etc. who performed or participated in the service.
	Actor *Reference `json:"actor,omitempty"`
}

// canonical is A URI that is a reference to a canonical URL on a FHIR resource
type canonical string

var canonicalPattern = regexp.MustCompile(`^\S*$`)

func (t *canonical) Validate() bool {
	return canonicalPattern.MatchString(string(*t))
}

// ContactPoint is Details for all kinds of technology mediated contact points for a person or
// organization, including telephone, email, etc.
type ContactPoint struct {
	// Extensions for rank
	Rank_ext *Element `json:"_rank"`
	// Time period when the contact point was/is in use.
	Period *Period `json:"period"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Telecommunications form for contact point - what communications system is required
	// to make use of the contact.
	System ContactPointSystem `json:"system"`
	// Extensions for use
	Use_ext *Element `json:"_use"`
	// Specifies a preferred order in which to use a set of contacts. ContactPoints with
	// lower rank values are more preferred than those with higher rank values.
	Rank uint64 `json:"rank"`
	// Identifies the purpose for the contact point.
	Use ContactPointUse `json:"use"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for system
	System_ext *Element `json:"_system"`
	// The actual contact point details, in a form that is meaningful to the designated
	// communication system (i.e. phone number or email address).
	Value string `json:"value"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
}

type ContactPointSystem string
type ContactPointUse string

const (
	ContactPointSystemPhone ContactPointSystem = "phone"
	ContactPointSystemFax   ContactPointSystem = "fax"
	ContactPointSystemEmail ContactPointSystem = "email"
	ContactPointSystemPager ContactPointSystem = "pager"
	ContactPointSystemUrl   ContactPointSystem = "url"
	ContactPointSystemSms   ContactPointSystem = "sms"
	ContactPointSystemOther ContactPointSystem = "other"
	ContactPointUseHome     ContactPointUse    = "home"
	ContactPointUseWork     ContactPointUse    = "work"
	ContactPointUseTemp     ContactPointUse    = "temp"
	ContactPointUseOld      ContactPointUse    = "old"
	ContactPointUseMobile   ContactPointUse    = "mobile"
)

// TestReport_Action1 is A summary of information based on the results of executing a TestScript.
type TestReport_Action1 struct {
	// The results of the assertion performed on the previous operations.
	Assert *TestReport_Assert `json:"assert"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An operation would involve a REST request to a server.
	Operation *TestReport_Operation `json:"operation"`
}

// ExplanationOfBenefit_Insurance is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_Insurance struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A flag to indicate that this Coverage is to be used for adjudication of this claim
	// when set to true.
	Focal bool `json:"focal"`
	// Extensions for focal
	Focal_ext *Element `json:"_focal"`
	// Reference to the insurance card level information contained in the Coverage
	// resource. The coverage issuing insurer will use these details to locate the
	// patient's actual coverage within the insurer's information system.
	Coverage *Reference `json:"coverage,omitempty"`
	// Reference numbers previously provided by the insurer to the provider to be quoted on
	// subsequent claims containing services or products related to the prior authorization.
	PreAuthRef []string `json:"preAuthRef"`
	// Extensions for preAuthRef
	PreAuthRef_ext []*Element `json:"_preAuthRef"`
}

// ImmunizationRecommendation_DateCriterion is A patient's point-in-time set of recommendations (i.e. forecasting) according to a
// published schedule with optional supporting justification.
type ImmunizationRecommendation_DateCriterion struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Date classification of recommendation.  For example, earliest date to give, latest
	// date to give, etc.
	Code *CodeableConcept `json:"code,omitempty"`
	// The date whose meaning is specified by dateCriterion.code.
	Value string `json:"value"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// MedicinalProductContraindication_OtherTherapy is The clinical particulars - indications, contraindications etc. of a medicinal
// product, including for regulatory purposes.
type MedicinalProductContraindication_OtherTherapy struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of relationship between the medicinal product indication or
	// contraindication and another therapy.
	TherapyRelationshipType *CodeableConcept `json:"therapyRelationshipType,omitempty"`
	// Reference to a specific medication (active substance, medicinal product or class of
	// products) as part of an indication or contraindication.
	MedicationCodeableConcept *CodeableConcept `json:"medicationCodeableConcept"`
	// Reference to a specific medication (active substance, medicinal product or class of
	// products) as part of an indication or contraindication.
	MedicationReference *Reference `json:"medicationReference"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// StructureMap_Parameter is A Map of relationships between 2 structures that can be used to transform data.
type StructureMap_Parameter struct {
	// Extensions for valueInteger
	ValueInteger_ext *Element `json:"_valueInteger"`
	// Parameter value - variable or literal.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	ValueDecimal float64 `json:"valueDecimal"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Parameter value - variable or literal.
	// pattern ^[A-Za-z0-9\-\.]{1,64}$
	ValueId string `json:"valueId"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// Parameter value - variable or literal.
	// pattern ^-?([0]|([1-9][0-9]*))$
	ValueInteger int64 `json:"valueInteger"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for valueId
	ValueId_ext *Element `json:"_valueId"`
	// Parameter value - variable or literal.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// Parameter value - variable or literal.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// Extensions for valueDecimal
	ValueDecimal_ext *Element `json:"_valueDecimal"`
}

// BiologicallyDerivedProduct_Manipulation is A material substance originating from a biological entity intended to be
// transplanted or infused
// into another (possibly the same) biological entity.
type BiologicallyDerivedProduct_Manipulation struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Description of manipulation.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Time of manipulation.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	TimeDateTime string `json:"timeDateTime"`
	// Extensions for timeDateTime
	TimeDateTime_ext *Element `json:"_timeDateTime"`
	// Time of manipulation.
	TimePeriod *Period `json:"timePeriod"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// Contract_Asset is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract_Asset struct {
	// Clause or question text (Prose Object) concerning the asset in a linked form, such
	// as a QuestionnaireResponse used in the formation of the contract.
	Text string `json:"text"`
	// Extensions for linkId
	LinkId_ext []*Element `json:"_linkId"`
	// Security labels that protects the asset.
	SecurityLabelNumber []uint64 `json:"securityLabelNumber"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Differentiates the kind of the asset .
	Scope *CodeableConcept `json:"scope"`
	// Description of the quality and completeness of the asset that imay be a factor in
	// its valuation.
	Condition string `json:"condition"`
	// Asset relevant contractual time period.
	Period []*Period `json:"period"`
	// Response to assets.
	Answer []*Contract_Answer `json:"answer"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Target entity type about which the term may be concerned.
	Type []*CodeableConcept `json:"type"`
	// Associated entities.
	TypeReference []*Reference `json:"typeReference"`
	// Specifies the applicability of the term to an asset resource instance, and instances
	// it refers to orinstances that refer to it, and/or are owned by the offeree.
	Relationship *Coding `json:"relationship"`
	// Circumstance of the asset.
	Context []*Contract_Context `json:"context"`
	// Extensions for condition
	Condition_ext *Element `json:"_condition"`
	// Time period of asset use.
	UsePeriod []*Period `json:"usePeriod"`
	// Extensions for securityLabelNumber
	SecurityLabelNumber_ext []*Element `json:"_securityLabelNumber"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be a subtype or part of an offered asset.
	Subtype []*CodeableConcept `json:"subtype"`
	// Type of Asset availability for use or ownership.
	PeriodType []*CodeableConcept `json:"periodType"`
	// Id [identifier??] of the clause or question text about the asset in the referenced
	// form or QuestionnaireResponse.
	LinkId []string `json:"linkId"`
	// Contract Valued Item List.
	ValuedItem []*Contract_ValuedItem `json:"valuedItem"`
}

// MessageHeader_Source is The header for a message exchange that is either requesting or responding to an
// action.  The reference(s) that are the subject of the action as well as other
// information related to the action are typically transmitted in a bundle in which the
// MessageHeader resource instance is the first resource in the bundle.
type MessageHeader_Source struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// May include configuration or other information useful in debugging.
	Software string `json:"software"`
	// Extensions for software
	Software_ext *Element `json:"_software"`
	// Identifies the routing target to send acknowledgements to.
	Endpoint string `json:"endpoint"`
	// Extensions for endpoint
	Endpoint_ext *Element `json:"_endpoint"`
	// Human-readable name for the source system.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Can convey versions of multiple systems in situations where a message passes through
	// multiple hands.
	Version string `json:"version"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// An e-mail, phone, website or other contact point to use to resolve issues with
	// message communications.
	Contact *ContactPoint `json:"contact"`
}

// ClaimResponse_Item is This resource provides the adjudication details from the processing of a Claim
// resource.
type ClaimResponse_Item struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for itemSequence
	ItemSequence_ext *Element `json:"_itemSequence"`
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []uint64 `json:"noteNumber"`
	// If this item is a group then the values here are a summary of the adjudication of
	// the detail items. If this item is a simple product or service then this is the
	// result of the adjudication of this item.
	Adjudication []*ClaimResponse_Adjudication `json:"adjudication,omitempty"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A number to uniquely reference the claim item entries.
	ItemSequence uint64 `json:"itemSequence"`
	// Extensions for noteNumber
	NoteNumber_ext []*Element `json:"_noteNumber"`
	// A claim detail. Either a simple (a product or service) or a 'group' of sub-details
	// which are simple items.
	Detail []*ClaimResponse_Detail `json:"detail"`
}

// ExampleScenario_Instance is Example of workflow instance.
type ExampleScenario_Instance struct {
	// Extensions for resourceId
	ResourceId_ext *Element `json:"_resourceId"`
	// The type of the resource.
	ResourceType string `json:"resourceType"`
	// Human-friendly description of the resource instance.
	Description string `json:"description"`
	// A specific version of the resource.
	Version []*ExampleScenario_Version `json:"version"`
	// Resources contained in the instance (e.g. the observations contained in a bundle).
	ContainedInstance []*ExampleScenario_ContainedInstance `json:"containedInstance"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The id of the resource for referencing.
	ResourceId string `json:"resourceId"`
	// Extensions for resourceType
	ResourceType_ext *Element `json:"_resourceType"`
	// A short name for the resource instance.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// StructureMap_Structure is A Map of relationships between 2 structures that can be used to transform data.
type StructureMap_Structure struct {
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for mode
	Mode_ext *Element `json:"_mode"`
	// The name used for this type in the map.
	Alias string `json:"alias"`
	// Documentation that describes how the structure is used in the mapping.
	Documentation string `json:"documentation"`
	// Extensions for alias
	Alias_ext *Element `json:"_alias"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The canonical reference to the structure.
	Url string `json:"url,omitempty"`
	// How the referenced structure is used in this mapping.
	Mode StructureMap_StructureMode `json:"mode"`
}

type StructureMap_StructureMode string

const (
	StructureMap_StructureModeSource   StructureMap_StructureMode = "source"
	StructureMap_StructureModeQueried  StructureMap_StructureMode = "queried"
	StructureMap_StructureModeTarget   StructureMap_StructureMode = "target"
	StructureMap_StructureModeProduced StructureMap_StructureMode = "produced"
)

// TestScript_Test is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_Test struct {
	// A short description of the test used by test engines for tracking and reporting
	// purposes.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Action would contain either an operation or an assertion.
	Action []*TestScript_Action1 `json:"action,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The name of this test used for tracking/logging purposes by test engines.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
}

// Distance is A length - a value with a unit that is a physical distance.
type Distance struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for unit
	Unit_ext *Element `json:"_unit"`
	// The identification of the system that provides the coded form of the unit.
	System string `json:"system"`
	// Extensions for system
	System_ext *Element `json:"_system"`
	// A computer processable form of the unit in some unit representation system.
	Code string `json:"code"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// How the value should be understood and represented - whether the actual value is
	// greater or less than the stated value due to measurement issues; e.g. if the
	// comparator is "<" , then the real value is < stated value.
	Comparator DistanceComparator `json:"comparator"`
	// Extensions for comparator
	Comparator_ext *Element `json:"_comparator"`
	// A human-readable form of the unit.
	Unit string `json:"unit"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// The value of the measured amount. The value includes an implicit precision in the
	// presentation of the value.
	Value float64 `json:"value"`
}

type DistanceComparator string

const (
	DistanceComparatorLt   DistanceComparator = "<"
	DistanceComparatorLtEq DistanceComparator = "<="
	DistanceComparatorGtEq DistanceComparator = ">="
	DistanceComparatorGt   DistanceComparator = ">"
)

// AuditEvent_Source is A record of an event made for purposes of maintaining a security log. Typical uses
// include detection of intrusion attempts and monitoring for inappropriate usage.
type AuditEvent_Source struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Logical source location within the healthcare enterprise network.  For example, a
	// hospital or other provider location within a multi-entity provider group.
	Site string `json:"site"`
	// Extensions for site
	Site_ext *Element `json:"_site"`
	// Identifier of the source where the event was detected.
	Observer *Reference `json:"observer,omitempty"`
	// Code specifying the type of source where event originated.
	Type []*Coding `json:"type"`
}

// Group_Characteristic is Represents a defined collection of entities that may be discussed or acted upon
// collectively but which are not expected to act collectively, and are not formally or
// legally recognized; i.e. a collection of entities that isn't an Organization.
type Group_Characteristic struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// The value of the trait that holds (or does not hold - see 'exclude') for members of
	// the group.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// The value of the trait that holds (or does not hold - see 'exclude') for members of
	// the group.
	ValueReference *Reference `json:"valueReference"`
	// Extensions for exclude
	Exclude_ext *Element `json:"_exclude"`
	// The value of the trait that holds (or does not hold - see 'exclude') for members of
	// the group.
	ValueRange *Range `json:"valueRange"`
	// If true, indicates the characteristic is one that is NOT held by members of the
	// group.
	Exclude bool `json:"exclude"`
	// The period over which the characteristic is tested; e.g. the patient had an
	// operation during the month of June.
	Period *Period `json:"period"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A code that identifies the kind of trait being asserted.
	Code *CodeableConcept `json:"code,omitempty"`
	// The value of the trait that holds (or does not hold - see 'exclude') for members of
	// the group.
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept"`
	// The value of the trait that holds (or does not hold - see 'exclude') for members of
	// the group.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
}

// SubstanceProtein_Subunit is A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a
// combination of subunits that are either covalently linked or have a defined
// invariant stoichiometric relationship. This includes all synthetic, recombinant and
// purified SubstanceProteins of defined sequence, whether the use is therapeutic or
// prophylactic. This set of elements will be used to describe albumins, coagulation
// factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes,
// toxins, toxoids, recombinant vaccines, and immunomodulators.
type SubstanceProtein_Subunit struct {
	// Index of primary sequences of amino acids linked through peptide bonds in order of
	// decreasing length. Sequences of the same length will be ordered by molecular weight.
	// Subunits that have identical sequences will be repeated and have sequential
	// subscripts.
	Subunit int64 `json:"subunit"`
	// Extensions for subunit
	Subunit_ext *Element `json:"_subunit"`
	// The sequence information shall be provided enumerating the amino acids from N- to
	// C-terminal end using standard single-letter amino acid codes. Uppercase shall be
	// used for L-amino acids and lowercase for D-amino acids. Transcribed
	// SubstanceProteins will always be described using the translated sequence; for
	// synthetic peptide containing amino acids that are not represented with a single
	// letter code an X should be used within the sequence. The modified amino acids will
	// be distinguished by their position in the sequence.
	SequenceAttachment *Attachment `json:"sequenceAttachment"`
	// The name of the fragment modified at the N-terminal of the SubstanceProtein shall be
	// specified.
	NTerminalModification string `json:"nTerminalModification"`
	// Unique identifier for molecular fragment modification based on the ISO 11238
	// Substance ID.
	CTerminalModificationId *Identifier `json:"cTerminalModificationId"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The sequence information shall be provided enumerating the amino acids from N- to
	// C-terminal end using standard single-letter amino acid codes. Uppercase shall be
	// used for L-amino acids and lowercase for D-amino acids. Transcribed
	// SubstanceProteins will always be described using the translated sequence; for
	// synthetic peptide containing amino acids that are not represented with a single
	// letter code an X should be used within the sequence. The modified amino acids will
	// be distinguished by their position in the sequence.
	Sequence string `json:"sequence"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// Extensions for nTerminalModification
	NTerminalModification_ext *Element `json:"_nTerminalModification"`
	// Extensions for cTerminalModification
	CTerminalModification_ext *Element `json:"_cTerminalModification"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Length of linear sequences of amino acids contained in the subunit.
	Length int64 `json:"length"`
	// Extensions for length
	Length_ext *Element `json:"_length"`
	// Unique identifier for molecular fragment modification based on the ISO 11238
	// Substance ID.
	NTerminalModificationId *Identifier `json:"nTerminalModificationId"`
	// The modification at the C-terminal shall be specified.
	CTerminalModification string `json:"cTerminalModification"`
}

// ExplanationOfBenefit_Procedure is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_Procedure struct {
	// The code or reference to a Procedure resource which identifies the clinical
	// intervention performed.
	ProcedureReference *Reference `json:"procedureReference"`
	// Unique Device Identifiers associated with this line item.
	Udi []*Reference `json:"udi"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A number to uniquely identify procedure entries.
	Sequence uint64 `json:"sequence"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// When the condition was observed or the relative ranking.
	Type []*CodeableConcept `json:"type"`
	// Date and optionally time the procedure was performed.
	Date string `json:"date"`
	// The code or reference to a Procedure resource which identifies the clinical
	// intervention performed.
	ProcedureCodeableConcept *CodeableConcept `json:"procedureCodeableConcept"`
}

// Organization_Contact is A formally or informally recognized grouping of people or organizations formed for
// the purpose of achieving some form of collective action.  Includes companies,
// institutions, corporations, departments, community groups, healthcare practice
// groups, payer/insurer, etc.
type Organization_Contact struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates a purpose for which the contact can be reached.
	Purpose *CodeableConcept `json:"purpose"`
	// A name associated with the contact.
	Name *HumanName `json:"name"`
	// A contact detail (e.g. a telephone number or an email address) by which the party
	// may be contacted.
	Telecom []*ContactPoint `json:"telecom"`
	// Visiting or postal addresses for the contact.
	Address *Address `json:"address"`
}

// RiskEvidenceSynthesis_CertaintySubcomponent is The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a
// population plus exposure state where the risk estimate is derived from a combination
// of research studies.
type RiskEvidenceSynthesis_CertaintySubcomponent struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Type of subcomponent of certainty rating.
	Type *CodeableConcept `json:"type"`
	// A rating of a subcomponent of rating certainty.
	Rating []*CodeableConcept `json:"rating"`
	// A human-readable string to clarify or explain concepts about the resource.
	Note []*Annotation `json:"note"`
}

// InsurancePlan_Plan is Details of a Health Insurance product/plan provided by an organization.
type InsurancePlan_Plan struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Business identifiers assigned to this health insurance plan which remain constant as
	// the resource is updated and propagates from server to server.
	Identifier []*Identifier `json:"identifier"`
	// Type of plan. For example, "Platinum" or "High Deductable".
	Type *CodeableConcept `json:"type"`
	// Reference to the network that providing the type of coverage.
	Network []*Reference `json:"network"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The geographic region in which a health insurance plan's benefits apply.
	CoverageArea []*Reference `json:"coverageArea"`
	// Overall costs associated with the plan.
	GeneralCost []*InsurancePlan_GeneralCost `json:"generalCost"`
	// Costs associated with the coverage provided by the product.
	SpecificCost []*InsurancePlan_SpecificCost `json:"specificCost"`
}

// TestReport_Test is A summary of information based on the results of executing a TestScript.
type TestReport_Test struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The name of this test used for tracking/logging purposes by test engines.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// A short description of the test used by test engines for tracking and reporting
	// purposes.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Action would contain either an operation or an assertion.
	Action []*TestReport_Action1 `json:"action,omitempty"`
}

// ExplanationOfBenefit_BenefitBalance is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_BenefitBalance struct {
	// Extensions for excluded
	Excluded_ext *Element `json:"_excluded"`
	// A short name or tag for the benefit.
	Name string `json:"name"`
	// Is a flag to indicate whether the benefits refer to in-network providers or
	// out-of-network providers.
	Network *CodeableConcept `json:"network"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Code to identify the general type of benefits under which products and services are
	// provided.
	Category *CodeableConcept `json:"category,omitempty"`
	// The term or period of the values such as 'maximum lifetime benefit' or 'maximum
	// annual visits'.
	Term *CodeableConcept `json:"term"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// A richer description of the benefit or services covered.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Indicates if the benefits apply to an individual or to the family.
	Unit *CodeableConcept `json:"unit"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Benefits Used to date.
	Financial []*ExplanationOfBenefit_Financial `json:"financial"`
	// True if the indicated class of service is excluded from the plan, missing or False
	// indicates the product or service is included in the coverage.
	Excluded bool `json:"excluded"`
}

// MolecularSequence_StructureVariant is Raw data describing a biological sequence.
type MolecularSequence_StructureVariant struct {
	// Structural variant outer.
	Outer *MolecularSequence_Outer `json:"outer"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Information about chromosome structure variation DNA change type.
	VariantType *CodeableConcept `json:"variantType"`
	// Used to indicate if the outer and inner start-end values have the same meaning.
	Exact bool `json:"exact"`
	// Extensions for exact
	Exact_ext *Element `json:"_exact"`
	// Length of the variant chromosome.
	Length int64 `json:"length"`
	// Extensions for length
	Length_ext *Element `json:"_length"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Structural variant inner.
	Inner *MolecularSequence_Inner `json:"inner"`
}

// MolecularSequence_Inner is Raw data describing a biological sequence.
type MolecularSequence_Inner struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Structural variant inner start. If the coordinate system is either 0-based or
	// 1-based, then start position is inclusive.
	Start int64 `json:"start"`
	// Extensions for start
	Start_ext *Element `json:"_start"`
	// Structural variant inner end. If the coordinate system is 0-based then end is
	// exclusive and does not include the last position. If the coordinate system is
	// 1-base, then end is inclusive and includes the last position.
	End int64 `json:"end"`
	// Extensions for end
	End_ext *Element `json:"_end"`
}

// TestReport_Assert is A summary of information based on the results of executing a TestScript.
type TestReport_Assert struct {
	// An explanatory message associated with the result.
	Message string `json:"message"`
	// A link to further details on the result.
	Detail string `json:"detail"`
	// Extensions for detail
	Detail_ext *Element `json:"_detail"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for result
	Result_ext *Element `json:"_result"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The result of this assertion.
	Result TestReport_AssertResult `json:"result"`
	// Extensions for message
	Message_ext *Element `json:"_message"`
}

type TestReport_AssertResult string

const (
	TestReport_AssertResultPass    TestReport_AssertResult = "pass"
	TestReport_AssertResultSkip    TestReport_AssertResult = "skip"
	TestReport_AssertResultFail    TestReport_AssertResult = "fail"
	TestReport_AssertResultWarning TestReport_AssertResult = "warning"
	TestReport_AssertResultError   TestReport_AssertResult = "error"
)

// EvidenceVariable_Characteristic is The EvidenceVariable resource describes a "PICO" element that knowledge (evidence,
// assertion, recommendation) is about.
type EvidenceVariable_Characteristic struct {
	// Indicates what effective period the study covers.
	ParticipantEffectivePeriod *Period `json:"participantEffectivePeriod"`
	// Indicates what effective period the study covers.
	ParticipantEffectiveTiming *Timing `json:"participantEffectiveTiming"`
	// Indicates duration from the participant's study entry.
	TimeFromStart *Duration `json:"timeFromStart"`
	// Indicates how elements are aggregated within the study effective period.
	GroupMeasure EvidenceVariable_CharacteristicGroupMeasure `json:"groupMeasure"`
	// Extensions for groupMeasure
	GroupMeasure_ext *Element `json:"_groupMeasure"`
	// Extensions for definitionCanonical
	DefinitionCanonical_ext *Element `json:"_definitionCanonical"`
	// Define members of the evidence element using Codes (such as condition, medication,
	// or observation), Expressions ( using an expression language such as FHIRPath or CQL)
	// or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionCodeableConcept *CodeableConcept `json:"definitionCodeableConcept"`
	// Define members of the evidence element using Codes (such as condition, medication,
	// or observation), Expressions ( using an expression language such as FHIRPath or CQL)
	// or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionExpression *Expression `json:"definitionExpression"`
	// Define members of the evidence element using Codes (such as condition, medication,
	// or observation), Expressions ( using an expression language such as FHIRPath or CQL)
	// or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionDataRequirement *DataRequirement `json:"definitionDataRequirement"`
	// Extensions for participantEffectiveDateTime
	ParticipantEffectiveDateTime_ext *Element `json:"_participantEffectiveDateTime"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Define members of the evidence element using Codes (such as condition, medication,
	// or observation), Expressions ( using an expression language such as FHIRPath or CQL)
	// or DataRequirements (such as Diabetes diagnosis onset in the last year).
	// pattern ^\S*$
	DefinitionCanonical string `json:"definitionCanonical"`
	// Define members of the evidence element using Codes (such as condition, medication,
	// or observation), Expressions ( using an expression language such as FHIRPath or CQL)
	// or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionReference *Reference `json:"definitionReference"`
	// Extensions for exclude
	Exclude_ext *Element `json:"_exclude"`
	// Indicates what effective period the study covers.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	ParticipantEffectiveDateTime string `json:"participantEffectiveDateTime"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Define members of the evidence element using Codes (such as condition, medication,
	// or observation), Expressions ( using an expression language such as FHIRPath or CQL)
	// or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionTriggerDefinition *TriggerDefinition `json:"definitionTriggerDefinition"`
	// Use UsageContext to define the members of the population, such as Age Ranges,
	// Genders, Settings.
	UsageContext []*UsageContext `json:"usageContext"`
	// When true, members with this characteristic are excluded from the element.
	Exclude bool `json:"exclude"`
	// Indicates what effective period the study covers.
	ParticipantEffectiveDuration *Duration `json:"participantEffectiveDuration"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// A short, natural language description of the characteristic that could be used to
	// communicate the criteria to an end-user.
	Description string `json:"description"`
}

type EvidenceVariable_CharacteristicGroupMeasure string

const (
	EvidenceVariable_CharacteristicGroupMeasureMean           EvidenceVariable_CharacteristicGroupMeasure = "mean"
	EvidenceVariable_CharacteristicGroupMeasureMedian         EvidenceVariable_CharacteristicGroupMeasure = "median"
	EvidenceVariable_CharacteristicGroupMeasureMeanOfMean     EvidenceVariable_CharacteristicGroupMeasure = "mean-of-mean"
	EvidenceVariable_CharacteristicGroupMeasureMeanOfMedian   EvidenceVariable_CharacteristicGroupMeasure = "mean-of-median"
	EvidenceVariable_CharacteristicGroupMeasureMedianOfMean   EvidenceVariable_CharacteristicGroupMeasure = "median-of-mean"
	EvidenceVariable_CharacteristicGroupMeasureMedianOfMedian EvidenceVariable_CharacteristicGroupMeasure = "median-of-median"
)

// InsurancePlan_GeneralCost is Details of a Health Insurance product/plan provided by an organization.
type InsurancePlan_GeneralCost struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Value of the cost.
	Cost *Money `json:"cost"`
	// Additional information about the general costs associated with this plan.
	Comment string `json:"comment"`
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Number of participants enrolled in the plan.
	GroupSize uint64 `json:"groupSize"`
	// Extensions for groupSize
	GroupSize_ext *Element `json:"_groupSize"`
	// Type of cost.
	Type *CodeableConcept `json:"type"`
}

// MeasureReport_Component is The MeasureReport resource contains the results of the calculation of a measure; and
// optionally a reference to the resources involved in that calculation.
type MeasureReport_Component struct {
	// The code for the stratum component value.
	Code *CodeableConcept `json:"code,omitempty"`
	// The stratum component value.
	Value *CodeableConcept `json:"value,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// TestScript_Teardown is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_Teardown struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The teardown action will only contain an operation.
	Action []*TestScript_Action2 `json:"action,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// Consent_Policy is A record of a healthcare consumer’s  choices, which permits or denies identified
// recipient(s) or recipient role(s) to perform one or more actions within a given
// policy context, for specific purposes and periods of time.
type Consent_Policy struct {
	// The references to the policies that are included in this consent scope. Policies may
	// be organizational, but are often defined jurisdictionally, or in law.
	Uri string `json:"uri"`
	// Extensions for uri
	Uri_ext *Element `json:"_uri"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Entity or Organization having regulatory jurisdiction or accountability for
	// enforcing policies pertaining to Consent Directives.
	Authority string `json:"authority"`
	// Extensions for authority
	Authority_ext *Element `json:"_authority"`
}

// MedicationKnowledge_MonitoringProgram is Information about a medication that is used to support knowledge.
type MedicationKnowledge_MonitoringProgram struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Type of program under which the medication is monitored.
	Type *CodeableConcept `json:"type"`
	// Name of the reviewing program.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// MedicinalProductIngredient_ReferenceStrength is An ingredient of a manufactured item or pharmaceutical product.
type MedicinalProductIngredient_ReferenceStrength struct {
	// For when strength is measured at a particular point or distance.
	MeasurementPoint string `json:"measurementPoint"`
	// Extensions for measurementPoint
	MeasurementPoint_ext *Element `json:"_measurementPoint"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Strength expressed in terms of a reference substance.
	StrengthLowLimit *Ratio `json:"strengthLowLimit"`
	// Relevant reference substance.
	Substance *CodeableConcept `json:"substance"`
	// Strength expressed in terms of a reference substance.
	Strength *Ratio `json:"strength,omitempty"`
	// The country or countries for which the strength range applies.
	Country []*CodeableConcept `json:"country"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// QuestionnaireResponse_Item is A structured set of questions and their answers. The questions are ordered and
// grouped into coherent subsets, corresponding to the structure of the grouping of the
// questionnaire being responded to.
type QuestionnaireResponse_Item struct {
	// The item from the Questionnaire that corresponds to this item in the
	// QuestionnaireResponse resource.
	LinkId string `json:"linkId"`
	// Extensions for definition
	Definition_ext *Element `json:"_definition"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
	// The respondent's answer(s) to the question.
	Answer []*QuestionnaireResponse_Answer `json:"answer"`
	// Questions or sub-groups nested beneath a question or group.
	Item []*QuestionnaireResponse_Item `json:"item"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for linkId
	LinkId_ext *Element `json:"_linkId"`
	// A reference to an [[[ElementDefinition]]] that provides the details for the item.
	Definition string `json:"definition"`
	// Text that is displayed above the contents of the group or as the text of the
	// question being answered.
	Text string `json:"text"`
}

// id is Any combination of letters, numerals, "-" and ".", with a length limit of 64
// characters.  (This might be an integer, an unprefixed OID, UUID or any other
// identifier pattern that meets these constraints.)  Ids are case-insensitive.
type id string

var idPattern = regexp.MustCompile(`^[A-Za-z0-9\-\.]{1,64}$`)

func (t *id) Validate() bool {
	return idPattern.MatchString(string(*t))
}

// BiologicallyDerivedProduct_Collection is A material substance originating from a biological entity intended to be
// transplanted or infused
// into another (possibly the same) biological entity.
type BiologicallyDerivedProduct_Collection struct {
	// Time of product collection.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	CollectedDateTime string `json:"collectedDateTime"`
	// Extensions for collectedDateTime
	CollectedDateTime_ext *Element `json:"_collectedDateTime"`
	// Time of product collection.
	CollectedPeriod *Period `json:"collectedPeriod"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Healthcare professional who is performing the collection.
	Collector *Reference `json:"collector"`
	// The patient or entity, such as a hospital or vendor in the case of a
	// processed/manipulated/manufactured product, providing the product.
	Source *Reference `json:"source"`
}

// CapabilityStatement_Resource is A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server
// for a particular version of FHIR that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type CapabilityStatement_Resource struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A type of resource exposed via the restful interface.
	Type string `json:"type"`
	// A list of profiles that represent different use cases supported by the system. For a
	// server, "supported by the system" means the system hosts/produces a set of resources
	// that are conformant to a particular profile, and allows clients that use its
	// services to search using this profile and to find appropriate data. For a client, it
	// means the system will search by this profile and process data according to the
	// guidance implicit in the profile. See further discussion in [Using
	// Profiles](profiling.html#profile-uses).
	SupportedProfile []string `json:"supportedProfile"`
	// A list of _include values supported by the server.
	SearchInclude []string `json:"searchInclude"`
	// Search parameters for implementations to support and/or make use of - either
	// references to ones defined in the specification, or additional ones defined for/by
	// the implementation.
	SearchParam []*CapabilityStatement_SearchParam `json:"searchParam"`
	// Extensions for conditionalCreate
	ConditionalCreate_ext *Element `json:"_conditionalCreate"`
	// Definition of an operation or a named query together with its parameters and their
	// meaning and type. Consult the definition of the operation for details about how to
	// invoke the operation, and the parameters.
	Operation []*CapabilityStatement_Operation `json:"operation"`
	// Extensions for conditionalDelete
	ConditionalDelete_ext *Element `json:"_conditionalDelete"`
	// Extensions for referencePolicy
	ReferencePolicy_ext []*Element `json:"_referencePolicy"`
	// A list of _revinclude (reverse include) values supported by the server.
	SearchRevInclude []string `json:"searchRevInclude"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Extensions for conditionalRead
	ConditionalRead_ext *Element `json:"_conditionalRead"`
	// A flag that indicates that the server supports conditional update.
	ConditionalUpdate bool `json:"conditionalUpdate"`
	// Extensions for conditionalUpdate
	ConditionalUpdate_ext *Element `json:"_conditionalUpdate"`
	// Extensions for searchRevInclude
	SearchRevInclude_ext []*Element `json:"_searchRevInclude"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Additional information about the resource type used by the system.
	Documentation string `json:"documentation"`
	// Extensions for versioning
	Versioning_ext *Element `json:"_versioning"`
	// A code that indicates how the server supports conditional read.
	ConditionalRead CapabilityStatement_ResourceConditionalRead `json:"conditionalRead"`
	// This field is set to no-version to specify that the system does not support (server)
	// or use (client) versioning for this resource type. If this has some other value, the
	// server must at least correctly track and populate the versionId meta-property on
	// resources. If the value is 'versioned-update', then the server supports all the
	// versioning features, including using e-tags for version integrity in the API.
	Versioning CapabilityStatement_ResourceVersioning `json:"versioning"`
	// A code that indicates how the server supports conditional delete.
	ConditionalDelete CapabilityStatement_ResourceConditionalDelete `json:"conditionalDelete"`
	// A specification of the profile that describes the solution's overall support for the
	// resource, including any constraints on cardinality, bindings, lengths or other
	// limitations. See further discussion in [Using Profiles](profiling.html#profile-uses).
	Profile string `json:"profile"`
	// A flag for whether the server is able to return past versions as part of the vRead
	// operation.
	ReadHistory bool `json:"readHistory"`
	// A set of flags that defines how references are supported.
	ReferencePolicy []CapabilityStatement_ResourceReferencePolicy `json:"referencePolicy"`
	// Extensions for searchInclude
	SearchInclude_ext []*Element `json:"_searchInclude"`
	// A flag that indicates that the server supports conditional create.
	ConditionalCreate bool `json:"conditionalCreate"`
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
	// Identifies a restful operation supported by the solution.
	Interaction []*CapabilityStatement_Interaction `json:"interaction"`
	// Extensions for readHistory
	ReadHistory_ext *Element `json:"_readHistory"`
	// A flag to indicate that the server allows or needs to allow the client to create new
	// identities on the server (that is, the client PUTs to a location where there is no
	// existing resource). Allowing this operation means that the server allows the client
	// to create new identities on the server.
	UpdateCreate bool `json:"updateCreate"`
	// Extensions for updateCreate
	UpdateCreate_ext *Element `json:"_updateCreate"`
}

type CapabilityStatement_ResourceConditionalRead string
type CapabilityStatement_ResourceVersioning string
type CapabilityStatement_ResourceConditionalDelete string
type CapabilityStatement_ResourceReferencePolicy string

const (
	CapabilityStatement_ResourceConditionalReadNotSupported   CapabilityStatement_ResourceConditionalRead   = "not-supported"
	CapabilityStatement_ResourceConditionalReadModifiedSince  CapabilityStatement_ResourceConditionalRead   = "modified-since"
	CapabilityStatement_ResourceConditionalReadNotMatch       CapabilityStatement_ResourceConditionalRead   = "not-match"
	CapabilityStatement_ResourceConditionalReadFullSupport    CapabilityStatement_ResourceConditionalRead   = "full-support"
	CapabilityStatement_ResourceVersioningNoVersion           CapabilityStatement_ResourceVersioning        = "no-version"
	CapabilityStatement_ResourceVersioningVersioned           CapabilityStatement_ResourceVersioning        = "versioned"
	CapabilityStatement_ResourceVersioningVersionedUpdate     CapabilityStatement_ResourceVersioning        = "versioned-update"
	CapabilityStatement_ResourceConditionalDeleteNotSupported CapabilityStatement_ResourceConditionalDelete = "not-supported"
	CapabilityStatement_ResourceConditionalDeleteSingle       CapabilityStatement_ResourceConditionalDelete = "single"
	CapabilityStatement_ResourceConditionalDeleteMultiple     CapabilityStatement_ResourceConditionalDelete = "multiple"
)

// ClinicalImpression_Finding is A record of a clinical assessment performed to determine what problem(s) may affect
// the patient and before planning the treatments or management strategies that are
// best to manage a patient's condition. Assessments are often 1:1 with a clinical
// consultation / encounter,  but this varies greatly depending on the clinical
// workflow. This resource is called "ClinicalImpression" rather than
// "ClinicalAssessment" to avoid confusion with the recording of assessment tools such
// as Apgar score.
type ClinicalImpression_Finding struct {
	// Specific text or code for finding or diagnosis, which may include ruled-out or
	// resolved conditions.
	ItemCodeableConcept *CodeableConcept `json:"itemCodeableConcept"`
	// Specific reference for finding or diagnosis, which may include ruled-out or resolved
	// conditions.
	ItemReference *Reference `json:"itemReference"`
	// Which investigations support finding or diagnosis.
	Basis string `json:"basis"`
	// Extensions for basis
	Basis_ext *Element `json:"_basis"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// TestScript_Variable is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_Variable struct {
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for sourceId
	SourceId_ext *Element `json:"_sourceId"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for hint
	Hint_ext *Element `json:"_hint"`
	// XPath or JSONPath to evaluate against the fixture body.  When variables are defined,
	// only one of either expression, headerField or path must be specified.
	Path string `json:"path"`
	// The FHIRPath expression to evaluate against the fixture body. When variables are
	// defined, only one of either expression, headerField or path must be specified.
	Expression string `json:"expression"`
	// Extensions for headerField
	HeaderField_ext *Element `json:"_headerField"`
	// Will be used to grab the HTTP header field value from the headers that sourceId is
	// pointing to.
	HeaderField string `json:"headerField"`
	// Displayable text string with hint help information to the user when entering a
	// default value.
	Hint string `json:"hint"`
	// Fixture to evaluate the XPath/JSONPath expression or the headerField  against within
	// this variable.
	SourceId string `json:"sourceId"`
	// Extensions for defaultValue
	DefaultValue_ext *Element `json:"_defaultValue"`
	// A free text natural language description of the variable and its purpose.
	Description string `json:"description"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// A default, hard-coded, or user-defined value for this variable.
	DefaultValue string `json:"defaultValue"`
	// Extensions for expression
	Expression_ext *Element `json:"_expression"`
	// Extensions for path
	Path_ext *Element `json:"_path"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Descriptive name for this variable.
	Name string `json:"name"`
}

// Measure_Component is The Measure resource provides the definition of a quality measure.
type Measure_Component struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates a meaning for the stratifier component. This can be as simple as a unique
	// identifier, or it can establish meaning in a broader context by drawing from a
	// terminology, allowing stratifiers to be correlated across measures.
	Code *CodeableConcept `json:"code"`
	// The human readable description of this stratifier criteria component.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// An expression that specifies the criteria for this component of the stratifier. This
	// is typically the name of an expression defined within a referenced library, but it
	// may also be a path to a stratifier element.
	Criteria *Expression `json:"criteria,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// MedicationDispense_Performer is Indicates that a medication product is to be or has been dispensed for a named
// person/patient.  This includes a description of the medication product (supply)
// provided and the instructions for administering the medication.  The medication
// dispense is the result of a pharmacy system responding to a medication order.
type MedicationDispense_Performer struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Distinguishes the type of performer in the dispense.  For example, date enterer,
	// packager, final checker.
	Function *CodeableConcept `json:"function"`
	// The device, practitioner, etc. who performed the action.  It should be assumed that
	// the actor is the dispenser of the medication.
	Actor *Reference `json:"actor,omitempty"`
}

// NutritionOrder_Administration is A request to supply a diet, formula feeding (enteral) or oral nutritional supplement
// to a patient/resident.
type NutritionOrder_Administration struct {
	// The rate of administration of formula via a feeding pump, e.g. 60 mL per hour,
	// according to the specified schedule.
	RateRatio *Ratio `json:"rateRatio"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The time period and frequency at which the enteral formula should be delivered to
	// the patient.
	Schedule *Timing `json:"schedule"`
	// The volume of formula to provide to the patient per the specified administration
	// schedule.
	Quantity *Quantity `json:"quantity"`
	// The rate of administration of formula via a feeding pump, e.g. 60 mL per hour,
	// according to the specified schedule.
	RateQuantity *Quantity `json:"rateQuantity"`
}

// Signature is A signature along with supporting context. The signature may be a digital signature
// that is cryptographic in nature, or some other signature acceptable to the domain.
// This other signature may be as simple as a graphical image representing a
// hand-written signature, or a signature ceremony Different signature approaches have
// different utilities.
type Signature struct {
	// Extensions for when
	When_ext *Element `json:"_when"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// An indication of the reason that the entity signed this document. This may be
	// explicitly included as part of the signature information and can be used when
	// determining accountability for various actions concerning the document.
	Type []*Coding `json:"type,omitempty"`
	// A reference to an application-usable description of the identity that signed  (e.g.
	// the signature used their private key).
	Who *Reference `json:"who,omitempty"`
	// A reference to an application-usable description of the identity that is represented
	// by the signature.
	OnBehalfOf *Reference `json:"onBehalfOf"`
	// A mime type that indicates the technical format of the target resources signed by
	// the signature.
	TargetFormat string `json:"targetFormat"`
	// Extensions for targetFormat
	TargetFormat_ext *Element `json:"_targetFormat"`
	// A mime type that indicates the technical format of the signature. Important mime
	// types are application/signature+xml for X ML DigSig, application/jose for JWS, and
	// image/* for a graphical image of a signature, etc.
	SigFormat string `json:"sigFormat"`
	// Extensions for sigFormat
	SigFormat_ext *Element `json:"_sigFormat"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// When the digital signature was signed.
	When string `json:"when"`
	// The base64 encoding of the Signature content. When signature is not recorded
	// electronically this element would be empty.
	Data base64Binary `json:"data"`
	// Extensions for data
	Data_ext *Element `json:"_data"`
}

// Appointment_Participant is A booking of a healthcare event among patient(s), practitioner(s), related person(s)
// and/or device(s) for a specific date/time. This may result in one or more
// Encounter(s).
type Appointment_Participant struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Role of participant in the appointment.
	Type []*CodeableConcept `json:"type"`
	// A Person, Location/HealthcareService or Device that is participating in the
	// appointment.
	Actor *Reference `json:"actor"`
	// Whether this participant is required to be present at the meeting. This covers a
	// use-case where two doctors need to meet to discuss the results for a specific
	// patient, and the patient is not required to be present.
	Required Appointment_ParticipantRequired `json:"required"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Participation period of the actor.
	Period *Period `json:"period"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for required
	Required_ext *Element `json:"_required"`
	// Participation status of the actor.
	Status Appointment_ParticipantStatus `json:"status"`
}

type Appointment_ParticipantRequired string
type Appointment_ParticipantStatus string

const (
	Appointment_ParticipantRequiredRequired        Appointment_ParticipantRequired = "required"
	Appointment_ParticipantRequiredOptional        Appointment_ParticipantRequired = "optional"
	Appointment_ParticipantRequiredInformationOnly Appointment_ParticipantRequired = "information-only"
	Appointment_ParticipantStatusAccepted          Appointment_ParticipantStatus   = "accepted"
	Appointment_ParticipantStatusDeclined          Appointment_ParticipantStatus   = "declined"
	Appointment_ParticipantStatusTentative         Appointment_ParticipantStatus   = "tentative"
	Appointment_ParticipantStatusNeedsAction       Appointment_ParticipantStatus   = "needs-action"
)

// EffectEvidenceSynthesis_CertaintySubcomponent is The EffectEvidenceSynthesis resource describes the difference in an outcome between
// exposures states in a population where the effect estimate is derived from a
// combination of research studies.
type EffectEvidenceSynthesis_CertaintySubcomponent struct {
	// Type of subcomponent of certainty rating.
	Type *CodeableConcept `json:"type"`
	// A rating of a subcomponent of rating certainty.
	Rating []*CodeableConcept `json:"rating"`
	// A human-readable string to clarify or explain concepts about the resource.
	Note []*Annotation `json:"note"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// CoverageEligibilityResponse_Error is This resource provides eligibility and plan details from the processing of an
// CoverageEligibilityRequest resource.
type CoverageEligibilityResponse_Error struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An error code,from a specified code system, which details why the eligibility check
	// could not be performed.
	Code *CodeableConcept `json:"code,omitempty"`
}

// Location_Position is Details and position information for a physical place where services are provided
// and resources and participants may be stored, found, contained, or accommodated.
type Location_Position struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for longitude
	Longitude_ext *Element `json:"_longitude"`
	// Altitude. The value domain and the interpretation are the same as for the text of
	// the altitude element in KML (see notes below).
	Altitude float64 `json:"altitude"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Longitude. The value domain and the interpretation are the same as for the text of
	// the longitude element in KML (see notes below).
	Longitude float64 `json:"longitude"`
	// Latitude. The value domain and the interpretation are the same as for the text of
	// the latitude element in KML (see notes below).
	Latitude float64 `json:"latitude"`
	// Extensions for latitude
	Latitude_ext *Element `json:"_latitude"`
	// Extensions for altitude
	Altitude_ext *Element `json:"_altitude"`
}

// ObservationDefinition_QualifiedInterval is Set of definitional characteristics for a kind of observation or measurement
// produced or consumed by an orderable health care service.
type ObservationDefinition_QualifiedInterval struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The low and high values determining the interval. There may be only one of the two.
	Range *Range `json:"range"`
	// Sex of the population the range applies to.
	Gender ObservationDefinition_QualifiedIntervalGender `json:"gender"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The category of interval of values for continuous or ordinal observations conforming
	// to this ObservationDefinition.
	Category ObservationDefinition_QualifiedIntervalCategory `json:"category"`
	// Extensions for category
	Category_ext *Element `json:"_category"`
	// Extensions for condition
	Condition_ext *Element `json:"_condition"`
	// Codes to indicate the health context the range applies to. For example, the normal
	// or therapeutic range.
	Context *CodeableConcept `json:"context"`
	// Text based condition for which the reference range is valid.
	Condition string `json:"condition"`
	// The gestational age to which this reference range is applicable, in the context of
	// pregnancy.
	GestationalAge *Range `json:"gestationalAge"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Codes to indicate the target population this reference range applies to.
	AppliesTo []*CodeableConcept `json:"appliesTo"`
	// Extensions for gender
	Gender_ext *Element `json:"_gender"`
	// The age at which this reference range is applicable. This is a neonatal age (e.g.
	// number of weeks at term) if the meaning says so.
	Age *Range `json:"age"`
}

type ObservationDefinition_QualifiedIntervalGender string
type ObservationDefinition_QualifiedIntervalCategory string

const (
	ObservationDefinition_QualifiedIntervalGenderMale        ObservationDefinition_QualifiedIntervalGender   = "male"
	ObservationDefinition_QualifiedIntervalGenderFemale      ObservationDefinition_QualifiedIntervalGender   = "female"
	ObservationDefinition_QualifiedIntervalGenderOther       ObservationDefinition_QualifiedIntervalGender   = "other"
	ObservationDefinition_QualifiedIntervalGenderUnknown     ObservationDefinition_QualifiedIntervalGender   = "unknown"
	ObservationDefinition_QualifiedIntervalCategoryReference ObservationDefinition_QualifiedIntervalCategory = "reference"
	ObservationDefinition_QualifiedIntervalCategoryCritical  ObservationDefinition_QualifiedIntervalCategory = "critical"
	ObservationDefinition_QualifiedIntervalCategoryAbsolute  ObservationDefinition_QualifiedIntervalCategory = "absolute"
)

// TestScript_Metadata is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_Metadata struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A link to the FHIR specification that this test is covering.
	Link []*TestScript_Link `json:"link"`
	// Capabilities that must exist and are assumed to function correctly on the FHIR
	// server being tested.
	Capability []*TestScript_Capability `json:"capability,omitempty"`
}

// VerificationResult_Attestation is Describes validation requirements, source(s), status and dates for one or more
// elements.
type VerificationResult_Attestation struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The individual or organization attesting to information.
	Who *Reference `json:"who"`
	// The method by which attested information was submitted/retrieved (manual; API; Push).
	CommunicationMethod *CodeableConcept `json:"communicationMethod"`
	// Signed assertion by the attestation source that they have attested to the
	// information.
	SourceSignature *Signature `json:"sourceSignature"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A digital identity certificate associated with the attestation source.
	SourceIdentityCertificate string `json:"sourceIdentityCertificate"`
	// Extensions for sourceIdentityCertificate
	SourceIdentityCertificate_ext *Element `json:"_sourceIdentityCertificate"`
	// Extensions for proxyIdentityCertificate
	ProxyIdentityCertificate_ext *Element `json:"_proxyIdentityCertificate"`
	// Signed assertion by the proxy entity indicating that they have the right to submit
	// attested information on behalf of the attestation source.
	ProxySignature *Signature `json:"proxySignature"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// When the who is asserting on behalf of another (organization or individual).
	OnBehalfOf *Reference `json:"onBehalfOf"`
	// The date the information was attested to.
	Date string `json:"date"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// A digital identity certificate associated with the proxy entity submitting attested
	// information on behalf of the attestation source.
	ProxyIdentityCertificate string `json:"proxyIdentityCertificate"`
}

// ValueSet_Contains is A ValueSet resource instance specifies a set of codes drawn from one or more code
// systems, intended for use in a particular context. Value sets link between
// [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
type ValueSet_Contains struct {
	// Extensions for abstract
	Abstract_ext *Element `json:"_abstract"`
	// The version of the code system from this code was taken. Note that a well-maintained
	// code system does not need the version reported, because the meaning of codes is
	// consistent across versions. However this cannot consistently be assured, and when
	// the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
	Version string `json:"version"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An absolute URI which is the code system in which the code for this item in the
	// expansion is defined.
	System string `json:"system"`
	// Extensions for display
	Display_ext *Element `json:"_display"`
	// If the concept is inactive in the code system that defines it. Inactive codes are
	// those that are no longer to be used, but are maintained by the code system for
	// understanding legacy data. It might not be known or specified whether an concept is
	// inactive (and it may depend on the context of use).
	Inactive bool `json:"inactive"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// If true, this entry is included in the expansion for navigational purposes, and the
	// user cannot select the code directly as a proper value.
	Abstract bool `json:"abstract"`
	// The recommended display for this item in the expansion.
	Display string `json:"display"`
	// Additional representations for this item - other languages, aliases, specialized
	// purposes, used for particular purposes, etc. These are relevant when the conditions
	// of the expansion do not fix to a single correct representation.
	Designation []*ValueSet_Designation `json:"designation"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for system
	System_ext *Element `json:"_system"`
	// The code for this item in the expansion hierarchy. If this code is missing the entry
	// in the hierarchy is a place holder (abstract) and does not represent a valid code in
	// the value set.
	Code string `json:"code"`
	// Other codes and entries contained under this entry in the hierarchy.
	Contains []*ValueSet_Contains `json:"contains"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for inactive
	Inactive_ext *Element `json:"_inactive"`
}

// DeviceDefinition_UdiDeviceIdentifier is The characteristics, operational status and capabilities of a medical-related
// component of a medical device.
type DeviceDefinition_UdiDeviceIdentifier struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The identifier that is to be associated with every Device that references this
	// DeviceDefintiion for the issuer and jurisdication porvided in the
	// DeviceDefinition.udiDeviceIdentifier.
	DeviceIdentifier string `json:"deviceIdentifier"`
	// Extensions for jurisdiction
	Jurisdiction_ext *Element `json:"_jurisdiction"`
	// The organization that assigns the identifier algorithm.
	Issuer string `json:"issuer"`
	// Extensions for issuer
	Issuer_ext *Element `json:"_issuer"`
	// The jurisdiction to which the deviceIdentifier applies.
	Jurisdiction string `json:"jurisdiction"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for deviceIdentifier
	DeviceIdentifier_ext *Element `json:"_deviceIdentifier"`
}

// MolecularSequence_Quality is Raw data describing a biological sequence.
type MolecularSequence_Quality struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// End position of the sequence. If the coordinate system is 0-based then end is
	// exclusive and does not include the last position. If the coordinate system is
	// 1-base, then end is inclusive and includes the last position.
	End int64 `json:"end"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// The score of an experimentally derived feature such as a p-value
	// ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:0001685)).
	Score *Quantity `json:"score"`
	// Harmonic mean of Recall and Precision, computed as: 2 * precision * recall /
	// (precision + recall).
	FScore float64 `json:"fScore"`
	// Extensions for truthTP
	TruthTP_ext *Element `json:"_truthTP"`
	// False positives, i.e. the number of sites in the Query Call Set for which there is
	// no path through the Truth Call Set that is consistent with this site. Sites with
	// correct variant but incorrect genotype are counted here.
	QueryFP float64 `json:"queryFP"`
	// TRUTH.TP / (TRUTH.TP + TRUTH.FN).
	Recall float64 `json:"recall"`
	// Gold standard sequence used for comparing against.
	StandardSequence *CodeableConcept `json:"standardSequence"`
	// True positives, from the perspective of the query data, i.e. the number of sites in
	// the Query Call Set for which there are paths through the Truth Call Set that are
	// consistent with all of the alleles at this site, and for which there is an accurate
	// genotype call for the event.
	QueryTP float64 `json:"queryTP"`
	// Extensions for queryTP
	QueryTP_ext *Element `json:"_queryTP"`
	// The number of false positives where the non-REF alleles in the Truth and Query Call
	// Sets match (i.e. cases where the truth is 1/1 and the query is 0/1 or similar).
	GtFP float64 `json:"gtFP"`
	// QUERY.TP / (QUERY.TP + QUERY.FP).
	Precision float64 `json:"precision"`
	// Extensions for precision
	Precision_ext *Element `json:"_precision"`
	// Extensions for queryFP
	QueryFP_ext *Element `json:"_queryFP"`
	// Extensions for gtFP
	GtFP_ext *Element `json:"_gtFP"`
	// Extensions for start
	Start_ext *Element `json:"_start"`
	// True positives, from the perspective of the truth data, i.e. the number of sites in
	// the Truth Call Set for which there are paths through the Query Call Set that are
	// consistent with all of the alleles at this site, and for which there is an accurate
	// genotype call for the event.
	TruthTP float64 `json:"truthTP"`
	// Extensions for recall
	Recall_ext *Element `json:"_recall"`
	// INDEL / SNP / Undefined variant.
	Type MolecularSequence_QualityType `json:"type"`
	// Start position of the sequence. If the coordinate system is either 0-based or
	// 1-based, then start position is inclusive.
	Start int64 `json:"start"`
	// Extensions for end
	End_ext *Element `json:"_end"`
	// Extensions for fScore
	FScore_ext *Element `json:"_fScore"`
	// Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity
	// tradeoff.
	Roc *MolecularSequence_Roc `json:"roc"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Which method is used to get sequence quality.
	Method *CodeableConcept `json:"method"`
	// False negatives, i.e. the number of sites in the Truth Call Set for which there is
	// no path through the Query Call Set that is consistent with all of the alleles at
	// this site, or sites for which there is an inaccurate genotype call for the event.
	// Sites with correct variant but incorrect genotype are counted here.
	TruthFN float64 `json:"truthFN"`
	// Extensions for truthFN
	TruthFN_ext *Element `json:"_truthFN"`
}

type MolecularSequence_QualityType string

const (
	MolecularSequence_QualityTypeIndel   MolecularSequence_QualityType = "indel"
	MolecularSequence_QualityTypeSnp     MolecularSequence_QualityType = "snp"
	MolecularSequence_QualityTypeUnknown MolecularSequence_QualityType = "unknown"
)

// TestReport_Action is A summary of information based on the results of executing a TestScript.
type TestReport_Action struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The operation performed.
	Operation *TestReport_Operation `json:"operation"`
	// The results of the assertion performed on the previous operations.
	Assert *TestReport_Assert `json:"assert"`
}

// DiagnosticReport_Media is The findings and interpretation of diagnostic  tests performed on patients, groups
// of patients, devices, and locations, and/or specimens derived from these. The report
// includes clinical context such as requesting and provider information, and some mix
// of atomic results, images, textual and coded interpretations, and formatted
// representation of diagnostic reports.
type DiagnosticReport_Media struct {
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// Reference to the image source.
	Link *Reference `json:"link,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A comment about the image. Typically, this is used to provide an explanation for why
	// the image is included, or to draw the viewer's attention to important features.
	Comment string `json:"comment"`
}

// Questionnaire_EnableWhen is A structured set of questions intended to guide the collection of answers from
// end-users. Questionnaires provide detailed control over order, presentation,
// phraseology and grouping to allow coherent, consistent data collection.
type Questionnaire_EnableWhen struct {
	// Extensions for operator
	Operator_ext *Element `json:"_operator"`
	// A value that the referenced question is tested using the specified operator in order
	// for the item to be enabled.
	AnswerCoding *Coding `json:"answerCoding"`
	// A value that the referenced question is tested using the specified operator in order
	// for the item to be enabled.
	AnswerReference *Reference `json:"answerReference"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The linkId for the question whose answer (or lack of answer) governs whether this
	// item is enabled.
	Question string `json:"question"`
	// Extensions for question
	Question_ext *Element `json:"_question"`
	// Extensions for answerDecimal
	AnswerDecimal_ext *Element `json:"_answerDecimal"`
	// A value that the referenced question is tested using the specified operator in order
	// for the item to be enabled.
	// pattern ^-?([0]|([1-9][0-9]*))$
	AnswerInteger int64 `json:"answerInteger"`
	// Extensions for answerInteger
	AnswerInteger_ext *Element `json:"_answerInteger"`
	// A value that the referenced question is tested using the specified operator in order
	// for the item to be enabled.
	AnswerQuantity *Quantity `json:"answerQuantity"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A value that the referenced question is tested using the specified operator in order
	// for the item to be enabled.
	// pattern ^true|false$
	AnswerBoolean bool `json:"answerBoolean"`
	// Extensions for answerBoolean
	AnswerBoolean_ext *Element `json:"_answerBoolean"`
	// A value that the referenced question is tested using the specified operator in order
	// for the item to be enabled.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	AnswerDecimal float64 `json:"answerDecimal"`
	// Extensions for answerDate
	AnswerDate_ext *Element `json:"_answerDate"`
	// Extensions for answerTime
	AnswerTime_ext *Element `json:"_answerTime"`
	// Specifies the criteria by which the question is enabled.
	Operator Questionnaire_EnableWhenOperator `json:"operator"`
	// A value that the referenced question is tested using the specified operator in order
	// for the item to be enabled.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	AnswerDate string `json:"answerDate"`
	// A value that the referenced question is tested using the specified operator in order
	// for the item to be enabled.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	AnswerDateTime string `json:"answerDateTime"`
	// Extensions for answerDateTime
	AnswerDateTime_ext *Element `json:"_answerDateTime"`
	// A value that the referenced question is tested using the specified operator in order
	// for the item to be enabled.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	AnswerTime string `json:"answerTime"`
	// A value that the referenced question is tested using the specified operator in order
	// for the item to be enabled.
	// pattern ^[ \r\n\t\S]+$
	AnswerString string `json:"answerString"`
	// Extensions for answerString
	AnswerString_ext *Element `json:"_answerString"`
}

type Questionnaire_EnableWhenOperator string

const (
	Questionnaire_EnableWhenOperatorExists Questionnaire_EnableWhenOperator = "exists"
	Questionnaire_EnableWhenOperatorEq     Questionnaire_EnableWhenOperator = "="
	Questionnaire_EnableWhenOperatorNotEq  Questionnaire_EnableWhenOperator = "!="
	Questionnaire_EnableWhenOperatorGt     Questionnaire_EnableWhenOperator = ">"
	Questionnaire_EnableWhenOperatorLt     Questionnaire_EnableWhenOperator = "<"
	Questionnaire_EnableWhenOperatorGtEq   Questionnaire_EnableWhenOperator = ">="
	Questionnaire_EnableWhenOperatorLtEq   Questionnaire_EnableWhenOperator = "<="
)

// ClinicalImpression_Investigation is A record of a clinical assessment performed to determine what problem(s) may affect
// the patient and before planning the treatments or management strategies that are
// best to manage a patient's condition. Assessments are often 1:1 with a clinical
// consultation / encounter,  but this varies greatly depending on the clinical
// workflow. This resource is called "ClinicalImpression" rather than
// "ClinicalAssessment" to avoid confusion with the recording of assessment tools such
// as Apgar score.
type ClinicalImpression_Investigation struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A name/code for the group ("set") of investigations. Typically, this will be
	// something like "signs", "symptoms", "clinical", "diagnostic", but the list is not
	// constrained, and others such groups such as (exposure|family|travel|nutritional)
	// history may be used.
	Code *CodeableConcept `json:"code,omitempty"`
	// A record of a specific investigation that was undertaken.
	Item []*Reference `json:"item"`
}

// Encounter_StatusHistory is An interaction between a patient and healthcare provider(s) for the purpose of
// providing healthcare service(s) or assessing the health status of a patient.
type Encounter_StatusHistory struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
	Status Encounter_StatusHistoryStatus `json:"status"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The time that the episode was in the specified status.
	Period *Period `json:"period,omitempty"`
}

type Encounter_StatusHistoryStatus string

const (
	Encounter_StatusHistoryStatusPlanned        Encounter_StatusHistoryStatus = "planned"
	Encounter_StatusHistoryStatusArrived        Encounter_StatusHistoryStatus = "arrived"
	Encounter_StatusHistoryStatusTriaged        Encounter_StatusHistoryStatus = "triaged"
	Encounter_StatusHistoryStatusInProgress     Encounter_StatusHistoryStatus = "in-progress"
	Encounter_StatusHistoryStatusOnleave        Encounter_StatusHistoryStatus = "onleave"
	Encounter_StatusHistoryStatusFinished       Encounter_StatusHistoryStatus = "finished"
	Encounter_StatusHistoryStatusCancelled      Encounter_StatusHistoryStatus = "cancelled"
	Encounter_StatusHistoryStatusEnteredInError Encounter_StatusHistoryStatus = "entered-in-error"
	Encounter_StatusHistoryStatusUnknown        Encounter_StatusHistoryStatus = "unknown"
)

// MedicinalProductIndication_OtherTherapy is Indication for the Medicinal Product.
type MedicinalProductIndication_OtherTherapy struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of relationship between the medicinal product indication or
	// contraindication and another therapy.
	TherapyRelationshipType *CodeableConcept `json:"therapyRelationshipType,omitempty"`
	// Reference to a specific medication (active substance, medicinal product or class of
	// products) as part of an indication or contraindication.
	MedicationCodeableConcept *CodeableConcept `json:"medicationCodeableConcept"`
	// Reference to a specific medication (active substance, medicinal product or class of
	// products) as part of an indication or contraindication.
	MedicationReference *Reference `json:"medicationReference"`
}

// ValueSet_Designation is A ValueSet resource instance specifies a set of codes drawn from one or more code
// systems, intended for use in a particular context. Value sets link between
// [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
type ValueSet_Designation struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The language this designation is defined for.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A code that represents types of uses of designations.
	Use *Coding `json:"use"`
	// The text value for this designation.
	Value string `json:"value"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Substance_Ingredient is A homogeneous material with a definite composition.
type Substance_Ingredient struct {
	// Another substance that is a component of this substance.
	SubstanceReference *Reference `json:"substanceReference"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The amount of the ingredient in the substance - a concentration ratio.
	Quantity *Ratio `json:"quantity"`
	// Another substance that is a component of this substance.
	SubstanceCodeableConcept *CodeableConcept `json:"substanceCodeableConcept"`
}

// CapabilityStatement_Rest is A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server
// for a particular version of FHIR that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type CapabilityStatement_Rest struct {
	// Information about the system's restful capabilities that apply across all
	// applications, such as security.
	Documentation string `json:"documentation"`
	// A specification of restful operations supported by the system.
	Interaction []*CapabilityStatement_Interaction1 `json:"interaction"`
	// An absolute URI which is a reference to the definition of a compartment that the
	// system supports. The reference is to a CompartmentDefinition resource by its
	// canonical URL .
	Compartment []string `json:"compartment"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for mode
	Mode_ext *Element `json:"_mode"`
	// Information about security implementation from an interface perspective - what a
	// client needs to know.
	Security *CapabilityStatement_Security `json:"security"`
	// A specification of the restful capabilities of the solution for a specific resource
	// type.
	Resource []*CapabilityStatement_Resource `json:"resource"`
	// Search parameters that are supported for searching all resources for implementations
	// to support and/or make use of - either references to ones defined in the
	// specification, or additional ones defined for/by the implementation.
	SearchParam []*CapabilityStatement_SearchParam `json:"searchParam"`
	// Definition of an operation or a named query together with its parameters and their
	// meaning and type.
	Operation []*CapabilityStatement_Operation `json:"operation"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Identifies whether this portion of the statement is describing the ability to
	// initiate or receive restful operations.
	Mode CapabilityStatement_RestMode `json:"mode"`
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
}

type CapabilityStatement_RestMode string

const (
	CapabilityStatement_RestModeClient CapabilityStatement_RestMode = "client"
	CapabilityStatement_RestModeServer CapabilityStatement_RestMode = "server"
)

// CompartmentDefinition_Resource is A compartment definition that defines how resources are accessed on a server.
type CompartmentDefinition_Resource struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// The name of a search parameter that represents the link to the compartment. More
	// than one may be listed because a resource may be linked to a compartment in more
	// than one way,.
	Param []string `json:"param"`
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The name of a resource supported by the server.
	Code string `json:"code"`
	// Extensions for param
	Param_ext []*Element `json:"_param"`
	// Additional documentation about the resource and compartment.
	Documentation string `json:"documentation"`
}

// ObservationDefinition_QuantitativeDetails is Set of definitional characteristics for a kind of observation or measurement
// produced or consumed by an orderable health care service.
type ObservationDefinition_QuantitativeDetails struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Number of digits after decimal separator when the results of such observations are
	// of type Quantity.
	DecimalPrecision int64 `json:"decimalPrecision"`
	// Extensions for decimalPrecision
	DecimalPrecision_ext *Element `json:"_decimalPrecision"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Customary unit used to report quantitative results of observations conforming to
	// this ObservationDefinition.
	CustomaryUnit *CodeableConcept `json:"customaryUnit"`
	// SI unit used to report quantitative results of observations conforming to this
	// ObservationDefinition.
	Unit *CodeableConcept `json:"unit"`
	// Factor for converting value expressed with SI unit to value expressed with customary
	// unit.
	ConversionFactor float64 `json:"conversionFactor"`
	// Extensions for conversionFactor
	ConversionFactor_ext *Element `json:"_conversionFactor"`
}

// ElementDefinition_Mapping is Captures constraints on each element within the resource, profile, or extension.
type ElementDefinition_Mapping struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// An internal reference to the definition of a mapping.
	Identity string `json:"identity"`
	// Extensions for identity
	Identity_ext *Element `json:"_identity"`
	// Identifies the computable language in which mapping.map is expressed.
	Language string `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Expresses what part of the target specification corresponds to this element.
	Map string `json:"map"`
	// Extensions for map
	Map_ext *Element `json:"_map"`
	// Comments that provide information about the mapping or its use.
	Comment string `json:"comment"`
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// ImplementationGuide_DependsOn is A set of rules of how a particular interoperability or standards problem is solved -
// typically through the use of FHIR resources. This resource is used to gather all the
// parts of an implementation guide into a logical whole and to publish a computable
// definition of all the parts.
type ImplementationGuide_DependsOn struct {
	// Extensions for version
	Version_ext *Element `json:"_version"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A canonical reference to the Implementation guide for the dependency.
	Uri string `json:"uri,omitempty"`
	// The NPM package name for the Implementation Guide that this IG depends on.
	PackageId string `json:"packageId"`
	// Extensions for packageId
	PackageId_ext *Element `json:"_packageId"`
	// The version of the IG that is depended on, when the correct version is required to
	// understand the IG correctly.
	Version string `json:"version"`
}

// ImplementationGuide_Page is A set of rules of how a particular interoperability or standards problem is solved -
// typically through the use of FHIR resources. This resource is used to gather all the
// parts of an implementation guide into a logical whole and to publish a computable
// definition of all the parts.
type ImplementationGuide_Page struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The source address for the page.
	// pattern ^\S*$
	NameUrl string `json:"nameUrl"`
	// A short title used to represent this page in navigational structures such as table
	// of contents, bread crumbs, etc.
	Title string `json:"title"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for nameUrl
	NameUrl_ext *Element `json:"_nameUrl"`
	// The source address for the page.
	NameReference *Reference `json:"nameReference"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// A code that indicates how the page is generated.
	Generation ImplementationGuide_PageGeneration `json:"generation"`
	// Extensions for generation
	Generation_ext *Element `json:"_generation"`
	// Nested Pages/Sections under this page.
	Page []*ImplementationGuide_Page `json:"page"`
}

type ImplementationGuide_PageGeneration string

const (
	ImplementationGuide_PageGenerationHtml      ImplementationGuide_PageGeneration = "html"
	ImplementationGuide_PageGenerationMarkdown  ImplementationGuide_PageGeneration = "markdown"
	ImplementationGuide_PageGenerationXml       ImplementationGuide_PageGeneration = "xml"
	ImplementationGuide_PageGenerationGenerated ImplementationGuide_PageGeneration = "generated"
)

// SubstanceSpecification_Code is The detailed description of a substance, typically at a level beyond what is used
// for prescribing.
type SubstanceSpecification_Code struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The specific code.
	Code *CodeableConcept `json:"code"`
	// Status of the code assignment.
	Status *CodeableConcept `json:"status"`
	// The date at which the code status is changed as part of the terminology maintenance.
	StatusDate string `json:"statusDate"`
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// Supporting literature.
	Source []*Reference `json:"source"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for statusDate
	StatusDate_ext *Element `json:"_statusDate"`
	// Any comment can be provided in this field, if necessary.
	Comment string `json:"comment"`
}

// Device_UdiCarrier is A type of a manufactured item that is used in the provision of healthcare without
// being substantially changed through that activity. The device may be a medical or
// non-medical device.
type Device_UdiCarrier struct {
	// The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies
	// the labeler and the specific version or model of a device.
	DeviceIdentifier string `json:"deviceIdentifier"`
	// Extensions for issuer
	Issuer_ext *Element `json:"_issuer"`
	// The identity of the authoritative source for UDI generation within a  jurisdiction.
	// All UDIs are globally unique within a single namespace with the appropriate
	// repository uri as the system.  For example,  UDIs of devices managed in the U.S. by
	// the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda-udi.
	Jurisdiction string `json:"jurisdiction"`
	// The full UDI carrier of the Automatic Identification and Data Capture (AIDC)
	// technology representation of the barcode string as printed on the packaging of the
	// device - e.g., a barcode or RFID.   Because of limitations on character sets in XML
	// and the need to round-trip JSON data through XML, AIDC Formats *SHALL* be base64
	// encoded.
	CarrierAIDC base64Binary `json:"carrierAIDC"`
	// The full UDI carrier as the human readable form (HRF) representation of the barcode
	// string as printed on the packaging of the device.
	CarrierHRF string `json:"carrierHRF"`
	// Extensions for entryType
	EntryType_ext *Element `json:"_entryType"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for jurisdiction
	Jurisdiction_ext *Element `json:"_jurisdiction"`
	// Extensions for carrierHRF
	CarrierHRF_ext *Element `json:"_carrierHRF"`
	// Extensions for carrierAIDC
	CarrierAIDC_ext *Element `json:"_carrierAIDC"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for deviceIdentifier
	DeviceIdentifier_ext *Element `json:"_deviceIdentifier"`
	// Organization that is charged with issuing UDIs for devices.  For example, the US FDA
	// issuers include :
	// 1) GS1:
	// http://hl7.org/fhir/NamingSystem/gs1-di,
	// 2) HIBCC:
	// http://hl7.org/fhir/NamingSystem/hibcc-dI,
	// 3) ICCBBA for blood containers:
	// http://hl7.org/fhir/NamingSystem/iccbba-blood-di,
	// 4) ICCBA for other devices:
	// http://hl7.org/fhir/NamingSystem/iccbba-other-di.
	Issuer string `json:"issuer"`
	// A coded entry to indicate how the data was entered.
	EntryType Device_UdiCarrierEntryType `json:"entryType"`
}

type Device_UdiCarrierEntryType string

const (
	Device_UdiCarrierEntryTypeBarcode      Device_UdiCarrierEntryType = "barcode"
	Device_UdiCarrierEntryTypeRfid         Device_UdiCarrierEntryType = "rfid"
	Device_UdiCarrierEntryTypeManual       Device_UdiCarrierEntryType = "manual"
	Device_UdiCarrierEntryTypeCard         Device_UdiCarrierEntryType = "card"
	Device_UdiCarrierEntryTypeSelfReported Device_UdiCarrierEntryType = "self-reported"
	Device_UdiCarrierEntryTypeUnknown      Device_UdiCarrierEntryType = "unknown"
)

// MedicationRequest_Substitution is An order or request for both supply of the medication and the instructions for
// administration of the medication to a patient. The resource is called
// "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to
// generalize the use across inpatient and outpatient settings, including care plans,
// etc., and to harmonize with workflow patterns.
type MedicationRequest_Substitution struct {
	// True if the prescriber allows a different drug to be dispensed from what was
	// prescribed.
	// pattern ^true|false$
	AllowedBoolean bool `json:"allowedBoolean"`
	// Extensions for allowedBoolean
	AllowedBoolean_ext *Element `json:"_allowedBoolean"`
	// True if the prescriber allows a different drug to be dispensed from what was
	// prescribed.
	AllowedCodeableConcept *CodeableConcept `json:"allowedCodeableConcept"`
	// Indicates the reason for the substitution, or why substitution must or must not be
	// performed.
	Reason *CodeableConcept `json:"reason"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// MedicinalProductIngredient_Strength is An ingredient of a manufactured item or pharmaceutical product.
type MedicinalProductIngredient_Strength struct {
	// The quantity of substance in the unit of presentation, or in the volume (or mass) of
	// the single pharmaceutical product or manufactured item.
	Presentation *Ratio `json:"presentation,omitempty"`
	// Extensions for measurementPoint
	MeasurementPoint_ext *Element `json:"_measurementPoint"`
	// The country or countries for which the strength range applies.
	Country []*CodeableConcept `json:"country"`
	// Strength expressed in terms of a reference substance.
	ReferenceStrength []*MedicinalProductIngredient_ReferenceStrength `json:"referenceStrength"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// For when strength is measured at a particular point or distance.
	MeasurementPoint string `json:"measurementPoint"`
	// A lower limit for the quantity of substance in the unit of presentation. For use
	// when there is a range of strengths, this is the lower limit, with the presentation
	// attribute becoming the upper limit.
	PresentationLowLimit *Ratio `json:"presentationLowLimit"`
	// The strength per unitary volume (or mass).
	Concentration *Ratio `json:"concentration"`
	// A lower limit for the strength per unitary volume (or mass), for when there is a
	// range. The concentration attribute then becomes the upper limit.
	ConcentrationLowLimit *Ratio `json:"concentrationLowLimit"`
}

// NutritionOrder_Texture is A request to supply a diet, formula feeding (enteral) or oral nutritional supplement
// to a patient/resident.
type NutritionOrder_Texture struct {
	// Any texture modifications (for solid foods) that should be made, e.g. easy to chew,
	// chopped, ground, and pureed.
	Modifier *CodeableConcept `json:"modifier"`
	// The food type(s) (e.g. meats, all foods)  that the texture modification applies to.
	// This could be all foods types.
	FoodType *CodeableConcept `json:"foodType"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// ResearchStudy_Arm is A process where a researcher or organization plans and then executes a series of
// steps intended to increase the field of healthcare-related knowledge.  This includes
// studies of safety, efficacy, comparative effectiveness and other information about
// medications, devices, therapies and other interventional and investigative
// techniques.  A ResearchStudy involves the gathering of information about human or
// animal subjects.
type ResearchStudy_Arm struct {
	// A succinct description of the path through the study that would be followed by a
	// subject adhering to this arm.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Unique, human-readable label for this arm of the study.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Categorization of study arm, e.g. experimental, active comparator, placebo
	// comparater.
	Type *CodeableConcept `json:"type"`
}

// ExplanationOfBenefit_Diagnosis is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_Diagnosis struct {
	// The nature of illness or problem in a coded form or as a reference to an external
	// defined Condition.
	DiagnosisReference *Reference `json:"diagnosisReference"`
	// When the condition was observed or the relative ranking.
	Type []*CodeableConcept `json:"type"`
	// A package billing code or bundle code used to group products and services to a
	// particular health condition (such as heart attack) which is based on a predetermined
	// grouping code system.
	PackageCode *CodeableConcept `json:"packageCode"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// A number to uniquely identify diagnosis entries.
	Sequence uint64 `json:"sequence"`
	// The nature of illness or problem in a coded form or as a reference to an external
	// defined Condition.
	DiagnosisCodeableConcept *CodeableConcept `json:"diagnosisCodeableConcept"`
	// Indication of whether the diagnosis was present on admission to a facility.
	OnAdmission *CodeableConcept `json:"onAdmission"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
}

// HealthcareService_Eligibility is The details of a healthcare service available at a location.
type HealthcareService_Eligibility struct {
	// Coded value for the eligibility.
	Code *CodeableConcept `json:"code"`
	// Describes the eligibility conditions for the service.
	Comment string `json:"comment"`
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// Identifier is An identifier - identifies some entity uniquely and unambiguously. Typically this is
// used for business identifiers.
type Identifier struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The purpose of this identifier.
	Use IdentifierUse `json:"use"`
	// Establishes the namespace for the value - that is, a URL that describes a set values
	// that are unique.
	System string `json:"system"`
	// Extensions for system
	System_ext *Element `json:"_system"`
	// The portion of the identifier typically relevant to the user and which is unique
	// within the context of the system.
	Value string `json:"value"`
	// Organization that issued/manages the identifier.
	Assigner *Reference `json:"assigner"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for use
	Use_ext *Element `json:"_use"`
	// A coded type for the identifier that can be used to determine which identifier to
	// use for a specific purpose.
	Type *CodeableConcept `json:"type"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// Time period during which identifier is/was valid for use.
	Period *Period `json:"period"`
}

type IdentifierUse string

const (
	IdentifierUseUsual     IdentifierUse = "usual"
	IdentifierUseOfficial  IdentifierUse = "official"
	IdentifierUseTemp      IdentifierUse = "temp"
	IdentifierUseSecondary IdentifierUse = "secondary"
	IdentifierUseOld       IdentifierUse = "old"
)

// Bundle_Response is A container for a collection of resources.
type Bundle_Response struct {
	// An OperationOutcome containing hints and warnings produced as part of processing
	// this entry in a batch or transaction.
	Outcome *ResourceList `json:"outcome"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The status code returned by processing this entry. The status SHALL start with a 3
	// digit HTTP code (e.g. 404) and may contain the standard HTTP description associated
	// with the status code.
	Status string `json:"status"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The Etag for the resource, if the operation for the entry produced a versioned
	// resource (see [Resource Metadata and Versioning](http.html#versioning) and [Managing
	// Resource Contention](http.html#concurrency)).
	Etag string `json:"etag"`
	// Extensions for etag
	Etag_ext *Element `json:"_etag"`
	// The date/time that the resource was modified on the server.
	LastModified string `json:"lastModified"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The location header created by processing this operation, populated if the operation
	// returns a location.
	Location string `json:"location"`
	// Extensions for location
	Location_ext *Element `json:"_location"`
	// Extensions for lastModified
	LastModified_ext *Element `json:"_lastModified"`
}

// CarePlan_Detail is Describes the intention of how one or more practitioners intend to deliver care for
// a particular patient, group or community for a period of time, possibly limited to
// care for a specific condition or set of conditions.
type CarePlan_Detail struct {
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// Extensions for kind
	Kind_ext *Element `json:"_kind"`
	// The URL pointing to an externally maintained protocol, guideline, questionnaire or
	// other definition that is adhered to in whole or in part by this CarePlan activity.
	InstantiatesUri []string `json:"instantiatesUri"`
	// Identifies what progress is being made for the specific activity.
	Status CarePlan_DetailStatus `json:"status"`
	// Identifies the facility where the activity will occur; e.g. home, hospital, specific
	// clinic, etc.
	Location *Reference `json:"location"`
	// Identifies the food, drug or other product to be consumed or supplied in the
	// activity.
	ProductReference *Reference `json:"productReference"`
	// A description of the kind of resource the in-line definition of a care plan activity
	// is representing.  The CarePlan.activity.detail is an in-line definition when a
	// resource is not referenced using CarePlan.activity.reference.  For example, a
	// MedicationRequest, a ServiceRequest, or a CommunicationRequest.
	Kind string `json:"kind"`
	// The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other
	// definition that is adhered to in whole or in part by this CarePlan activity.
	InstantiatesCanonical []string `json:"instantiatesCanonical"`
	// Extensions for instantiatesUri
	InstantiatesUri_ext []*Element `json:"_instantiatesUri"`
	// Provides the rationale that drove the inclusion of this particular activity as part
	// of the plan or the reason why the activity was prohibited.
	ReasonCode []*CodeableConcept `json:"reasonCode"`
	// Extensions for doNotPerform
	DoNotPerform_ext *Element `json:"_doNotPerform"`
	// The period, timing or frequency upon which the described activity is to occur.
	ScheduledPeriod *Period `json:"scheduledPeriod"`
	// The period, timing or frequency upon which the described activity is to occur.
	// pattern ^[ \r\n\t\S]+$
	ScheduledString string `json:"scheduledString"`
	// Identifies the food, drug or other product to be consumed or supplied in the
	// activity.
	ProductCodeableConcept *CodeableConcept `json:"productCodeableConcept"`
	// Identifies the quantity expected to be supplied, administered or consumed by the
	// subject.
	Quantity *Quantity `json:"quantity"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// If true, indicates that the described activity is one that must NOT be engaged in
	// when following the plan.  If false, or missing, indicates that the described
	// activity is one that should be engaged in when following the plan.
	DoNotPerform bool `json:"doNotPerform"`
	// Indicates another resource, such as the health condition(s), whose existence
	// justifies this request and drove the inclusion of this particular activity as part
	// of the plan.
	ReasonReference []*Reference `json:"reasonReference"`
	// Provides reason why the activity isn't yet started, is on hold, was cancelled, etc.
	StatusReason *CodeableConcept `json:"statusReason"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Detailed description of the type of planned activity; e.g. what lab test, what
	// procedure, what kind of encounter.
	Code *CodeableConcept `json:"code"`
	// The period, timing or frequency upon which the described activity is to occur.
	ScheduledTiming *Timing `json:"scheduledTiming"`
	// Identifies the quantity expected to be consumed in a given day.
	DailyAmount *Quantity `json:"dailyAmount"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Internal reference that identifies the goals that this activity is intended to
	// contribute towards meeting.
	Goal []*Reference `json:"goal"`
	// Extensions for scheduledString
	ScheduledString_ext *Element `json:"_scheduledString"`
	// Identifies who's expected to be involved in the activity.
	Performer []*Reference `json:"performer"`
	// This provides a textual description of constraints on the intended activity
	// occurrence, including relation to other activities.  It may also include objectives,
	// pre-conditions and end-conditions.  Finally, it may convey specifics about the
	// activity such as body site, method, route, etc.
	Description string `json:"description"`
}

type CarePlan_DetailStatus string

const (
	CarePlan_DetailStatusNotStarted     CarePlan_DetailStatus = "not-started"
	CarePlan_DetailStatusScheduled      CarePlan_DetailStatus = "scheduled"
	CarePlan_DetailStatusInProgress     CarePlan_DetailStatus = "in-progress"
	CarePlan_DetailStatusOnHold         CarePlan_DetailStatus = "on-hold"
	CarePlan_DetailStatusCompleted      CarePlan_DetailStatus = "completed"
	CarePlan_DetailStatusCancelled      CarePlan_DetailStatus = "cancelled"
	CarePlan_DetailStatusStopped        CarePlan_DetailStatus = "stopped"
	CarePlan_DetailStatusUnknown        CarePlan_DetailStatus = "unknown"
	CarePlan_DetailStatusEnteredInError CarePlan_DetailStatus = "entered-in-error"
)

// Claim_Accident is A provider issued list of professional services and products which have been
// provided, or are to be provided, to a patient which is sent to an insurer for
// reimbursement.
type Claim_Accident struct {
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// The type or context of the accident event for the purposes of selection of potential
	// insurance coverages and determination of coordination between insurers.
	Type *CodeableConcept `json:"type"`
	// The physical location of the accident event.
	LocationAddress *Address `json:"locationAddress"`
	// The physical location of the accident event.
	LocationReference *Reference `json:"locationReference"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Date of an accident event  related to the products and services contained in the
	// claim.
	Date string `json:"date"`
}

// SubstanceSpecification_Isotope is The detailed description of a substance, typically at a level beyond what is used
// for prescribing.
type SubstanceSpecification_Isotope struct {
	// The molecular weight or weight range (for proteins, polymers or nucleic acids).
	MolecularWeight *SubstanceSpecification_MolecularWeight `json:"molecularWeight"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Substance identifier for each non-natural or radioisotope.
	Identifier *Identifier `json:"identifier"`
	// Substance name for each non-natural or radioisotope.
	Name *CodeableConcept `json:"name"`
	// The type of isotopic substitution present in a single substance.
	Substitution *CodeableConcept `json:"substitution"`
	// Half life - for a non-natural nuclide.
	HalfLife *Quantity `json:"halfLife"`
}

// TestReport_Teardown is A summary of information based on the results of executing a TestScript.
type TestReport_Teardown struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The teardown action will only contain an operation.
	Action []*TestReport_Action2 `json:"action,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// DataRequirement_CodeFilter is Describes a required data item for evaluation in terms of the type of data, and
// optional code or date-based filters of the data.
type DataRequirement_CodeFilter struct {
	// Extensions for path
	Path_ext *Element `json:"_path"`
	// Extensions for searchParam
	SearchParam_ext *Element `json:"_searchParam"`
	// The valueset for the code filter. The valueSet and code elements are additive. If
	// valueSet is specified, the filter will return only those data items for which the
	// value of the code-valued element specified in the path is a member of the specified
	// valueset.
	ValueSet string `json:"valueSet"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The code-valued attribute of the filter. The specified path SHALL be a FHIRPath
	// resolveable on the specified type of the DataRequirement, and SHALL consist only of
	// identifiers, constant indexers, and .resolve(). The path is allowed to contain
	// qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse
	// multiple-cardinality sub-elements (see the [Simple FHIRPath
	// Profile](fhirpath.html#simple) for full details). Note that the index must be an
	// integer constant. The path must resolve to an element of type code, Coding, or
	// CodeableConcept.
	Path string `json:"path"`
	// A token parameter that refers to a search parameter defined on the specified type of
	// the DataRequirement, and which searches on elements of type code, Coding, or
	// CodeableConcept.
	SearchParam string `json:"searchParam"`
	// The codes for the code filter. If values are given, the filter will return only
	// those data items for which the code-valued attribute specified by the path has a
	// value that is one of the specified codes. If codes are specified in addition to a
	// value set, the filter returns items matching a code in the value set or one of the
	// specified codes.
	Code []*Coding `json:"code"`
}

// MeasureReport_Population is The MeasureReport resource contains the results of the calculation of a measure; and
// optionally a reference to the resources involved in that calculation.
type MeasureReport_Population struct {
	// The number of members of the population.
	Count int64 `json:"count"`
	// Extensions for count
	Count_ext *Element `json:"_count"`
	// This element refers to a List of subject level MeasureReport resources, one for each
	// subject in this population.
	SubjectResults *Reference `json:"subjectResults"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of the population.
	Code *CodeableConcept `json:"code"`
}

// MeasureReport_Population1 is The MeasureReport resource contains the results of the calculation of a measure; and
// optionally a reference to the resources involved in that calculation.
type MeasureReport_Population1 struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of the population.
	Code *CodeableConcept `json:"code"`
	// The number of members of the population in this stratum.
	Count int64 `json:"count"`
	// Extensions for count
	Count_ext *Element `json:"_count"`
	// This element refers to a List of subject level MeasureReport resources, one for each
	// subject in this population in this stratum.
	SubjectResults *Reference `json:"subjectResults"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// UsageContext is Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or
// categorize an artifact. This metadata can either be specific to the applicable
// population (e.g., age category, DRG) or the specific context of care (e.g., venue,
// care setting, provider of care).
type UsageContext struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A code that identifies the type of context being specified by this usage context.
	Code *Coding `json:"code,omitempty"`
	// A value that defines the context specified in this context of use. The
	// interpretation of the value is defined by the code.
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept"`
	// A value that defines the context specified in this context of use. The
	// interpretation of the value is defined by the code.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// A value that defines the context specified in this context of use. The
	// interpretation of the value is defined by the code.
	ValueRange *Range `json:"valueRange"`
	// A value that defines the context specified in this context of use. The
	// interpretation of the value is defined by the code.
	ValueReference *Reference `json:"valueReference"`
}

// Claim_Insurance is A provider issued list of professional services and products which have been
// provided, or are to be provided, to a patient which is sent to an insurer for
// reimbursement.
type Claim_Insurance struct {
	// A flag to indicate that this Coverage is to be used for adjudication of this claim
	// when set to true.
	Focal bool `json:"focal"`
	// The business identifier to be used when the claim is sent for adjudication against
	// this insurance policy.
	Identifier *Identifier `json:"identifier"`
	// Reference to the insurance card level information contained in the Coverage
	// resource. The coverage issuing insurer will use these details to locate the
	// patient's actual coverage within the insurer's information system.
	Coverage *Reference `json:"coverage,omitempty"`
	// Extensions for businessArrangement
	BusinessArrangement_ext *Element `json:"_businessArrangement"`
	// A number to uniquely identify insurance entries and provide a sequence of coverages
	// to convey coordination of benefit order.
	Sequence uint64 `json:"sequence"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// Extensions for focal
	Focal_ext *Element `json:"_focal"`
	// Extensions for preAuthRef
	PreAuthRef_ext []*Element `json:"_preAuthRef"`
	// The result of the adjudication of the line items for the Coverage specified in this
	// insurance.
	ClaimResponse *Reference `json:"claimResponse"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Reference numbers previously provided by the insurer to the provider to be quoted on
	// subsequent claims containing services or products related to the prior authorization.
	PreAuthRef []string `json:"preAuthRef"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A business agreement number established between the provider and the insurer for
	// special business processing purposes.
	BusinessArrangement string `json:"businessArrangement"`
}

// ExplanationOfBenefit_SupportingInfo is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_SupportingInfo struct {
	// Additional data or information such as resources, documents, images etc. including
	// references to the data or the actual inclusion of the data.
	ValueAttachment *Attachment `json:"valueAttachment"`
	// Additional data or information such as resources, documents, images etc. including
	// references to the data or the actual inclusion of the data.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// Additional data or information such as resources, documents, images etc. including
	// references to the data or the actual inclusion of the data.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// Additional data or information such as resources, documents, images etc. including
	// references to the data or the actual inclusion of the data.
	ValueReference *Reference `json:"valueReference"`
	// System and code pertaining to the specific information regarding special conditions
	// relating to the setting, treatment or patient  for which care is sought.
	Code *CodeableConcept `json:"code"`
	// Extensions for timingDate
	TimingDate_ext *Element `json:"_timingDate"`
	// A number to uniquely identify supporting information entries.
	Sequence uint64 `json:"sequence"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// The date when or period to which this information refers.
	TimingPeriod *Period `json:"timingPeriod"`
	// Additional data or information such as resources, documents, images etc. including
	// references to the data or the actual inclusion of the data.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The date when or period to which this information refers.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	TimingDate string `json:"timingDate"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// Provides the reason in the situation where a reason code is required in addition to
	// the content.
	Reason *Coding `json:"reason"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The general class of the information supplied: information; exception; accident,
	// employment; onset, etc.
	Category *CodeableConcept `json:"category,omitempty"`
}

// StructureMap_Input is A Map of relationships between 2 structures that can be used to transform data.
type StructureMap_Input struct {
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Mode for this instance of data.
	Mode StructureMap_InputMode `json:"mode"`
	// Extensions for mode
	Mode_ext *Element `json:"_mode"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Documentation for this instance of data.
	Documentation string `json:"documentation"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Name for this instance of data.
	Name string `json:"name"`
	// Type for this instance of data.
	Type string `json:"type"`
}

type StructureMap_InputMode string

const (
	StructureMap_InputModeSource StructureMap_InputMode = "source"
	StructureMap_InputModeTarget StructureMap_InputMode = "target"
)

// Bundle_Entry is A container for a collection of resources.
type Bundle_Entry struct {
	// The Resource for the entry. The purpose/meaning of the resource is determined by the
	// Bundle.type.
	Resource *ResourceList `json:"resource"`
	// Indicates the results of processing the corresponding 'request' entry in the batch
	// or transaction being responded to or what the results of an operation where when
	// returning history.
	Response *Bundle_Response `json:"response"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for fullUrl
	FullUrl_ext *Element `json:"_fullUrl"`
	// A series of links that provide context to this entry.
	Link []*Bundle_Link `json:"link"`
	// The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id in
	// the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be
	// version-independent URL consistent with the Resource.id. The fullUrl is a version
	// independent reference to the resource. The fullUrl element SHALL have a value except
	// that:
	// * fullUrl can be empty on a POST (although it does not need to when specifying a
	// temporary id for reference in the bundle)
	// * Results from operations might involve resources that are not identified.
	FullUrl string `json:"fullUrl"`
	// Information about the search process that lead to the creation of this entry.
	Search *Bundle_Search `json:"search"`
	// Additional information about how this entry should be processed as part of a
	// transaction or batch.  For history, it shows how the entry was processed to create
	// the version contained in the entry.
	Request *Bundle_Request `json:"request"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Claim_Detail is A provider issued list of professional services and products which have been
// provided, or are to be provided, to a patient which is sent to an insurer for
// reimbursement.
type Claim_Detail struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// The type of revenue or cost center providing the product and/or service.
	Revenue *CodeableConcept `json:"revenue"`
	// A claim detail line. Either a simple (a product or service) or a 'group' of
	// sub-details which are simple items.
	SubDetail []*Claim_SubDetail `json:"subDetail"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Code to identify the general type of benefits under which products and services are
	// provided.
	Category *CodeableConcept `json:"category"`
	// A real number that represents a multiplier used in determining the overall value of
	// services delivered and/or goods received. The concept of a Factor allows for a
	// discount or surcharge multiplier to be applied to a monetary amount.
	Factor float64 `json:"factor"`
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
	// Unique Device Identifiers associated with this line item.
	Udi []*Reference `json:"udi"`
	// A number to uniquely identify item entries.
	Sequence uint64 `json:"sequence"`
	// Item typification or modifiers codes to convey additional context for the product or
	// service.
	Modifier []*CodeableConcept `json:"modifier"`
	// Identifies the program under which this may be recovered.
	ProgramCode []*CodeableConcept `json:"programCode"`
	// When the value is a group code then this item collects a set of related claim
	// details, otherwise this contains the product, service, drug or other billing code
	// for the item.
	ProductOrService *CodeableConcept `json:"productOrService,omitempty"`
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity"`
	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *Money `json:"unitPrice"`
	// The quantity times the unit price for an additional service or product or charge.
	Net *Money `json:"net"`
}

// InsurancePlan_Cost is Details of a Health Insurance product/plan provided by an organization.
type InsurancePlan_Cost struct {
	// The actual cost value. (some of the costs may be represented as percentages rather
	// than currency, e.g. 10% coinsurance).
	Value *Quantity `json:"value"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Type of cost (copay; individual cap; family cap; coinsurance; deductible).
	Type *CodeableConcept `json:"type,omitempty"`
	// Whether the cost applies to in-network or out-of-network providers (in-network;
	// out-of-network; other).
	Applicability *CodeableConcept `json:"applicability"`
	// Additional information about the cost, such as information about funding sources
	// (e.g. HSA, HRA, FSA, RRA).
	Qualifiers []*CodeableConcept `json:"qualifiers"`
}

// NutritionOrder_OralDiet is A request to supply a diet, formula feeding (enteral) or oral nutritional supplement
// to a patient/resident.
type NutritionOrder_OralDiet struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The kind of diet or dietary restriction such as fiber restricted diet or diabetic
	// diet.
	Type []*CodeableConcept `json:"type"`
	// The time period and frequency at which the diet should be given.  The diet should be
	// given for the combination of all schedules if more than one schedule is present.
	Schedule []*Timing `json:"schedule"`
	// Class that defines the quantity and type of nutrient modifications (for example
	// carbohydrate, fiber or sodium) required for the oral diet.
	Nutrient []*NutritionOrder_Nutrient `json:"nutrient"`
	// Class that describes any texture modifications required for the patient to safely
	// consume various types of solid foods.
	Texture []*NutritionOrder_Texture `json:"texture"`
	// The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of
	// liquids or fluids served to the patient.
	FluidConsistencyType []*CodeableConcept `json:"fluidConsistencyType"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Free text or additional instructions or information pertaining to the oral diet.
	Instruction string `json:"instruction"`
	// Extensions for instruction
	Instruction_ext *Element `json:"_instruction"`
}

// OperationDefinition_ReferencedFrom is A formal computable definition of an operation (on the RESTful interface) or a named
// query (using the search interaction).
type OperationDefinition_ReferencedFrom struct {
	// The id of the element in the referencing resource that is expected to resolve to
	// this resource.
	SourceId string `json:"sourceId"`
	// Extensions for sourceId
	SourceId_ext *Element `json:"_sourceId"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The name of the parameter or dot-separated path of parameter names pointing to the
	// resource parameter that is expected to contain a reference to this resource.
	Source string `json:"source"`
	// Extensions for source
	Source_ext *Element `json:"_source"`
}

// base64Binary is A stream of bytes
type base64Binary struct {
}

// Claim_Related is A provider issued list of professional services and products which have been
// provided, or are to be provided, to a patient which is sent to an insurer for
// reimbursement.
type Claim_Related struct {
	// An alternate organizational reference to the case or file to which this particular
	// claim pertains.
	Reference *Identifier `json:"reference"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Reference to a related claim.
	Claim *Reference `json:"claim"`
	// A code to convey how the claims are related.
	Relationship *CodeableConcept `json:"relationship"`
}

// CoverageEligibilityResponse_Insurance is This resource provides eligibility and plan details from the processing of an
// CoverageEligibilityRequest resource.
type CoverageEligibilityResponse_Insurance struct {
	// Flag indicating if the coverage provided is inforce currently if no service date(s)
	// specified or for the whole duration of the service dates.
	Inforce bool `json:"inforce"`
	// Extensions for inforce
	Inforce_ext *Element `json:"_inforce"`
	// The term of the benefits documented in this response.
	BenefitPeriod *Period `json:"benefitPeriod"`
	// Benefits and optionally current balances, and authorization details by category or
	// service.
	Item []*CoverageEligibilityResponse_Item `json:"item"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Reference to the insurance card level information contained in the Coverage
	// resource. The coverage issuing insurer will use these details to locate the
	// patient's actual coverage within the insurer's information system.
	Coverage *Reference `json:"coverage,omitempty"`
}

// MedicationKnowledge_MedicineClassification is Information about a medication that is used to support knowledge.
type MedicationKnowledge_MedicineClassification struct {
	// The type of category for the medication (for example, therapeutic classification,
	// therapeutic sub-classification).
	Type *CodeableConcept `json:"type,omitempty"`
	// Specific category assigned to the medication (e.g. anti-infective,
	// anti-hypertensive, antibiotic, etc.).
	Classification []*CodeableConcept `json:"classification"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// PlanDefinition_Action is This resource allows for the definition of various types of plans as a sharable,
// consumable, and executable artifact. The resource is general enough to support the
// description of a broad range of clinical artifacts such as clinical decision support
// rules, order sets and protocols.
type PlanDefinition_Action struct {
	// Sub actions that are contained within the action. The behavior of this action
	// determines the functionality of the sub-actions. For example, a selection behavior
	// of at-most-one indicates that of the sub-actions, at most one may be chosen as part
	// of realizing the action definition.
	Action []*PlanDefinition_Action `json:"action"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// A brief description of the action used to provide a summary to display to the user.
	Description string `json:"description"`
	// A relationship to another action such as "before" or "30-60 minutes after start of".
	RelatedAction []*PlanDefinition_RelatedAction `json:"relatedAction"`
	// Extensions for timingDateTime
	TimingDateTime_ext *Element `json:"_timingDateTime"`
	// Extensions for requiredBehavior
	RequiredBehavior_ext *Element `json:"_requiredBehavior"`
	// Extensions for definitionUri
	DefinitionUri_ext *Element `json:"_definitionUri"`
	// The title of the action displayed to a user.
	Title string `json:"title"`
	// Didactic or other informational resources associated with the action that can be
	// provided to the CDS recipient. Information resources can include inline text
	// commentary and links to web resources.
	Documentation []*RelatedArtifact `json:"documentation"`
	// A description of when the action should be triggered.
	Trigger []*TriggerDefinition `json:"trigger"`
	// Indicates who should participate in performing the action described.
	Participant []*PlanDefinition_Participant `json:"participant"`
	// Defines the grouping behavior for the action and its children.
	GroupingBehavior PlanDefinition_ActionGroupingBehavior `json:"groupingBehavior"`
	// Extensions for selectionBehavior
	SelectionBehavior_ext *Element `json:"_selectionBehavior"`
	// Extensions for cardinalityBehavior
	CardinalityBehavior_ext *Element `json:"_cardinalityBehavior"`
	// A reference to an ActivityDefinition that describes the action to be taken in
	// detail, or a PlanDefinition that describes a series of actions to be taken.
	// pattern ^\S*$
	DefinitionUri string `json:"definitionUri"`
	// Extensions for textEquivalent
	TextEquivalent_ext *Element `json:"_textEquivalent"`
	// Extensions for priority
	Priority_ext *Element `json:"_priority"`
	// A code that provides meaning for the action or action group. For example, a section
	// may have a LOINC code for the section of a documentation template.
	Code []*CodeableConcept `json:"code"`
	// A description of why this action is necessary or appropriate.
	Reason []*CodeableConcept `json:"reason"`
	// Defines the outputs of the action, if any.
	Output []*DataRequirement `json:"output"`
	// Defines the selection behavior for the action and its children.
	SelectionBehavior PlanDefinition_ActionSelectionBehavior `json:"selectionBehavior"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for prefix
	Prefix_ext *Element `json:"_prefix"`
	// Identifies goals that this action supports. The reference must be to a goal element
	// defined within this plan definition.
	GoalId []string `json:"goalId"`
	// Extensions for goalId
	GoalId_ext []*Element `json:"_goalId"`
	// An optional value describing when the action should be performed.
	TimingTiming *Timing `json:"timingTiming"`
	// Customizations that should be applied to the statically defined resource. For
	// example, if the dosage of a medication must be computed based on the patient's
	// weight, a customization would be used to specify an expression that calculated the
	// weight, and the path on the resource that would contain the result.
	DynamicValue []*PlanDefinition_DynamicValue `json:"dynamicValue"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// An optional value describing when the action should be performed.
	TimingAge *Age `json:"timingAge"`
	// An optional value describing when the action should be performed.
	TimingPeriod *Period `json:"timingPeriod"`
	// The type of action to perform (create, update, remove).
	Type *CodeableConcept `json:"type"`
	// Defines whether the action can be selected multiple times.
	CardinalityBehavior PlanDefinition_ActionCardinalityBehavior `json:"cardinalityBehavior"`
	// Extensions for definitionCanonical
	DefinitionCanonical_ext *Element `json:"_definitionCanonical"`
	// Defines whether the action should usually be preselected.
	PrecheckBehavior PlanDefinition_ActionPrecheckBehavior `json:"precheckBehavior"`
	// Extensions for precheckBehavior
	PrecheckBehavior_ext *Element `json:"_precheckBehavior"`
	// Indicates how quickly the action should be addressed with respect to other actions.
	Priority string `json:"priority"`
	// A code or group definition that describes the intended subject of the action and its
	// children, if any.
	SubjectReference *Reference `json:"subjectReference"`
	// An expression that describes applicability criteria or start/stop conditions for the
	// action.
	Condition []*PlanDefinition_Condition `json:"condition"`
	// An optional value describing when the action should be performed.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	TimingDateTime string `json:"timingDateTime"`
	// An optional value describing when the action should be performed.
	TimingRange *Range `json:"timingRange"`
	// Extensions for groupingBehavior
	GroupingBehavior_ext *Element `json:"_groupingBehavior"`
	// A reference to a StructureMap resource that defines a transform that can be executed
	// to produce the intent resource using the ActivityDefinition instance as the input.
	Transform string `json:"transform"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// A text equivalent of the action to be performed. This provides a human-interpretable
	// description of the action when the definition is consumed by a system that might not
	// be capable of interpreting it dynamically.
	TextEquivalent string `json:"textEquivalent"`
	// A code or group definition that describes the intended subject of the action and its
	// children, if any.
	SubjectCodeableConcept *CodeableConcept `json:"subjectCodeableConcept"`
	// An optional value describing when the action should be performed.
	TimingDuration *Duration `json:"timingDuration"`
	// A user-visible prefix for the action.
	Prefix string `json:"prefix"`
	// Defines input data requirements for the action.
	Input []*DataRequirement `json:"input"`
	// Defines the required behavior for the action.
	RequiredBehavior PlanDefinition_ActionRequiredBehavior `json:"requiredBehavior"`
	// A reference to an ActivityDefinition that describes the action to be taken in
	// detail, or a PlanDefinition that describes a series of actions to be taken.
	// pattern ^\S*$
	DefinitionCanonical string `json:"definitionCanonical"`
}

type PlanDefinition_ActionGroupingBehavior string
type PlanDefinition_ActionSelectionBehavior string
type PlanDefinition_ActionCardinalityBehavior string
type PlanDefinition_ActionPrecheckBehavior string
type PlanDefinition_ActionRequiredBehavior string

const (
	PlanDefinition_ActionGroupingBehaviorVisualGroup          PlanDefinition_ActionGroupingBehavior    = "visual-group"
	PlanDefinition_ActionGroupingBehaviorLogicalGroup         PlanDefinition_ActionGroupingBehavior    = "logical-group"
	PlanDefinition_ActionGroupingBehaviorSentenceGroup        PlanDefinition_ActionGroupingBehavior    = "sentence-group"
	PlanDefinition_ActionSelectionBehaviorAny                 PlanDefinition_ActionSelectionBehavior   = "any"
	PlanDefinition_ActionSelectionBehaviorAll                 PlanDefinition_ActionSelectionBehavior   = "all"
	PlanDefinition_ActionSelectionBehaviorAllOrNone           PlanDefinition_ActionSelectionBehavior   = "all-or-none"
	PlanDefinition_ActionSelectionBehaviorExactlyOne          PlanDefinition_ActionSelectionBehavior   = "exactly-one"
	PlanDefinition_ActionSelectionBehaviorAtMostOne           PlanDefinition_ActionSelectionBehavior   = "at-most-one"
	PlanDefinition_ActionSelectionBehaviorOneOrMore           PlanDefinition_ActionSelectionBehavior   = "one-or-more"
	PlanDefinition_ActionCardinalityBehaviorSingle            PlanDefinition_ActionCardinalityBehavior = "single"
	PlanDefinition_ActionCardinalityBehaviorMultiple          PlanDefinition_ActionCardinalityBehavior = "multiple"
	PlanDefinition_ActionPrecheckBehaviorYes                  PlanDefinition_ActionPrecheckBehavior    = "yes"
	PlanDefinition_ActionPrecheckBehaviorNo                   PlanDefinition_ActionPrecheckBehavior    = "no"
	PlanDefinition_ActionRequiredBehaviorMust                 PlanDefinition_ActionRequiredBehavior    = "must"
	PlanDefinition_ActionRequiredBehaviorCould                PlanDefinition_ActionRequiredBehavior    = "could"
	PlanDefinition_ActionRequiredBehaviorMustUnlessDocumented PlanDefinition_ActionRequiredBehavior    = "must-unless-documented"
)

// Contract_Rule is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract_Rule struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
	ContentAttachment *Attachment `json:"contentAttachment"`
	// Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
	ContentReference *Reference `json:"contentReference"`
}

// ExampleScenario_ContainedInstance is Example of workflow instance.
type ExampleScenario_ContainedInstance struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Each resource contained in the instance.
	ResourceId string `json:"resourceId"`
	// Extensions for resourceId
	ResourceId_ext *Element `json:"_resourceId"`
	// A specific version of a resource contained in the instance.
	VersionId string `json:"versionId"`
	// Extensions for versionId
	VersionId_ext *Element `json:"_versionId"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// MedicationKnowledge_AdministrationGuidelines is Information about a medication that is used to support knowledge.
type MedicationKnowledge_AdministrationGuidelines struct {
	// Dosage for the medication for the specific guidelines.
	Dosage []*MedicationKnowledge_Dosage `json:"dosage"`
	// Indication for use that apply to the specific administration guidelines.
	IndicationCodeableConcept *CodeableConcept `json:"indicationCodeableConcept"`
	// Indication for use that apply to the specific administration guidelines.
	IndicationReference *Reference `json:"indicationReference"`
	// Characteristics of the patient that are relevant to the administration guidelines
	// (for example, height, weight, gender, etc.).
	PatientCharacteristics []*MedicationKnowledge_PatientCharacteristics `json:"patientCharacteristics"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// TestScript_Operation is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_Operation struct {
	// The type of the resource.  See http://build.fhir.org/resourcelist.html.
	Resource string `json:"resource"`
	// The description would be used by test engines for tracking and reporting purposes.
	Description string `json:"description"`
	// The server where the request message is destined for.  Must be one of the server
	// numbers listed in TestScript.destination section.
	Destination int64 `json:"destination"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Extensions for method
	Method_ext *Element `json:"_method"`
	// Extensions for params
	Params_ext *Element `json:"_params"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Extensions for contentType
	ContentType_ext *Element `json:"_contentType"`
	// Extensions for sourceId
	SourceId_ext *Element `json:"_sourceId"`
	// The mime-type to use for RESTful operation in the 'Accept' header.
	Accept string `json:"accept"`
	// Extensions for accept
	Accept_ext *Element `json:"_accept"`
	// Header elements would be used to set HTTP headers.
	RequestHeader []*TestScript_RequestHeader `json:"requestHeader"`
	// The fixture id (maybe new) to map to the response.
	ResponseId string `json:"responseId"`
	// Extensions for origin
	Origin_ext *Element `json:"_origin"`
	// Extensions for responseId
	ResponseId_ext *Element `json:"_responseId"`
	// Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.
	TargetId string `json:"targetId"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The label would be used for tracking/logging purposes by test engines.
	Label string `json:"label"`
	// Extensions for destination
	Destination_ext *Element `json:"_destination"`
	// The HTTP method the test engine MUST use for this operation regardless of any other
	// operation details.
	Method TestScript_OperationMethod `json:"method"`
	// Complete request URL.
	Url string `json:"url"`
	// Extensions for requestId
	RequestId_ext *Element `json:"_requestId"`
	// Path plus parameters after [type].  Used to set parts of the request URL explicitly.
	Params string `json:"params"`
	// Extensions for resource
	Resource_ext *Element `json:"_resource"`
	// Extensions for label
	Label_ext *Element `json:"_label"`
	// The mime-type to use for RESTful operation in the 'Content-Type' header.
	ContentType string `json:"contentType"`
	// Extensions for encodeRequestUrl
	EncodeRequestUrl_ext *Element `json:"_encodeRequestUrl"`
	// The server where the request message originates from.  Must be one of the server
	// numbers listed in TestScript.origin section.
	Origin int64 `json:"origin"`
	// Server interaction or operation type.
	Type *Coding `json:"type"`
	// Whether or not to implicitly send the request url in encoded format. The default is
	// true to match the standard RESTful client behavior. Set to false when communicating
	// with a server that does not support encoded url paths.
	EncodeRequestUrl bool `json:"encodeRequestUrl"`
	// The fixture id (maybe new) to map to the request.
	RequestId string `json:"requestId"`
	// The id of the fixture used as the body of a PUT or POST request.
	SourceId string `json:"sourceId"`
	// Extensions for targetId
	TargetId_ext *Element `json:"_targetId"`
}

type TestScript_OperationMethod string

const (
	TestScript_OperationMethodDelete  TestScript_OperationMethod = "delete"
	TestScript_OperationMethodGet     TestScript_OperationMethod = "get"
	TestScript_OperationMethodOptions TestScript_OperationMethod = "options"
	TestScript_OperationMethodPatch   TestScript_OperationMethod = "patch"
	TestScript_OperationMethodPost    TestScript_OperationMethod = "post"
	TestScript_OperationMethodPut     TestScript_OperationMethod = "put"
	TestScript_OperationMethodHead    TestScript_OperationMethod = "head"
)

// SubstancePolymer_StartingMaterial is Todo.
type SubstancePolymer_StartingMaterial struct {
	// Todo.
	Amount *SubstanceAmount `json:"amount"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Todo.
	Material *CodeableConcept `json:"material"`
	// Todo.
	Type *CodeableConcept `json:"type"`
	// Todo.
	IsDefining bool `json:"isDefining"`
	// Extensions for isDefining
	IsDefining_ext *Element `json:"_isDefining"`
}

// SubstanceSpecification_Representation is The detailed description of a substance, typically at a level beyond what is used
// for prescribing.
type SubstanceSpecification_Representation struct {
	// The structural representation as text string in a format e.g. InChI, SMILES,
	// MOLFILE, CDX.
	Representation string `json:"representation"`
	// Extensions for representation
	Representation_ext *Element `json:"_representation"`
	// An attached file with the structural representation.
	Attachment *Attachment `json:"attachment"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of structure (e.g. Full, Partial, Representative).
	Type *CodeableConcept `json:"type"`
}

// Range is A set of ordered Quantities defined by a low and high limit.
type Range struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The low limit. The boundary is inclusive.
	Low *Quantity `json:"low"`
	// The high limit. The boundary is inclusive.
	High *Quantity `json:"high"`
}

// EpisodeOfCare_StatusHistory is An association between a patient and an organization / healthcare provider(s) during
// which time encounters may occur. The managing organization assumes a level of
// responsibility for the patient during this time.
type EpisodeOfCare_StatusHistory struct {
	// planned | waitlist | active | onhold | finished | cancelled.
	Status EpisodeOfCare_StatusHistoryStatus `json:"status"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// The period during this EpisodeOfCare that the specific status applied.
	Period *Period `json:"period,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

type EpisodeOfCare_StatusHistoryStatus string

const (
	EpisodeOfCare_StatusHistoryStatusPlanned        EpisodeOfCare_StatusHistoryStatus = "planned"
	EpisodeOfCare_StatusHistoryStatusWaitlist       EpisodeOfCare_StatusHistoryStatus = "waitlist"
	EpisodeOfCare_StatusHistoryStatusActive         EpisodeOfCare_StatusHistoryStatus = "active"
	EpisodeOfCare_StatusHistoryStatusOnhold         EpisodeOfCare_StatusHistoryStatus = "onhold"
	EpisodeOfCare_StatusHistoryStatusFinished       EpisodeOfCare_StatusHistoryStatus = "finished"
	EpisodeOfCare_StatusHistoryStatusCancelled      EpisodeOfCare_StatusHistoryStatus = "cancelled"
	EpisodeOfCare_StatusHistoryStatusEnteredInError EpisodeOfCare_StatusHistoryStatus = "entered-in-error"
)

// MeasureReport_Group is The MeasureReport resource contains the results of the calculation of a measure; and
// optionally a reference to the resources involved in that calculation.
type MeasureReport_Group struct {
	// When a measure includes multiple stratifiers, there will be a stratifier group for
	// each stratifier defined by the measure.
	Stratifier []*MeasureReport_Stratifier `json:"stratifier"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The meaning of the population group as defined in the measure definition.
	Code *CodeableConcept `json:"code"`
	// The populations that make up the population group, one for each type of population
	// appropriate for the measure.
	Population []*MeasureReport_Population `json:"population"`
	// The measure score for this population group, calculated as appropriate for the
	// measure type and scoring method, and based on the contents of the populations
	// defined in the group.
	MeasureScore *Quantity `json:"measureScore"`
}

// PaymentReconciliation_Detail is This resource provides the details including amount of a payment and allocates the
// payment items being paid.
type PaymentReconciliation_Detail struct {
	// A reference to the individual who is responsible for inquiries regarding the
	// response and its payment.
	Responsible *Reference `json:"responsible"`
	// The monetary amount allocated from the total payment to the payable.
	Amount *Money `json:"amount"`
	// Unique identifier for the current payment item for the referenced payable.
	Identifier *Identifier `json:"identifier"`
	// Code to indicate the nature of the payment.
	Type *CodeableConcept `json:"type,omitempty"`
	// The date from the response resource containing a commitment to pay.
	Date string `json:"date"`
	// The party which is receiving the payment.
	Payee *Reference `json:"payee"`
	// Unique identifier for the prior payment item for the referenced payable.
	Predecessor *Identifier `json:"predecessor"`
	// A resource, such as a ClaimResponse, which contains a commitment to payment.
	Response *Reference `json:"response"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The party which submitted the claim or financial transaction.
	Submitter *Reference `json:"submitter"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// A resource, such as a Claim, the evaluation of which could lead to payment.
	Request *Reference `json:"request"`
}

// MedicinalProductIngredient_SpecifiedSubstance is An ingredient of a manufactured item or pharmaceutical product.
type MedicinalProductIngredient_SpecifiedSubstance struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The specified substance.
	Code *CodeableConcept `json:"code,omitempty"`
	// The group of specified substance, e.g. group 1 to 4.
	Group *CodeableConcept `json:"group,omitempty"`
	// Confidentiality level of the specified substance as the ingredient.
	Confidentiality *CodeableConcept `json:"confidentiality"`
	// Quantity of the substance or specified substance present in the manufactured item or
	// pharmaceutical product.
	Strength []*MedicinalProductIngredient_Strength `json:"strength"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Patient_Link is Demographics and other administrative information about an individual or animal
// receiving care or other health-related services.
type Patient_Link struct {
	// The type of link between this patient resource and another patient resource.
	Type Patient_LinkType `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The other patient resource that the link refers to.
	Other *Reference `json:"other,omitempty"`
}

type Patient_LinkType string

const (
	Patient_LinkTypeReplacedBy Patient_LinkType = "replaced-by"
	Patient_LinkTypeReplaces   Patient_LinkType = "replaces"
	Patient_LinkTypeRefer      Patient_LinkType = "refer"
	Patient_LinkTypeSeealso    Patient_LinkType = "seealso"
)

// CarePlan_Activity is Describes the intention of how one or more practitioners intend to deliver care for
// a particular patient, group or community for a period of time, possibly limited to
// care for a specific condition or set of conditions.
type CarePlan_Activity struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifies the outcome at the point when the status of the activity is assessed.
	// For example, the outcome of an education activity could be patient understands (or
	// not).
	OutcomeCodeableConcept []*CodeableConcept `json:"outcomeCodeableConcept"`
	// Details of the outcome or action resulting from the activity.  The reference to an
	// "event" resource, such as Procedure or Encounter or Observation, is the
	// result/outcome of the activity itself.  The activity can be conveyed using
	// CarePlan.activity.detail OR using the CarePlan.activity.reference (a reference to a
	// “request” resource).
	OutcomeReference []*Reference `json:"outcomeReference"`
	// Notes about the adherence/status/progress of the activity.
	Progress []*Annotation `json:"progress"`
	// The details of the proposed activity represented in a specific resource.
	Reference *Reference `json:"reference"`
	// A simple summary of a planned activity suitable for a general care plan system (e.g.
	// form driven) that doesn't know about specific resources such as procedure etc.
	Detail *CarePlan_Detail `json:"detail"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Composition_Section is A set of healthcare-related information that is assembled together into a single
// logical package that provides a single coherent statement of meaning, establishes
// its own context and that has clinical attestation with regard to who is making the
// statement. A Composition defines the structure and narrative content necessary for a
// document. However, a Composition alone does not constitute a document. Rather, the
// Composition must be the first entry in a Bundle where Bundle.type=document, and any
// other resources referenced from Composition must be included as subsequent entries
// in the Bundle (for example Patient, Practitioner, Encounter, etc.).
type Composition_Section struct {
	// Identifies who is responsible for the information in this section, not necessarily
	// who typed it in.
	Author []*Reference `json:"author"`
	// A human-readable narrative that contains the attested content of the section, used
	// to represent the content of the resource to a human. The narrative need not encode
	// all the structured data, but is required to contain sufficient detail to make it
	// "clinically safe" for a human to just read the narrative.
	Text *Narrative `json:"text"`
	// A nested sub-section within this section.
	Section []*Composition_Section `json:"section"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The label for this particular section.  This will be part of the rendered content
	// for the document, and is often used to build a table of contents.
	Title string `json:"title"`
	// How the entry list was prepared - whether it is a working list that is suitable for
	// being maintained on an ongoing basis, or if it represents a snapshot of a list of
	// items from another source, or whether it is a prepared list where items may be
	// marked as added, modified or deleted.
	Mode string `json:"mode"`
	// Extensions for mode
	Mode_ext *Element `json:"_mode"`
	// Specifies the order applied to the items in the section entries.
	OrderedBy *CodeableConcept `json:"orderedBy"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// A reference to the actual resource from which the narrative in the section is
	// derived.
	Entry []*Reference `json:"entry"`
	// A code identifying the kind of content contained within the section. This must be
	// consistent with the section title.
	Code *CodeableConcept `json:"code"`
	// The actual focus of the section when it is not the subject of the composition, but
	// instead represents something or someone associated with the subject such as (for a
	// patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the
	// focus is assumed to be focus of the parent section, or, for a section in the
	// Composition itself, the subject of the composition. Sections with a focus SHALL only
	// include resources where the logical subject (patient, subject, focus, etc.) matches
	// the section focus, or the resources have no logical subject (few resources).
	Focus *Reference `json:"focus"`
	// If the section is empty, why the list is empty. An empty section typically has some
	// text explaining the empty reason.
	EmptyReason *CodeableConcept `json:"emptyReason"`
}

// Contract_ValuedItem is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract_ValuedItem struct {
	// Indicates the time during which this Contract ValuedItem information is effective.
	EffectiveTime string `json:"effectiveTime"`
	// Specifies the units by which the Contract Valued Item is measured or counted, and
	// quantifies the countable or measurable Contract Valued Item instances.
	Quantity *Quantity `json:"quantity"`
	// A real number that represents a multiplier used in determining the overall value of
	// the Contract Valued Item delivered. The concept of a Factor allows for a discount or
	// surcharge multiplier to be applied to a monetary amount.
	Factor float64 `json:"factor"`
	// Extensions for points
	Points_ext *Element `json:"_points"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Specific type of Contract Valued Item that may be priced.
	EntityCodeableConcept *CodeableConcept `json:"entityCodeableConcept"`
	// Who will receive payment.
	Recipient *Reference `json:"recipient"`
	// Id  of the clause or question text related to the context of this valuedItem in the
	// referenced form or QuestionnaireResponse.
	LinkId []string `json:"linkId"`
	// Extensions for linkId
	LinkId_ext []*Element `json:"_linkId"`
	// Extensions for securityLabelNumber
	SecurityLabelNumber_ext []*Element `json:"_securityLabelNumber"`
	// Extensions for effectiveTime
	EffectiveTime_ext *Element `json:"_effectiveTime"`
	// A Contract Valued Item unit valuation measure.
	UnitPrice *Money `json:"unitPrice"`
	// Terms of valuation.
	Payment string `json:"payment"`
	// Extensions for paymentDate
	PaymentDate_ext *Element `json:"_paymentDate"`
	// Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt.
	// For example, the formula: unit Quantity * unit Price (Cost per Point) * factor
	// Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if
	// not supplied.
	Net *Money `json:"net"`
	// A set of security labels that define which terms are controlled by this condition.
	SecurityLabelNumber []uint64 `json:"securityLabelNumber"`
	// Specific type of Contract Valued Item that may be priced.
	EntityReference *Reference `json:"entityReference"`
	// Identifies a Contract Valued Item instance.
	Identifier *Identifier `json:"identifier"`
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
	// An amount that expresses the weighting (based on difficulty, cost and/or resource
	// intensiveness) associated with the Contract Valued Item delivered. The concept of
	// Points allows for assignment of point values for a Contract Valued Item, such that a
	// monetary amount can be assigned to each point.
	Points float64 `json:"points"`
	// Extensions for payment
	Payment_ext *Element `json:"_payment"`
	// When payment is due.
	PaymentDate string `json:"paymentDate"`
	// Who will make payment.
	Responsible *Reference `json:"responsible"`
}

// ExplanationOfBenefit_Item is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_Item struct {
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
	// Unique Device Identifiers associated with this line item.
	Udi []*Reference `json:"udi"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Where the product or service was provided.
	LocationReference *Reference `json:"locationReference"`
	// Extensions for procedureSequence
	ProcedureSequence_ext []*Element `json:"_procedureSequence"`
	// Exceptions, special conditions and supporting information applicable for this
	// service or product.
	InformationSequence []uint64 `json:"informationSequence"`
	// A billed item may include goods or services provided in multiple encounters.
	Encounter []*Reference `json:"encounter"`
	// Extensions for noteNumber
	NoteNumber_ext []*Element `json:"_noteNumber"`
	// Second-tier of goods and services.
	Detail []*ExplanationOfBenefit_Detail `json:"detail"`
	// Extensions for servicedDate
	ServicedDate_ext *Element `json:"_servicedDate"`
	// The date or dates when the service or product was supplied, performed or completed.
	ServicedPeriod *Period `json:"servicedPeriod"`
	// Extensions for informationSequence
	InformationSequence_ext []*Element `json:"_informationSequence"`
	// The quantity times the unit price for an additional service or product or charge.
	Net *Money `json:"net"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for careTeamSequence
	CareTeamSequence_ext []*Element `json:"_careTeamSequence"`
	// Procedures applicable for this service or product.
	ProcedureSequence []uint64 `json:"procedureSequence"`
	// Where the product or service was provided.
	LocationCodeableConcept *CodeableConcept `json:"locationCodeableConcept"`
	// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
	SubSite []*CodeableConcept `json:"subSite"`
	// Care team members related to this service or product.
	CareTeamSequence []uint64 `json:"careTeamSequence"`
	// Extensions for diagnosisSequence
	DiagnosisSequence_ext []*Element `json:"_diagnosisSequence"`
	// The date or dates when the service or product was supplied, performed or completed.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	ServicedDate string `json:"servicedDate"`
	// Where the product or service was provided.
	LocationAddress *Address `json:"locationAddress"`
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity"`
	// Physical service site on the patient (limb, tooth, etc.).
	BodySite *CodeableConcept `json:"bodySite"`
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []uint64 `json:"noteNumber"`
	// Code to identify the general type of benefits under which products and services are
	// provided.
	Category *CodeableConcept `json:"category"`
	// Item typification or modifiers codes to convey additional context for the product or
	// service.
	Modifier []*CodeableConcept `json:"modifier"`
	// The type of revenue or cost center providing the product and/or service.
	Revenue *CodeableConcept `json:"revenue"`
	// When the value is a group code then this item collects a set of related claim
	// details, otherwise this contains the product, service, drug or other billing code
	// for the item.
	ProductOrService *CodeableConcept `json:"productOrService,omitempty"`
	// Identifies the program under which this may be recovered.
	ProgramCode []*CodeableConcept `json:"programCode"`
	// A real number that represents a multiplier used in determining the overall value of
	// services delivered and/or goods received. The concept of a Factor allows for a
	// discount or surcharge multiplier to be applied to a monetary amount.
	Factor float64 `json:"factor"`
	// If this item is a group then the values here are a summary of the adjudication of
	// the detail items. If this item is a simple product or service then this is the
	// result of the adjudication of this item.
	Adjudication []*ExplanationOfBenefit_Adjudication `json:"adjudication"`
	// A number to uniquely identify item entries.
	Sequence uint64 `json:"sequence"`
	// Diagnoses applicable for this service or product.
	DiagnosisSequence []uint64 `json:"diagnosisSequence"`
	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *Money `json:"unitPrice"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
}

// BiologicallyDerivedProduct_Storage is A material substance originating from a biological entity intended to be
// transplanted or infused
// into another (possibly the same) biological entity.
type BiologicallyDerivedProduct_Storage struct {
	// Temperature scale used.
	Scale BiologicallyDerivedProduct_StorageScale `json:"scale"`
	// Extensions for scale
	Scale_ext *Element `json:"_scale"`
	// Storage temperature.
	Temperature float64 `json:"temperature"`
	// Extensions for temperature
	Temperature_ext *Element `json:"_temperature"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Description of storage.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Storage timeperiod.
	Duration *Period `json:"duration"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

type BiologicallyDerivedProduct_StorageScale string

const (
	BiologicallyDerivedProduct_StorageScaleFarenheit BiologicallyDerivedProduct_StorageScale = "farenheit"
	BiologicallyDerivedProduct_StorageScaleCelsius   BiologicallyDerivedProduct_StorageScale = "celsius"
	BiologicallyDerivedProduct_StorageScaleKelvin    BiologicallyDerivedProduct_StorageScale = "kelvin"
)

// MedicinalProductAuthorization_JurisdictionalAuthorization is The regulatory authorization of a medicinal product.
type MedicinalProductAuthorization_JurisdictionalAuthorization struct {
	// The assigned number for the marketing authorization.
	Identifier []*Identifier `json:"identifier"`
	// Country of authorization.
	Country *CodeableConcept `json:"country"`
	// Jurisdiction within a country.
	Jurisdiction []*CodeableConcept `json:"jurisdiction"`
	// The legal status of supply in a jurisdiction or region.
	LegalStatusOfSupply *CodeableConcept `json:"legalStatusOfSupply"`
	// The start and expected end date of the authorization.
	ValidityPeriod *Period `json:"validityPeriod"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// RiskEvidenceSynthesis_PrecisionEstimate is The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a
// population plus exposure state where the risk estimate is derived from a combination
// of research studies.
type RiskEvidenceSynthesis_PrecisionEstimate struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for from
	From_ext *Element `json:"_from"`
	// Upper bound of confidence interval.
	To float64 `json:"to"`
	// Extensions for to
	To_ext *Element `json:"_to"`
	// Examples include confidence interval and interquartile range.
	Type *CodeableConcept `json:"type"`
	// Use 95 for a 95% confidence interval.
	Level float64 `json:"level"`
	// Extensions for level
	Level_ext *Element `json:"_level"`
	// Lower bound of confidence interval.
	From float64 `json:"from"`
}

// ConceptMap_Target is A statement of relationships from one set of concepts to one or more other concepts
// - either concepts in code systems, or data element/data element concepts, or classes
// in class models.
type ConceptMap_Target struct {
	// A description of status/issues in mapping that conveys additional information not
	// represented in  the structured data.
	Comment string `json:"comment"`
	// A set of additional dependencies for this mapping to hold. This mapping is only
	// applicable if the specified element can be resolved, and it has the specified value.
	DependsOn []*ConceptMap_DependsOn `json:"dependsOn"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Identity (code or path) or the element/item that the map refers to.
	Code string `json:"code"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// The display for the code. The display is only provided to help editors when editing
	// the concept map.
	Display string `json:"display"`
	// Extensions for equivalence
	Equivalence_ext *Element `json:"_equivalence"`
	// A set of additional outcomes from this mapping to other elements. To properly
	// execute this mapping, the specified element must be mapped to some data element or
	// source that is in context. The mapping may still be useful without a place for the
	// additional data elements, but the equivalence cannot be relied on.
	Product []*ConceptMap_DependsOn `json:"product"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for display
	Display_ext *Element `json:"_display"`
	// The equivalence between the source and target concepts (counting for the
	// dependencies and products). The equivalence is read from target to source (e.g. the
	// target is 'wider' than the source).
	Equivalence ConceptMap_TargetEquivalence `json:"equivalence"`
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
}

type ConceptMap_TargetEquivalence string

const (
	ConceptMap_TargetEquivalenceRelatedto   ConceptMap_TargetEquivalence = "relatedto"
	ConceptMap_TargetEquivalenceEquivalent  ConceptMap_TargetEquivalence = "equivalent"
	ConceptMap_TargetEquivalenceEqual       ConceptMap_TargetEquivalence = "equal"
	ConceptMap_TargetEquivalenceWider       ConceptMap_TargetEquivalence = "wider"
	ConceptMap_TargetEquivalenceSubsumes    ConceptMap_TargetEquivalence = "subsumes"
	ConceptMap_TargetEquivalenceNarrower    ConceptMap_TargetEquivalence = "narrower"
	ConceptMap_TargetEquivalenceSpecializes ConceptMap_TargetEquivalence = "specializes"
	ConceptMap_TargetEquivalenceInexact     ConceptMap_TargetEquivalence = "inexact"
	ConceptMap_TargetEquivalenceUnmatched   ConceptMap_TargetEquivalence = "unmatched"
	ConceptMap_TargetEquivalenceDisjoint    ConceptMap_TargetEquivalence = "disjoint"
)

// RequestGroup_Action is A group of related requests that can be used to capture intended activities that
// have inter-dependencies such as "give this medication after that one".
type RequestGroup_Action struct {
	// An optional value describing when the action should be performed.
	TimingRange *Range `json:"timingRange"`
	// Defines the grouping behavior for the action and its children.
	GroupingBehavior string `json:"groupingBehavior"`
	// The resource that is the target of the action (e.g. CommunicationRequest).
	Resource *Reference `json:"resource"`
	// Extensions for textEquivalent
	TextEquivalent_ext *Element `json:"_textEquivalent"`
	// An optional value describing when the action should be performed.
	TimingAge *Age `json:"timingAge"`
	// An optional value describing when the action should be performed.
	TimingPeriod *Period `json:"timingPeriod"`
	// Extensions for selectionBehavior
	SelectionBehavior_ext *Element `json:"_selectionBehavior"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for title
	Title_ext *Element `json:"_title"`
	// A short description of the action used to provide a summary to display to the user.
	Description string `json:"description"`
	// A text equivalent of the action to be performed. This provides a human-interpretable
	// description of the action when the definition is consumed by a system that might not
	// be capable of interpreting it dynamically.
	TextEquivalent string `json:"textEquivalent"`
	// An optional value describing when the action should be performed.
	TimingDuration *Duration `json:"timingDuration"`
	// Extensions for precheckBehavior
	PrecheckBehavior_ext *Element `json:"_precheckBehavior"`
	// Extensions for prefix
	Prefix_ext *Element `json:"_prefix"`
	// Indicates how quickly the action should be addressed with respect to other actions.
	Priority string `json:"priority"`
	// Didactic or other informational resources associated with the action that can be
	// provided to the CDS recipient. Information resources can include inline text
	// commentary and links to web resources.
	Documentation []*RelatedArtifact `json:"documentation"`
	// An optional value describing when the action should be performed.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	TimingDateTime string `json:"timingDateTime"`
	// Defines whether the action can be selected multiple times.
	CardinalityBehavior string `json:"cardinalityBehavior"`
	// Extensions for cardinalityBehavior
	CardinalityBehavior_ext *Element `json:"_cardinalityBehavior"`
	// Sub actions.
	Action []*RequestGroup_Action `json:"action"`
	// The title of the action displayed to a user.
	Title string `json:"title"`
	// A code that provides meaning for the action or action group. For example, a section
	// may have a LOINC code for a section of a documentation template.
	Code []*CodeableConcept `json:"code"`
	// An optional value describing when the action should be performed.
	TimingTiming *Timing `json:"timingTiming"`
	// Defines the selection behavior for the action and its children.
	SelectionBehavior string `json:"selectionBehavior"`
	// The participant that should perform or be responsible for this action.
	Participant []*Reference `json:"participant"`
	// The type of action to perform (create, update, remove).
	Type *CodeableConcept `json:"type"`
	// Defines expectations around whether an action is required.
	RequiredBehavior string `json:"requiredBehavior"`
	// A user-visible prefix for the action.
	Prefix string `json:"prefix"`
	// An expression that describes applicability criteria, or start/stop conditions for
	// the action.
	Condition []*RequestGroup_Condition `json:"condition"`
	// Extensions for timingDateTime
	TimingDateTime_ext *Element `json:"_timingDateTime"`
	// Extensions for requiredBehavior
	RequiredBehavior_ext *Element `json:"_requiredBehavior"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Defines whether the action should usually be preselected.
	PrecheckBehavior string `json:"precheckBehavior"`
	// Extensions for groupingBehavior
	GroupingBehavior_ext *Element `json:"_groupingBehavior"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for priority
	Priority_ext *Element `json:"_priority"`
	// A relationship to another action such as "before" or "30-60 minutes after start of".
	RelatedAction []*RequestGroup_RelatedAction `json:"relatedAction"`
}

// SubstanceSpecification_MolecularWeight is The detailed description of a substance, typically at a level beyond what is used
// for prescribing.
type SubstanceSpecification_MolecularWeight struct {
	// The method by which the molecular weight was determined.
	Method *CodeableConcept `json:"method"`
	// Type of molecular weight such as exact, average (also known as. number average),
	// weight average.
	Type *CodeableConcept `json:"type"`
	// Used to capture quantitative values for a variety of elements. If only limits are
	// given, the arithmetic mean would be the average. If only a single definite value for
	// a given element is given, it would be captured in this field.
	Amount *Quantity `json:"amount"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// Observation_Component is Measurements and simple assertions made about a patient, device or other subject.
type Observation_Component struct {
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	ValueRange *Range `json:"valueRange"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	ValueSampledData *SampledData `json:"valueSampledData"`
	// Guidance on how to interpret the value by comparison to a normal or recommended
	// range.
	ReferenceRange []*Observation_ReferenceRange `json:"referenceRange"`
	// Describes what was observed. Sometimes this is called the observation "code".
	Code *CodeableConcept `json:"code,omitempty"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// Extensions for valueInteger
	ValueInteger_ext *Element `json:"_valueInteger"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	ValueRatio *Ratio `json:"valueRatio"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	ValueTime string `json:"valueTime"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept"`
	// A categorical assessment of an observation value.  For example, high, low, normal.
	Interpretation []*CodeableConcept `json:"interpretation"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// Extensions for valueTime
	ValueTime_ext *Element `json:"_valueTime"`
	// Extensions for valueDateTime
	ValueDateTime_ext *Element `json:"_valueDateTime"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	ValueDateTime string `json:"valueDateTime"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	ValuePeriod *Period `json:"valuePeriod"`
	// Provides a reason why the expected value in the element
	// Observation.component.value[x] is missing.
	DataAbsentReason *CodeableConcept `json:"dataAbsentReason"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// The information determined as a result of making the observation, if the information
	// has a simple value.
	// pattern ^-?([0]|([1-9][0-9]*))$
	ValueInteger int64 `json:"valueInteger"`
}

// CapabilityStatement_Messaging is A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server
// for a particular version of FHIR that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type CapabilityStatement_Messaging struct {
	// References to message definitions for messages this system can send or receive.
	SupportedMessage []*CapabilityStatement_SupportedMessage `json:"supportedMessage"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// An endpoint (network accessible address) to which messages and/or replies are to be
	// sent.
	Endpoint []*CapabilityStatement_Endpoint `json:"endpoint"`
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Length if the receiver's reliable messaging cache in minutes (if a receiver) or how
	// long the cache length on the receiver should be (if a sender).
	ReliableCache uint64 `json:"reliableCache"`
	// Extensions for reliableCache
	ReliableCache_ext *Element `json:"_reliableCache"`
	// Documentation about the system's messaging capabilities for this endpoint not
	// otherwise documented by the capability statement.  For example, the process for
	// becoming an authorized messaging exchange partner.
	Documentation string `json:"documentation"`
}

// ClaimResponse_SubDetail is This resource provides the adjudication details from the processing of a Claim
// resource.
type ClaimResponse_SubDetail struct {
	// The adjudication results.
	Adjudication []*ClaimResponse_Adjudication `json:"adjudication"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A number to uniquely reference the claim sub-detail entry.
	SubDetailSequence uint64 `json:"subDetailSequence"`
	// Extensions for subDetailSequence
	SubDetailSequence_ext *Element `json:"_subDetailSequence"`
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []uint64 `json:"noteNumber"`
	// Extensions for noteNumber
	NoteNumber_ext []*Element `json:"_noteNumber"`
}

// DeviceDefinition_Property is The characteristics, operational status and capabilities of a medical-related
// component of a medical device.
type DeviceDefinition_Property struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
	Type *CodeableConcept `json:"type,omitempty"`
	// Property value as a quantity.
	ValueQuantity []*Quantity `json:"valueQuantity"`
	// Property value as a code, e.g., NTP4 (synced to NTP).
	ValueCode []*CodeableConcept `json:"valueCode"`
}

// MolecularSequence_Variant is Raw data describing a biological sequence.
type MolecularSequence_Variant struct {
	// A pointer to an Observation containing variant information.
	VariantPointer *Reference `json:"variantPointer"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// End position of the variant on the reference sequence. If the coordinate system is
	// 0-based then end is exclusive and does not include the last position. If the
	// coordinate system is 1-base, then end is inclusive and includes the last position.
	End int64 `json:"end"`
	// An allele is one of a set of coexisting sequence variants of a gene
	// ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).
	//  Nucleotide(s)/amino acids from start position of sequence to stop position of
	// sequence on the positive (+) strand of the observed  sequence. When the sequence
	// type is DNA, it should be the sequence on the positive (+) strand. This will lay in
	// the range between variant.start and variant.end.
	ObservedAllele string `json:"observedAllele"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Start position of the variant on the  reference sequence. If the coordinate system
	// is either 0-based or 1-based, then start position is inclusive.
	Start int64 `json:"start"`
	// An allele is one of a set of coexisting sequence variants of a gene
	// ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).
	// Nucleotide(s)/amino acids from start position of sequence to stop position of
	// sequence on the positive (+) strand of the reference sequence. When the sequence
	// type is DNA, it should be the sequence on the positive (+) strand. This will lay in
	// the range between variant.start and variant.end.
	ReferenceAllele string `json:"referenceAllele"`
	// Extensions for cigar
	Cigar_ext *Element `json:"_cigar"`
	// Extensions for referenceAllele
	ReferenceAllele_ext *Element `json:"_referenceAllele"`
	// Extensions for start
	Start_ext *Element `json:"_start"`
	// Extensions for end
	End_ext *Element `json:"_end"`
	// Extensions for observedAllele
	ObservedAllele_ext *Element `json:"_observedAllele"`
	// Extended CIGAR string for aligning the sequence with reference bases. See detailed
	// documentation
	// [here](http://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_ExtendedCIGARFormat.htm).
	Cigar string `json:"cigar"`
}

// TestScript_RequestHeader is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_RequestHeader struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The HTTP header field e.g. "Accept".
	Field string `json:"field"`
	// Extensions for field
	Field_ext *Element `json:"_field"`
	// The value of the header e.g. "application/fhir+xml".
	Value string `json:"value"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// MarketingStatus is The marketing status describes the date when a medicinal product is actually put on
// the market or the date as of which it is no longer available.
type MarketingStatus struct {
	// This attribute provides information on the status of the marketing of the medicinal
	// product See ISO/TS 20443 for more information and examples.
	Status *CodeableConcept `json:"status,omitempty"`
	// The date when the Medicinal Product is placed on the market by the Marketing
	// Authorisation Holder (or where applicable, the manufacturer/distributor) in a
	// country and/or jurisdiction shall be provided A complete date consisting of day,
	// month and year shall be specified using the ISO 8601 date format NOTE “Placed on
	// the market” refers to the release of the Medicinal Product into the distribution
	// chain.
	DateRange *Period `json:"dateRange,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The country in which the marketing authorisation has been granted shall be specified
	// It should be specified using the ISO 3166 ‑ 1 alpha-2 code elements.
	Country *CodeableConcept `json:"country,omitempty"`
	// Where a Medicines Regulatory Agency has granted a marketing authorisation for which
	// specific provisions within a jurisdiction apply, the jurisdiction can be specified
	// using an appropriate controlled terminology The controlled term and the controlled
	// term identifier shall be specified.
	Jurisdiction *CodeableConcept `json:"jurisdiction"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The date when the Medicinal Product is placed on the market by the Marketing
	// Authorisation Holder (or where applicable, the manufacturer/distributor) in a
	// country and/or jurisdiction shall be provided A complete date consisting of day,
	// month and year shall be specified using the ISO 8601 date format NOTE “Placed on
	// the market” refers to the release of the Medicinal Product into the distribution
	// chain.
	RestoreDate string `json:"restoreDate"`
	// Extensions for restoreDate
	RestoreDate_ext *Element `json:"_restoreDate"`
}

// MeasureReport_Stratum is The MeasureReport resource contains the results of the calculation of a measure; and
// optionally a reference to the resources involved in that calculation.
type MeasureReport_Stratum struct {
	// The measure score for this stratum, calculated as appropriate for the measure type
	// and scoring method, and based on only the members of this stratum.
	MeasureScore *Quantity `json:"measureScore"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The value for this stratum, expressed as a CodeableConcept. When defining
	// stratifiers on complex values, the value must be rendered such that the value for
	// each stratum within the stratifier is unique.
	Value *CodeableConcept `json:"value"`
	// A stratifier component value.
	Component []*MeasureReport_Component `json:"component"`
	// The populations that make up the stratum, one for each type of population
	// appropriate to the measure.
	Population []*MeasureReport_Population1 `json:"population"`
}

// ExplanationOfBenefit_ProcessNote is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_ProcessNote struct {
	// Extensions for number
	Number_ext *Element `json:"_number"`
	// The business purpose of the note text.
	Type ExplanationOfBenefit_ProcessNoteType `json:"type"`
	// A code to define the language used in the text of the note.
	Language *CodeableConcept `json:"language"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A number to uniquely identify a note entry.
	Number uint64 `json:"number"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// The explanation or description associated with the processing.
	Text string `json:"text"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
}

type ExplanationOfBenefit_ProcessNoteType string

const (
	ExplanationOfBenefit_ProcessNoteTypeDisplay   ExplanationOfBenefit_ProcessNoteType = "display"
	ExplanationOfBenefit_ProcessNoteTypePrint     ExplanationOfBenefit_ProcessNoteType = "print"
	ExplanationOfBenefit_ProcessNoteTypePrintoper ExplanationOfBenefit_ProcessNoteType = "printoper"
)

// Patient_Communication is Demographics and other administrative information about an individual or animal
// receiving care or other health-related services.
type Patient_Communication struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a
	// hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for
	// English, or "en-US" for American English versus "en-EN" for England English.
	Language *CodeableConcept `json:"language,omitempty"`
	// Indicates whether or not the patient prefers this language (over other languages he
	// masters up a certain level).
	Preferred bool `json:"preferred"`
	// Extensions for preferred
	Preferred_ext *Element `json:"_preferred"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Address is An address expressed using postal conventions (as opposed to GPS or other location
// definition formats).  This data type may be used to convey addresses for use in
// delivering mail as well as for visiting locations which might not be valid for mail
// delivery.  There are a variety of postal address formats defined around the world.
type Address struct {
	// Extensions for city
	City_ext *Element `json:"_city"`
	// The name of the administrative area (county).
	District string `json:"district"`
	// Sub-unit of a country with limited sovereignty in a federally organized country. A
	// code may be used if codes are in common use (e.g. US 2 letter state codes).
	State string `json:"state"`
	// A postal code designating a region defined by the postal service.
	PostalCode string `json:"postalCode"`
	// Extensions for postalCode
	PostalCode_ext *Element `json:"_postalCode"`
	// Extensions for country
	Country_ext *Element `json:"_country"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The purpose of this address.
	Use AddressUse `json:"use"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Extensions for line
	Line_ext []*Element `json:"_line"`
	// Time period when address was/is in use.
	Period *Period `json:"period"`
	// Extensions for use
	Use_ext *Element `json:"_use"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
	// This component contains the house number, apartment number, street name, street
	// direction,  P.O. Box number, delivery hints, and similar address information.
	Line []string `json:"line"`
	// The name of the city, town, suburb, village or other community or delivery center.
	City string `json:"city"`
	// Extensions for district
	District_ext *Element `json:"_district"`
	// Extensions for state
	State_ext *Element `json:"_state"`
	// Country - a nation as commonly understood or generally accepted.
	Country string `json:"country"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Distinguishes between physical addresses (those you can visit) and mailing addresses
	// (e.g. PO Boxes and care-of addresses). Most addresses are both.
	Type AddressType `json:"type"`
	// Specifies the entire address as it should be displayed e.g. on a postal label. This
	// may be provided instead of or as well as the specific parts.
	Text string `json:"text"`
}

type AddressUse string
type AddressType string

const (
	AddressUseHome      AddressUse  = "home"
	AddressUseWork      AddressUse  = "work"
	AddressUseTemp      AddressUse  = "temp"
	AddressUseOld       AddressUse  = "old"
	AddressUseBilling   AddressUse  = "billing"
	AddressTypePostal   AddressType = "postal"
	AddressTypePhysical AddressType = "physical"
	AddressTypeBoth     AddressType = "both"
)

// ChargeItemDefinition_PriceComponent is The ChargeItemDefinition resource provides the properties that apply to the
// (billing) codes necessary to calculate costs and prices. The properties may differ
// largely depending on type and realm, therefore this resource gives only a rough
// structure and requires profiling for each type of billing code system.
type ChargeItemDefinition_PriceComponent struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// This code identifies the type of the component.
	Type string `json:"type"`
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
	// The amount calculated for this component.
	Amount *Money `json:"amount"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// A code that identifies the component. Codes may be used to differentiate between
	// kinds of taxes, surcharges, discounts etc.
	Code *CodeableConcept `json:"code"`
	// The factor that has been applied on the base price for calculating this component.
	Factor float64 `json:"factor"`
}

// ConceptMap_DependsOn is A statement of relationships from one set of concepts to one or more other concepts
// - either concepts in code systems, or data element/data element concepts, or classes
// in class models.
type ConceptMap_DependsOn struct {
	// Extensions for property
	Property_ext *Element `json:"_property"`
	// Identity (code or path) or the element/item/ValueSet/text that the map depends on /
	// refers to.
	Value string `json:"value"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// An absolute URI that identifies the code system of the dependency code (if the
	// source/dependency is a value set that crosses code systems).
	System string `json:"system"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// The display for the code. The display is only provided to help editors when editing
	// the concept map.
	Display string `json:"display"`
	// Extensions for display
	Display_ext *Element `json:"_display"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A reference to an element that holds a coded value that corresponds to a code system
	// property. The idea is that the information model carries an element somewhere that
	// is labeled to correspond with a code system property.
	Property string `json:"property"`
}

// Condition_Evidence is A clinical condition, problem, diagnosis, or other event, situation, issue, or
// clinical concept that has risen to a level of concern.
type Condition_Evidence struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A manifestation or symptom that led to the recording of this condition.
	Code []*CodeableConcept `json:"code"`
	// Links to other relevant information, including pathology reports.
	Detail []*Reference `json:"detail"`
}

// Coverage_CostToBeneficiary is Financial instrument which may be used to reimburse or pay for health care products
// and services. Includes both insurance and self-payment.
type Coverage_CostToBeneficiary struct {
	// A suite of codes indicating exceptions or reductions to patient costs and their
	// effective periods.
	Exception []*Coverage_Exception `json:"exception"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The category of patient centric costs associated with treatment.
	Type *CodeableConcept `json:"type"`
	// The amount due from the patient for the cost category.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// The amount due from the patient for the cost category.
	ValueMoney *Money `json:"valueMoney"`
}

// TerminologyCapabilities_Parameter is A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a
// FHIR Terminology Server that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type TerminologyCapabilities_Parameter struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Expansion Parameter name.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Description of support for parameter.
	Documentation string `json:"documentation"`
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Period is A time period defined by a start and end date and optionally time.
type Period struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The start of the period. The boundary is inclusive.
	Start string `json:"start"`
	// Extensions for start
	Start_ext *Element `json:"_start"`
	// The end of the period. If the end of the period is missing, it means no end was
	// known or planned at the time the instance was created. The start may be in the past,
	// and the end date in the future, which means that period is expected/planned to end
	// at that time.
	End string `json:"end"`
	// Extensions for end
	End_ext *Element `json:"_end"`
}

// ElementDefinition_Base is Captures constraints on each element within the resource, profile, or extension.
type ElementDefinition_Base struct {
	// Minimum cardinality of the base element identified by the path.
	Min uint64 `json:"min"`
	// Extensions for max
	Max_ext *Element `json:"_max"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The Path that identifies the base element - this matches the ElementDefinition.path
	// for that element. Across FHIR, there is only one base definition of any element -
	// that is, an element definition on a [[[StructureDefinition]]] without a
	// StructureDefinition.base.
	Path string `json:"path"`
	// Extensions for path
	Path_ext *Element `json:"_path"`
	// Extensions for min
	Min_ext *Element `json:"_min"`
	// Maximum cardinality of the base element identified by the path.
	Max string `json:"max"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// ElementDefinition_Constraint is Captures constraints on each element within the resource, profile, or extension.
type ElementDefinition_Constraint struct {
	// Extensions for key
	Key_ext *Element `json:"_key"`
	// Description of why this constraint is necessary or appropriate.
	Requirements string `json:"requirements"`
	// Text that can be used to describe the constraint in messages identifying that the
	// constraint has been violated.
	Human string `json:"human"`
	// An XPath expression of constraint that can be executed to see if this constraint is
	// met.
	Xpath string `json:"xpath"`
	// Extensions for xpath
	Xpath_ext *Element `json:"_xpath"`
	// A reference to the original source of the constraint, for traceability purposes.
	Source string `json:"source"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for severity
	Severity_ext *Element `json:"_severity"`
	// A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if
	// this constraint is met.
	Expression string `json:"expression"`
	// Extensions for expression
	Expression_ext *Element `json:"_expression"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Allows identification of which elements have their cardinalities impacted by the
	// constraint.  Will not be referenced for constraints that do not affect cardinality.
	Key string `json:"key"`
	// Extensions for requirements
	Requirements_ext *Element `json:"_requirements"`
	// Identifies the impact constraint violation has on the conformance of the instance.
	Severity ElementDefinition_ConstraintSeverity `json:"severity"`
	// Extensions for human
	Human_ext *Element `json:"_human"`
}

type ElementDefinition_ConstraintSeverity string

const (
	ElementDefinition_ConstraintSeverityError   ElementDefinition_ConstraintSeverity = "error"
	ElementDefinition_ConstraintSeverityWarning ElementDefinition_ConstraintSeverity = "warning"
)

// ConceptMap_Unmapped is A statement of relationships from one set of concepts to one or more other concepts
// - either concepts in code systems, or data element/data element concepts, or classes
// in class models.
type ConceptMap_Unmapped struct {
	// Defines which action to take if there is no match for the source concept in the
	// target system designated for the group. One of 3 actions are possible: use the
	// unmapped code (this is useful when doing a mapping between versions, and only a few
	// codes have changed), use a fixed code (a default code), or alternatively, a
	// reference to a different concept map can be provided (by canonical URL).
	Mode ConceptMap_UnmappedMode `json:"mode"`
	// The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped to a
	// single fixed code.
	Code string `json:"code"`
	// Extensions for display
	Display_ext *Element `json:"_display"`
	// The canonical reference to an additional ConceptMap resource instance to use for
	// mapping if this ConceptMap resource contains no matching mapping for the source
	// concept.
	Url string `json:"url"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// The display for the code. The display is only provided to help editors when editing
	// the concept map.
	Display string `json:"display"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for mode
	Mode_ext *Element `json:"_mode"`
}

type ConceptMap_UnmappedMode string

const (
	ConceptMap_UnmappedModeProvided ConceptMap_UnmappedMode = "provided"
	ConceptMap_UnmappedModeFixed    ConceptMap_UnmappedMode = "fixed"
	ConceptMap_UnmappedModeOtherMap ConceptMap_UnmappedMode = "other-map"
)

// Device_Specialization is A type of a manufactured item that is used in the provision of healthcare without
// being substantially changed through that activity. The device may be a medical or
// non-medical device.
type Device_Specialization struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The standard that is used to operate and communicate.
	SystemType *CodeableConcept `json:"systemType,omitempty"`
	// The version of the standard that is used to operate and communicate.
	Version string `json:"version"`
	// Extensions for version
	Version_ext *Element `json:"_version"`
}

// MedicationDispense_Substitution is Indicates that a medication product is to be or has been dispensed for a named
// person/patient.  This includes a description of the medication product (supply)
// provided and the instructions for administering the medication.  The medication
// dispense is the result of a pharmacy system responding to a medication order.
type MedicationDispense_Substitution struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// True if the dispenser dispensed a different drug or product from what was prescribed.
	WasSubstituted bool `json:"wasSubstituted"`
	// Extensions for wasSubstituted
	WasSubstituted_ext *Element `json:"_wasSubstituted"`
	// A code signifying whether a different drug was dispensed from what was prescribed.
	Type *CodeableConcept `json:"type"`
	// Indicates the reason for the substitution (or lack of substitution) from what was
	// prescribed.
	Reason []*CodeableConcept `json:"reason"`
	// The person or organization that has primary responsibility for the substitution.
	ResponsibleParty []*Reference `json:"responsibleParty"`
}

// Consent_Verification is A record of a healthcare consumer’s  choices, which permits or denies identified
// recipient(s) or recipient role(s) to perform one or more actions within a given
// policy context, for specific purposes and periods of time.
type Consent_Verification struct {
	// Date verification was collected.
	VerificationDate string `json:"verificationDate"`
	// Extensions for verificationDate
	VerificationDate_ext *Element `json:"_verificationDate"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Has the instruction been verified.
	Verified bool `json:"verified"`
	// Extensions for verified
	Verified_ext *Element `json:"_verified"`
	// Who verified the instruction (Patient, Relative or other Authorized Person).
	VerifiedWith *Reference `json:"verifiedWith"`
}

// MedicinalProductIngredient_Substance is An ingredient of a manufactured item or pharmaceutical product.
type MedicinalProductIngredient_Substance struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The ingredient substance.
	Code *CodeableConcept `json:"code,omitempty"`
	// Quantity of the substance or specified substance present in the manufactured item or
	// pharmaceutical product.
	Strength []*MedicinalProductIngredient_Strength `json:"strength"`
}

// SubstanceNucleicAcid_Subunit is Nucleic acids are defined by three distinct elements: the base, sugar and linkage.
// Individual substance/moiety IDs will be created for each of these elements. The
// nucleotide sequence will be always entered in the 5’-3’ direction.
type SubstanceNucleicAcid_Subunit struct {
	// 5.3.6.8.1 Sugar ID (Mandatory).
	Sugar []*SubstanceNucleicAcid_Sugar `json:"sugar"`
	// Actual nucleotide sequence notation from 5' to 3' end using standard single letter
	// codes. In addition to the base sequence, sugar and type of phosphate or
	// non-phosphate linkage should also be captured.
	Sequence string `json:"sequence"`
	// The nucleotide present at the 5’ terminal shall be specified based on a controlled
	// vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’
	// prime nucleotide is the letter at the first position in the sequence. A separate
	// representation would be redundant.
	FivePrime *CodeableConcept `json:"fivePrime"`
	// The linkages between sugar residues will also be captured.
	Linkage []*SubstanceNucleicAcid_Linkage `json:"linkage"`
	// Extensions for subunit
	Subunit_ext *Element `json:"_subunit"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Index of linear sequences of nucleic acids in order of decreasing length. Sequences
	// of the same length will be ordered by molecular weight. Subunits that have identical
	// sequences will be repeated and have sequential subscripts.
	Subunit int64 `json:"subunit"`
	// Extensions for length
	Length_ext *Element `json:"_length"`
	// The nucleotide present at the 3’ terminal shall be specified based on a controlled
	// vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’
	// prime nucleotide is the letter at the last position in the sequence. A separate
	// representation would be redundant.
	ThreePrime *CodeableConcept `json:"threePrime"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// The length of the sequence shall be captured.
	Length int64 `json:"length"`
	// (TBC).
	SequenceAttachment *Attachment `json:"sequenceAttachment"`
}

// SubstancePolymer_MonomerSet is Todo.
type SubstancePolymer_MonomerSet struct {
	// Todo.
	RatioType *CodeableConcept `json:"ratioType"`
	// Todo.
	StartingMaterial []*SubstancePolymer_StartingMaterial `json:"startingMaterial"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// SubstanceReferenceInformation_Gene is Todo.
type SubstanceReferenceInformation_Gene struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Todo.
	GeneSequenceOrigin *CodeableConcept `json:"geneSequenceOrigin"`
	// Todo.
	Gene *CodeableConcept `json:"gene"`
	// Todo.
	Source []*Reference `json:"source"`
}

// ExplanationOfBenefit_Total is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_Total struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A code to indicate the information type of this adjudication record. Information
	// types may include: the value submitted, maximum values or percentages allowed or
	// payable under the plan, amounts that the patient is responsible for in aggregate or
	// pertaining to this item, amounts paid by other coverages, and the benefit payable
	// for this item.
	Category *CodeableConcept `json:"category,omitempty"`
	// Monetary total amount associated with the category.
	Amount *Money `json:"amount,omitempty"`
}

// MedicationKnowledge_Kinetics is Information about a medication that is used to support knowledge.
type MedicationKnowledge_Kinetics struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The drug concentration measured at certain discrete points in time.
	AreaUnderCurve []*Quantity `json:"areaUnderCurve"`
	// The median lethal dose of a drug.
	LethalDose50 []*Quantity `json:"lethalDose50"`
	// The time required for any specified property (e.g., the concentration of a substance
	// in the body) to decrease by half.
	HalfLifePeriod *Duration `json:"halfLifePeriod"`
}

// MessageHeader_Destination is The header for a message exchange that is either requesting or responding to an
// action.  The reference(s) that are the subject of the action as well as other
// information related to the action are typically transmitted in a bundle in which the
// MessageHeader resource instance is the first resource in the bundle.
type MessageHeader_Destination struct {
	// Indicates where the message should be routed to.
	Endpoint string `json:"endpoint"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Human-readable name for the target system.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Identifies the target end system in situations where the initial message
	// transmission is to an intermediary system.
	Target *Reference `json:"target"`
	// Extensions for endpoint
	Endpoint_ext *Element `json:"_endpoint"`
	// Allows data conveyed by a message to be addressed to a particular person or
	// department when routing to a specific application isn't sufficient.
	Receiver *Reference `json:"receiver"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// DataRequirement is Describes a required data item for evaluation in terms of the type of data, and
// optional code or date-based filters of the data.
type DataRequirement struct {
	// The intended subjects of the data requirement. If this element is not provided, a
	// Patient subject is assumed.
	SubjectReference *Reference `json:"subjectReference"`
	// Date filters specify additional constraints on the data in terms of the applicable
	// date range for specific elements. Each date filter specifies an additional
	// constraint on the data, i.e. date filters are AND'ed, not OR'ed.
	DateFilter []*DataRequirement_DateFilter `json:"dateFilter"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The type of the required data, specified as the type name of a resource. For
	// profiles, this value is set to the type of the base resource of the profile.
	Type string `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// The profile of the required data, specified as the uri of the profile definition.
	Profile []string `json:"profile"`
	// Specifies the order of the results to be returned.
	Sort []*DataRequirement_Sort `json:"sort"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Specifies a maximum number of results that are required (uses the _count search
	// parameter).
	Limit uint64 `json:"limit"`
	// Extensions for mustSupport
	MustSupport_ext []*Element `json:"_mustSupport"`
	// Code filters specify additional constraints on the data, specifying the value set of
	// interest for a particular element of the data. Each code filter defines an
	// additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
	CodeFilter []*DataRequirement_CodeFilter `json:"codeFilter"`
	// Extensions for limit
	Limit_ext *Element `json:"_limit"`
	// The intended subjects of the data requirement. If this element is not provided, a
	// Patient subject is assumed.
	SubjectCodeableConcept *CodeableConcept `json:"subjectCodeableConcept"`
	// Indicates that specific elements of the type are referenced by the knowledge module
	// and must be supported by the consumer in order to obtain an effective evaluation.
	// This does not mean that a value is required for this element, only that the
	// consuming system must understand the element and be able to provide values for it if
	// they are available.
	//
	// The value of mustSupport SHALL be a FHIRPath resolveable on the type of the
	// DataRequirement. The path SHALL consist only of identifiers, constant indexers, and
	// .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full
	// details).
	MustSupport []string `json:"mustSupport"`
}

// Expression is A expression that is evaluated in a specified context and returns a value. The
// context of use of the expression must specify the context in which the expression is
// evaluated, and how the result of the expression is used.
type Expression struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// A brief, natural language description of the condition that effectively communicates
	// the intended semantics.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// A short name assigned to the expression to allow for multiple reuse of the
	// expression in the context where it is defined.
	Name string `json:"name"`
	// The media type of the language for the expression.
	Language ExpressionLanguage `json:"language"`
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// An expression in the specified language that returns a value.
	Expression string `json:"expression"`
	// Extensions for expression
	Expression_ext *Element `json:"_expression"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// A URI that defines where the expression is found.
	Reference string `json:"reference"`
	// Extensions for reference
	Reference_ext *Element `json:"_reference"`
}

type ExpressionLanguage string

const (
	ExpressionLanguageTextCql               ExpressionLanguage = "text/cql"
	ExpressionLanguageTextFhirpath          ExpressionLanguage = "text/fhirpath"
	ExpressionLanguageApplicationXFhirQuery ExpressionLanguage = "application/x-fhir-query"
)

// Device_Version is A type of a manufactured item that is used in the provision of healthcare without
// being substantially changed through that activity. The device may be a medical or
// non-medical device.
type Device_Version struct {
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of the device version.
	Type *CodeableConcept `json:"type"`
	// A single component of the device version.
	Component *Identifier `json:"component"`
	// The version text.
	Value string `json:"value"`
}

// DocumentReference_Context is A reference to a document of any kind for any purpose. Provides metadata about the
// document so that the document can be discovered and managed. The scope of a document
// is any seralized object with a mime-type, so includes formal patient centric
// documents (CDA), cliical notes, scanned paper, and non-patient specific documents
// like policy text.
type DocumentReference_Context struct {
	// Related identifiers or resources associated with the DocumentReference.
	Related []*Reference `json:"related"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// This property may convey specifics about the practice setting where the content was
	// created, often reflecting the clinical specialty.
	PracticeSetting *CodeableConcept `json:"practiceSetting"`
	// The Patient Information as known when the document was published. May be a reference
	// to a version specific, or contained.
	SourcePatientInfo *Reference `json:"sourcePatientInfo"`
	// This list of codes represents the main clinical acts, such as a colonoscopy or an
	// appendectomy, being documented. In some cases, the event is inherent in the type
	// Code, such as a "History and Physical Report" in which the procedure being
	// documented is necessarily a "History and Physical" act.
	Event []*CodeableConcept `json:"event"`
	// The time period over which the service that is described by the document was
	// provided.
	Period *Period `json:"period"`
	// The kind of facility where the patient was seen.
	FacilityType *CodeableConcept `json:"facilityType"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Describes the clinical encounter or type of care that the document content is
	// associated with.
	Encounter []*Reference `json:"encounter"`
}

// ExampleScenario_Actor is Example of workflow instance.
type ExampleScenario_Actor struct {
	// The name of the actor as shown in the page.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The description of the actor.
	Description string `json:"description"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// ID or acronym of actor.
	ActorId string `json:"actorId"`
	// The type of actor - person or system.
	Type ExampleScenario_ActorType `json:"type"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for actorId
	ActorId_ext *Element `json:"_actorId"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
}

type ExampleScenario_ActorType string

const (
	ExampleScenario_ActorTypePerson ExampleScenario_ActorType = "person"
	ExampleScenario_ActorTypeEntity ExampleScenario_ActorType = "entity"
)

// NutritionOrder_EnteralFormula is A request to supply a diet, formula feeding (enteral) or oral nutritional supplement
// to a patient/resident.
type NutritionOrder_EnteralFormula struct {
	// The amount of energy (calories) that the formula should provide per specified
	// volume, typically per mL or fluid oz.  For example, an infant may require a formula
	// that provides 24 calories per fluid ounce or an adult may require an enteral formula
	// that provides 1.5 calorie/mL.
	CaloricDensity *Quantity `json:"caloricDensity"`
	// The route or physiological path of administration into the patient's
	// gastrointestinal  tract for purposes of providing the formula feeding, e.g.
	// nasogastric tube.
	RouteofAdministration *CodeableConcept `json:"routeofAdministration"`
	// The maximum total quantity of formula that may be administered to a subject over the
	// period of time, e.g. 1440 mL over 24 hours.
	MaxVolumeToDeliver *Quantity `json:"maxVolumeToDeliver"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The product or brand name of the type of modular component to be added to the
	// formula.
	AdditiveProductName string `json:"additiveProductName"`
	// Extensions for additiveProductName
	AdditiveProductName_ext *Element `json:"_additiveProductName"`
	// Free text formula administration, feeding instructions or additional instructions or
	// information.
	AdministrationInstruction string `json:"administrationInstruction"`
	// Extensions for administrationInstruction
	AdministrationInstruction_ext *Element `json:"_administrationInstruction"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The type of enteral or infant formula such as an adult standard formula with fiber
	// or a soy-based infant formula.
	BaseFormulaType *CodeableConcept `json:"baseFormulaType"`
	// The product or brand name of the enteral or infant formula product such as "ACME
	// Adult Standard Formula".
	BaseFormulaProductName string `json:"baseFormulaProductName"`
	// Extensions for baseFormulaProductName
	BaseFormulaProductName_ext *Element `json:"_baseFormulaProductName"`
	// Indicates the type of modular component such as protein, carbohydrate, fat or fiber
	// to be provided in addition to or mixed with the base formula.
	AdditiveType *CodeableConcept `json:"additiveType"`
	// Formula administration instructions as structured data.  This repeating structure
	// allows for changing the administration rate or volume over time for both bolus and
	// continuous feeding.  An example of this would be an instruction to increase the rate
	// of continuous feeding every 2 hours.
	Administration []*NutritionOrder_Administration `json:"administration"`
}

// Questionnaire_Initial is A structured set of questions intended to guide the collection of answers from
// end-users. Questionnaires provide detailed control over order, presentation,
// phraseology and grouping to allow coherent, consistent data collection.
type Questionnaire_Initial struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for valueInteger
	ValueInteger_ext *Element `json:"_valueInteger"`
	// Extensions for valueDate
	ValueDate_ext *Element `json:"_valueDate"`
	// Extensions for valueDateTime
	ValueDateTime_ext *Element `json:"_valueDateTime"`
	// The actual value to for an initial answer.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// Extensions for valueUri
	ValueUri_ext *Element `json:"_valueUri"`
	// The actual value to for an initial answer.
	ValueReference *Reference `json:"valueReference"`
	// The actual value to for an initial answer.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// The actual value to for an initial answer.
	// pattern ^-?([0]|([1-9][0-9]*))$
	ValueInteger int64 `json:"valueInteger"`
	// The actual value to for an initial answer.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	ValueDate string `json:"valueDate"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// The actual value to for an initial answer.
	ValueAttachment *Attachment `json:"valueAttachment"`
	// The actual value to for an initial answer.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The actual value to for an initial answer.
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	ValueDecimal float64 `json:"valueDecimal"`
	// The actual value to for an initial answer.
	ValueCoding *Coding `json:"valueCoding"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// Extensions for valueDecimal
	ValueDecimal_ext *Element `json:"_valueDecimal"`
	// The actual value to for an initial answer.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	ValueDateTime string `json:"valueDateTime"`
	// The actual value to for an initial answer.
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	ValueTime string `json:"valueTime"`
	// Extensions for valueTime
	ValueTime_ext *Element `json:"_valueTime"`
	// The actual value to for an initial answer.
	// pattern ^\S*$
	ValueUri string `json:"valueUri"`
}

// Claim_Payee is A provider issued list of professional services and products which have been
// provided, or are to be provided, to a patient which is sent to an insurer for
// reimbursement.
type Claim_Payee struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Type of Party to be reimbursed: subscriber, provider, other.
	Type *CodeableConcept `json:"type,omitempty"`
	// Reference to the individual or organization to whom any payment will be made.
	Party *Reference `json:"party"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Claim_Diagnosis is A provider issued list of professional services and products which have been
// provided, or are to be provided, to a patient which is sent to an insurer for
// reimbursement.
type Claim_Diagnosis struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The nature of illness or problem in a coded form or as a reference to an external
	// defined Condition.
	DiagnosisCodeableConcept *CodeableConcept `json:"diagnosisCodeableConcept"`
	// When the condition was observed or the relative ranking.
	Type []*CodeableConcept `json:"type"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// The nature of illness or problem in a coded form or as a reference to an external
	// defined Condition.
	DiagnosisReference *Reference `json:"diagnosisReference"`
	// Indication of whether the diagnosis was present on admission to a facility.
	OnAdmission *CodeableConcept `json:"onAdmission"`
	// A package billing code or bundle code used to group products and services to a
	// particular health condition (such as heart attack) which is based on a predetermined
	// grouping code system.
	PackageCode *CodeableConcept `json:"packageCode"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A number to uniquely identify diagnosis entries.
	Sequence uint64 `json:"sequence"`
}

// Encounter_Location is An interaction between a patient and healthcare provider(s) for the purpose of
// providing healthcare service(s) or assessing the health status of a patient.
type Encounter_Location struct {
	// Time period during which the patient was present at the location.
	Period *Period `json:"period"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The location where the encounter takes place.
	Location *Reference `json:"location,omitempty"`
	// The status of the participants' presence at the specified location during the period
	// specified. If the participant is no longer at the location, then the period will
	// have an end date/time.
	Status Encounter_LocationStatus `json:"status"`
	// Extensions for status
	Status_ext *Element `json:"_status"`
	// This will be used to specify the required levels (bed/ward/room/etc.) desired to be
	// recorded to simplify either messaging or query.
	PhysicalType *CodeableConcept `json:"physicalType"`
}

type Encounter_LocationStatus string

const (
	Encounter_LocationStatusPlanned   Encounter_LocationStatus = "planned"
	Encounter_LocationStatusActive    Encounter_LocationStatus = "active"
	Encounter_LocationStatusReserved  Encounter_LocationStatus = "reserved"
	Encounter_LocationStatusCompleted Encounter_LocationStatus = "completed"
)

// ExplanationOfBenefit_AddItem is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_AddItem struct {
	// Extensions for itemSequence
	ItemSequence_ext []*Element `json:"_itemSequence"`
	// The sequence number of the sub-details woithin the details within the claim item
	// which this line is intended to replace.
	SubDetailSequence []uint64 `json:"subDetailSequence"`
	// Extensions for subDetailSequence
	SubDetailSequence_ext []*Element `json:"_subDetailSequence"`
	// Item typification or modifiers codes to convey additional context for the product or
	// service.
	Modifier []*CodeableConcept `json:"modifier"`
	// Where the product or service was provided.
	LocationReference *Reference `json:"locationReference"`
	// Physical service site on the patient (limb, tooth, etc.).
	BodySite *CodeableConcept `json:"bodySite"`
	// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
	SubSite []*CodeableConcept `json:"subSite"`
	// Identifies the program under which this may be recovered.
	ProgramCode []*CodeableConcept `json:"programCode"`
	// Claim items which this service line is intended to replace.
	ItemSequence []uint64 `json:"itemSequence"`
	// When the value is a group code then this item collects a set of related claim
	// details, otherwise this contains the product, service, drug or other billing code
	// for the item.
	ProductOrService *CodeableConcept `json:"productOrService,omitempty"`
	// Where the product or service was provided.
	LocationCodeableConcept *CodeableConcept `json:"locationCodeableConcept"`
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity"`
	// A real number that represents a multiplier used in determining the overall value of
	// services delivered and/or goods received. The concept of a Factor allows for a
	// discount or surcharge multiplier to be applied to a monetary amount.
	Factor float64 `json:"factor"`
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []uint64 `json:"noteNumber"`
	// The second-tier service adjudications for payor added services.
	Detail []*ExplanationOfBenefit_Detail1 `json:"detail"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The date or dates when the service or product was supplied, performed or completed.
	ServicedPeriod *Period `json:"servicedPeriod"`
	// Where the product or service was provided.
	LocationAddress *Address `json:"locationAddress"`
	// The quantity times the unit price for an additional service or product or charge.
	Net *Money `json:"net"`
	// Extensions for noteNumber
	NoteNumber_ext []*Element `json:"_noteNumber"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *Money `json:"unitPrice"`
	// The adjudication results.
	Adjudication []*ExplanationOfBenefit_Adjudication `json:"adjudication"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The sequence number of the details within the claim item which this line is intended
	// to replace.
	DetailSequence []uint64 `json:"detailSequence"`
	// The providers who are authorized for the services rendered to the patient.
	Provider []*Reference `json:"provider"`
	// The date or dates when the service or product was supplied, performed or completed.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	ServicedDate string `json:"servicedDate"`
	// Extensions for detailSequence
	DetailSequence_ext []*Element `json:"_detailSequence"`
	// Extensions for servicedDate
	ServicedDate_ext *Element `json:"_servicedDate"`
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
}

// NutritionOrder_Supplement is A request to supply a diet, formula feeding (enteral) or oral nutritional supplement
// to a patient/resident.
type NutritionOrder_Supplement struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The kind of nutritional supplement product required such as a high protein or
	// pediatric clear liquid supplement.
	Type *CodeableConcept `json:"type"`
	// The product or brand name of the nutritional supplement such as "Acme Protein Shake".
	ProductName string `json:"productName"`
	// Extensions for productName
	ProductName_ext *Element `json:"_productName"`
	// The amount of the nutritional supplement to be given.
	Quantity *Quantity `json:"quantity"`
	// Extensions for instruction
	Instruction_ext *Element `json:"_instruction"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The time period and frequency at which the supplement(s) should be given.  The
	// supplement should be given for the combination of all schedules if more than one
	// schedule is present.
	Schedule []*Timing `json:"schedule"`
	// Free text or additional instructions or information pertaining to the oral
	// supplement.
	Instruction string `json:"instruction"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// CommunicationRequest_Payload is A request to convey information; e.g. the CDS system proposes that an alert be sent
// to a responsible provider, the CDS system proposes that the public health agency be
// notified about a reportable condition.
type CommunicationRequest_Payload struct {
	// The communicated content (or for multi-part communications, one portion of the
	// communication).
	// pattern ^[ \r\n\t\S]+$
	ContentString string `json:"contentString"`
	// Extensions for contentString
	ContentString_ext *Element `json:"_contentString"`
	// The communicated content (or for multi-part communications, one portion of the
	// communication).
	ContentAttachment *Attachment `json:"contentAttachment"`
	// The communicated content (or for multi-part communications, one portion of the
	// communication).
	ContentReference *Reference `json:"contentReference"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// Coverage_Class is Financial instrument which may be used to reimburse or pay for health care products
// and services. Includes both insurance and self-payment.
type Coverage_Class struct {
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// A short description for the class.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of classification for which an insurer-specific class label or number and
	// optional name is provided, for example may be used to identify a class of coverage
	// or employer group, Policy, Plan.
	Type *CodeableConcept `json:"type,omitempty"`
	// The alphanumeric string value associated with the insurer issued label.
	Value string `json:"value"`
}

// SubstanceSpecification_Official is The detailed description of a substance, typically at a level beyond what is used
// for prescribing.
type SubstanceSpecification_Official struct {
	// The status of the official name.
	Status *CodeableConcept `json:"status"`
	// Date of official name change.
	Date string `json:"date"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Which authority uses this official name.
	Authority *CodeableConcept `json:"authority"`
}

// FamilyMemberHistory_Condition is Significant health conditions for a person related to the patient relevant in the
// context of care for the patient.
type FamilyMemberHistory_Condition struct {
	// Either the age of onset, range of approximate age or descriptive string can be
	// recorded.  For conditions with multiple occurrences, this describes the first known
	// occurrence.
	OnsetPeriod *Period `json:"onsetPeriod"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The actual condition specified. Could be a coded condition (like MI or Diabetes) or
	// a less specific string like 'cancer' depending on how much is known about the
	// condition and the capabilities of the creating system.
	Code *CodeableConcept `json:"code,omitempty"`
	// Indicates what happened following the condition.  If the condition resulted in
	// death, deceased date is captured on the relation.
	Outcome *CodeableConcept `json:"outcome"`
	// This condition contributed to the cause of death of the related person. If
	// contributedToDeath is not populated, then it is unknown.
	ContributedToDeath bool `json:"contributedToDeath"`
	// Extensions for contributedToDeath
	ContributedToDeath_ext *Element `json:"_contributedToDeath"`
	// Either the age of onset, range of approximate age or descriptive string can be
	// recorded.  For conditions with multiple occurrences, this describes the first known
	// occurrence.
	OnsetRange *Range `json:"onsetRange"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Either the age of onset, range of approximate age or descriptive string can be
	// recorded.  For conditions with multiple occurrences, this describes the first known
	// occurrence.
	OnsetAge *Age `json:"onsetAge"`
	// Either the age of onset, range of approximate age or descriptive string can be
	// recorded.  For conditions with multiple occurrences, this describes the first known
	// occurrence.
	// pattern ^[ \r\n\t\S]+$
	OnsetString string `json:"onsetString"`
	// Extensions for onsetString
	OnsetString_ext *Element `json:"_onsetString"`
	// An area where general notes can be placed about this specific condition.
	Note []*Annotation `json:"note"`
}

// InsurancePlan_Limit is Details of a Health Insurance product/plan provided by an organization.
type InsurancePlan_Limit struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The maximum amount of a service item a plan will pay for a covered benefit.  For
	// examples. wellness visits, or eyeglasses.
	Value *Quantity `json:"value"`
	// The specific limit on the benefit.
	Code *CodeableConcept `json:"code"`
}

// PlanDefinition_Participant is This resource allows for the definition of various types of plans as a sharable,
// consumable, and executable artifact. The resource is general enough to support the
// description of a broad range of clinical artifacts such as clinical decision support
// rules, order sets and protocols.
type PlanDefinition_Participant struct {
	// The role the participant should play in performing the described action.
	Role *CodeableConcept `json:"role"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of participant in the action.
	Type PlanDefinition_ParticipantType `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
}

type PlanDefinition_ParticipantType string

const (
	PlanDefinition_ParticipantTypePatient       PlanDefinition_ParticipantType = "patient"
	PlanDefinition_ParticipantTypePractitioner  PlanDefinition_ParticipantType = "practitioner"
	PlanDefinition_ParticipantTypeRelatedPerson PlanDefinition_ParticipantType = "related-person"
	PlanDefinition_ParticipantTypeDevice        PlanDefinition_ParticipantType = "device"
)

// ElementDefinition_Discriminator is Captures constraints on each element within the resource, profile, or extension.
type ElementDefinition_Discriminator struct {
	// How the element value is interpreted when discrimination is evaluated.
	Type ElementDefinition_DiscriminatorType `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple),
	// that is used to identify the element on which discrimination is based.
	Path string `json:"path"`
	// Extensions for path
	Path_ext *Element `json:"_path"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

type ElementDefinition_DiscriminatorType string

const (
	ElementDefinition_DiscriminatorTypeValue   ElementDefinition_DiscriminatorType = "value"
	ElementDefinition_DiscriminatorTypeExists  ElementDefinition_DiscriminatorType = "exists"
	ElementDefinition_DiscriminatorTypePattern ElementDefinition_DiscriminatorType = "pattern"
	ElementDefinition_DiscriminatorTypeType    ElementDefinition_DiscriminatorType = "type"
	ElementDefinition_DiscriminatorTypeProfile ElementDefinition_DiscriminatorType = "profile"
)

// AuditEvent_Agent is A record of an event made for purposes of maintaining a security log. Typical uses
// include detection of intrusion attempts and monitoring for inappropriate usage.
type AuditEvent_Agent struct {
	// Reference to who this agent is that was involved in the event.
	Who *Reference `json:"who"`
	// The reason (purpose of use), specific to this agent, that was used during the event
	// being recorded.
	PurposeOfUse []*CodeableConcept `json:"purposeOfUse"`
	// Alternative agent Identifier. For a human, this should be a user identifier text
	// string from authentication system. This identifier would be one known to a common
	// authentication system (e.g. single sign-on), if available.
	AltId string `json:"altId"`
	// The policy or plan that authorized the activity being recorded. Typically, a single
	// activity may have multiple applicable policies, such as patient consent, guarantor
	// funding, etc. The policy would also indicate the security token used.
	Policy []string `json:"policy"`
	// Type of media involved. Used when the event is about exporting/importing onto media.
	Media *Coding `json:"media"`
	// Specification of the participation type the user plays when performing the event.
	Type *CodeableConcept `json:"type"`
	// The security role that the user was acting under, that come from local codes defined
	// by the access control security system (e.g. RBAC, ABAC) used in the local context.
	Role []*CodeableConcept `json:"role"`
	// Extensions for altId
	AltId_ext *Element `json:"_altId"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Extensions for requestor
	Requestor_ext *Element `json:"_requestor"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for policy
	Policy_ext []*Element `json:"_policy"`
	// Logical network location for application activity, if the activity has a network
	// location.
	Network *AuditEvent_Network `json:"network"`
	// Human-meaningful name for the agent.
	Name string `json:"name"`
	// Indicator that the user is or is not the requestor, or initiator, for the event
	// being audited.
	Requestor bool `json:"requestor"`
	// Where the event occurred.
	Location *Reference `json:"location"`
}

// Encounter_Participant is An interaction between a patient and healthcare provider(s) for the purpose of
// providing healthcare service(s) or assessing the health status of a patient.
type Encounter_Participant struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Role of participant in encounter.
	Type []*CodeableConcept `json:"type"`
	// The period of time that the specified participant participated in the encounter.
	// These can overlap or be sub-sets of the overall encounter's period.
	Period *Period `json:"period"`
	// Persons involved in the encounter other than the patient.
	Individual *Reference `json:"individual"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Medication_Batch is This resource is primarily used for the identification and definition of a
// medication for the purposes of prescribing, dispensing, and administering a
// medication as well as for making statements about medication use.
type Medication_Batch struct {
	// Extensions for expirationDate
	ExpirationDate_ext *Element `json:"_expirationDate"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The assigned lot number of a batch of the specified product.
	LotNumber string `json:"lotNumber"`
	// Extensions for lotNumber
	LotNumber_ext *Element `json:"_lotNumber"`
	// When this specific batch of product will expire.
	ExpirationDate string `json:"expirationDate"`
}

// MolecularSequence_ReferenceSeq is Raw data describing a biological sequence.
type MolecularSequence_ReferenceSeq struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for genomeBuild
	GenomeBuild_ext *Element `json:"_genomeBuild"`
	// Extensions for orientation
	Orientation_ext *Element `json:"_orientation"`
	// Extensions for referenceSeqString
	ReferenceSeqString_ext *Element `json:"_referenceSeqString"`
	// Extensions for strand
	Strand_ext *Element `json:"_strand"`
	// The Genome Build used for reference, following GRCh build versions e.g. 'GRCh 37'.
	// Version number must be included if a versioned release of a primary build was used.
	GenomeBuild string `json:"genomeBuild"`
	// A pointer to another MolecularSequence entity as reference sequence.
	ReferenceSeqPointer *Reference `json:"referenceSeqPointer"`
	// A relative reference to a DNA strand based on gene orientation. The strand that
	// contains the open reading frame of the gene is the "sense" strand, and the opposite
	// complementary strand is the "antisense" strand.
	Orientation MolecularSequence_ReferenceSeqOrientation `json:"orientation"`
	// A string like "ACGT".
	ReferenceSeqString string `json:"referenceSeqString"`
	// An absolute reference to a strand. The Watson strand is the strand whose 5'-end is
	// on the short arm of the chromosome, and the Crick strand as the one whose 5'-end is
	// on the long arm.
	Strand MolecularSequence_ReferenceSeqStrand `json:"strand"`
	// Start position of the window on the reference sequence. If the coordinate system is
	// either 0-based or 1-based, then start position is inclusive.
	WindowStart int64 `json:"windowStart"`
	// Extensions for windowStart
	WindowStart_ext *Element `json:"_windowStart"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Structural unit composed of a nucleic acid molecule which controls its own
	// replication through the interaction of specific proteins at one or more origins of
	// replication
	// ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).
	Chromosome *CodeableConcept `json:"chromosome"`
	// Reference identifier of reference sequence submitted to NCBI. It must match the type
	// in the MolecularSequence.type field. For example, the prefix, “NG_” identifies
	// reference sequence for genes, “NM_” for messenger RNA transcripts, and “NP_”
	// for amino acid sequences.
	ReferenceSeqId *CodeableConcept `json:"referenceSeqId"`
	// End position of the window on the reference sequence. If the coordinate system is
	// 0-based then end is exclusive and does not include the last position. If the
	// coordinate system is 1-base, then end is inclusive and includes the last position.
	WindowEnd int64 `json:"windowEnd"`
	// Extensions for windowEnd
	WindowEnd_ext *Element `json:"_windowEnd"`
}

type MolecularSequence_ReferenceSeqOrientation string
type MolecularSequence_ReferenceSeqStrand string

const (
	MolecularSequence_ReferenceSeqOrientationSense     MolecularSequence_ReferenceSeqOrientation = "sense"
	MolecularSequence_ReferenceSeqOrientationAntisense MolecularSequence_ReferenceSeqOrientation = "antisense"
	MolecularSequence_ReferenceSeqStrandWatson         MolecularSequence_ReferenceSeqStrand      = "watson"
	MolecularSequence_ReferenceSeqStrandCrick          MolecularSequence_ReferenceSeqStrand      = "crick"
)

// SubstancePolymer_StructuralRepresentation is Todo.
type SubstancePolymer_StructuralRepresentation struct {
	// Todo.
	Type *CodeableConcept `json:"type"`
	// Todo.
	Representation string `json:"representation"`
	// Extensions for representation
	Representation_ext *Element `json:"_representation"`
	// Todo.
	Attachment *Attachment `json:"attachment"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// ExampleScenario_Version is Example of workflow instance.
type ExampleScenario_Version struct {
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The identifier of a specific version of a resource.
	VersionId string `json:"versionId"`
	// Extensions for versionId
	VersionId_ext *Element `json:"_versionId"`
	// The description of the resource version.
	Description string `json:"description"`
}

// MedicationKnowledge_Monograph is Information about a medication that is used to support knowledge.
type MedicationKnowledge_Monograph struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The category of documentation about the medication. (e.g. professional monograph,
	// patient education monograph).
	Type *CodeableConcept `json:"type"`
	// Associated documentation about the medication.
	Source *Reference `json:"source"`
}

// Extension is Optional Extension Element - found in all resources.
type Extension struct {
	// Extensions for valueInstant
	ValueInstant_ext *Element `json:"_valueInstant"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueAttachment *Attachment `json:"valueAttachment"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueContactPoint *ContactPoint `json:"valueContactPoint"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueReference *Reference `json:"valueReference"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^\S*$
	ValueCanonical string `json:"valueCanonical"`
	// Extensions for valueCode
	ValueCode_ext *Element `json:"_valueCode"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueMoney *Money `json:"valueMoney"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueTiming *Timing `json:"valueTiming"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueDosage *Dosage `json:"valueDosage"`
	// Extensions for valueCanonical
	ValueCanonical_ext *Element `json:"_valueCanonical"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$
	ValueDateTime string `json:"valueDateTime"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$
	ValueInstant string `json:"valueInstant"`
	// Extensions for valueInteger
	ValueInteger_ext *Element `json:"_valueInteger"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^\S*$
	ValueUri string `json:"valueUri"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueAnnotation *Annotation `json:"valueAnnotation"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueCoding *Coding `json:"valueCoding"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Extensions for valueDateTime
	ValueDateTime_ext *Element `json:"_valueDateTime"`
	// Extensions for valuePositiveInt
	ValuePositiveInt_ext *Element `json:"_valuePositiveInt"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueDuration *Duration `json:"valueDuration"`
	// Extensions for valueOid
	ValueOid_ext *Element `json:"_valueOid"`
	// Extensions for valueUri
	ValueUri_ext *Element `json:"_valueUri"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueSignature *Signature `json:"valueSignature"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueUsageContext *UsageContext `json:"valueUsageContext"`
	// Extensions for valueId
	ValueId_ext *Element `json:"_valueId"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^[ \r\n\t\S]+$
	ValueMarkdown string `json:"valueMarkdown"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueTriggerDefinition *TriggerDefinition `json:"valueTriggerDefinition"`
	// Extensions for url
	Url_ext *Element `json:"_url"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^\S*$
	ValueUrl string `json:"valueUrl"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^[0]|([1-9][0-9]*)$
	ValueUnsignedInt uint64 `json:"valueUnsignedInt"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueSampledData *SampledData `json:"valueSampledData"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueAge *Age `json:"valueAge"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueRelatedArtifact *RelatedArtifact `json:"valueRelatedArtifact"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$
	ValueDecimal float64 `json:"valueDecimal"`
	// Extensions for valueUuid
	ValueUuid_ext *Element `json:"_valueUuid"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueDataRequirement *DataRequirement `json:"valueDataRequirement"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$
	ValueTime string `json:"valueTime"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueContributor *Contributor `json:"valueContributor"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueIdentifier *Identifier `json:"valueIdentifier"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueRange *Range `json:"valueRange"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^[^\s]+(\s[^\s]+)*$
	ValueCode string `json:"valueCode"`
	// Extensions for valueUnsignedInt
	ValueUnsignedInt_ext *Element `json:"_valueUnsignedInt"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueAddress *Address `json:"valueAddress"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueQuantity *Quantity `json:"valueQuantity"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for valueMarkdown
	ValueMarkdown_ext *Element `json:"_valueMarkdown"`
	// Extensions for valueDecimal
	ValueDecimal_ext *Element `json:"_valueDecimal"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^-?([0]|([1-9][0-9]*))$
	ValueInteger int64 `json:"valueInteger"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$
	ValueOid string `json:"valueOid"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueHumanName *HumanName `json:"valueHumanName"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueExpression *Expression `json:"valueExpression"`
	// Extensions for valueBase64Binary
	ValueBase64Binary_ext *Element `json:"_valueBase64Binary"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueContactDetail *ContactDetail `json:"valueContactDetail"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueParameterDefinition *ParameterDefinition `json:"valueParameterDefinition"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	ValueDate string `json:"valueDate"`
	// Extensions for valueDate
	ValueDate_ext *Element `json:"_valueDate"`
	// Extensions for valueUrl
	ValueUrl_ext *Element `json:"_valueUrl"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueCount *Count `json:"valueCount"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueDistance *Distance `json:"valueDistance"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValuePeriod *Period `json:"valuePeriod"`
	// Source of the definition for the extension code - a logical name or a URL.
	Url string `json:"url"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^(\s*([0-9a-zA-Z\+/=]){4}\s*)+$
	ValueBase64Binary string `json:"valueBase64Binary"`
	// Extensions for valueTime
	ValueTime_ext *Element `json:"_valueTime"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
	ValueUuid string `json:"valueUuid"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^[A-Za-z0-9\-\.]{1,64}$
	ValueId string `json:"valueId"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	// pattern ^[1-9][0-9]*$
	ValuePositiveInt uint64 `json:"valuePositiveInt"`
	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	ValueRatio *Ratio `json:"valueRatio"`
}

// Timing is Specifies an event that may occur multiple times. Timing schedules are used to
// record when things are planned, expected or requested to occur. The most common
// usage is in dosage instructions for medications. They are also used when planning
// care of various kinds, and may be used for reporting the schedule to which past
// regular activities were carried out.
type Timing struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Identifies specific times when the event occurs.
	Event []string `json:"event"`
	// Extensions for event
	Event_ext []*Element `json:"_event"`
	// A set of rules that describe when the event is scheduled.
	Repeat *Timing_Repeat `json:"repeat"`
	// A code for the timing schedule (or just text in code.text). Some codes such as BID
	// are ubiquitous, but many institutions define their own additional codes. If a code
	// is provided, the code is understood to be a complete statement of whatever is
	// specified in the structured timing data, and either the code or the data may be used
	// to interpret the Timing, with the exception that .repeat.bounds still applies over
	// the code (and is not contained in the code).
	Code *CodeableConcept `json:"code"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// GraphDefinition_Link is A formal computable definition of a graph of resources - that is, a coherent set of
// resources that form a graph by following references. The Graph Definition resource
// defines a set and makes rules about the set.
type GraphDefinition_Link struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Information about why this link is of interest in this graph definition.
	Description string `json:"description"`
	// Potential target for the link.
	Target []*GraphDefinition_Target `json:"target"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A FHIR expression that identifies one of FHIR References to other resources.
	Path string `json:"path"`
	// Extensions for sliceName
	SliceName_ext *Element `json:"_sliceName"`
	// Minimum occurrences for this link.
	Min int64 `json:"min"`
	// Maximum occurrences for this link.
	Max string `json:"max"`
	// Extensions for max
	Max_ext *Element `json:"_max"`
	// Extensions for path
	Path_ext *Element `json:"_path"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Which slice (if profiled).
	SliceName string `json:"sliceName"`
	// Extensions for min
	Min_ext *Element `json:"_min"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
}

// TestScript_Action1 is A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
type TestScript_Action1 struct {
	// An operation would involve a REST request to a server.
	Operation *TestScript_Operation `json:"operation"`
	// Evaluates the results of previous operations to determine if the server under test
	// behaves appropriately.
	Assert *TestScript_Assert `json:"assert"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// Medication_Ingredient is This resource is primarily used for the identification and definition of a
// medication for the purposes of prescribing, dispensing, and administering a
// medication as well as for making statements about medication use.
type Medication_Ingredient struct {
	// Extensions for isActive
	IsActive_ext *Element `json:"_isActive"`
	// Specifies how many (or how much) of the items there are in this Medication.  For
	// example, 250 mg per tablet.  This is expressed as a ratio where the numerator is
	// 250mg and the denominator is 1 tablet.
	Strength *Ratio `json:"strength"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The actual ingredient - either a substance (simple ingredient) or another medication
	// of a medication.
	ItemCodeableConcept *CodeableConcept `json:"itemCodeableConcept"`
	// The actual ingredient - either a substance (simple ingredient) or another medication
	// of a medication.
	ItemReference *Reference `json:"itemReference"`
	// Indication of whether this ingredient affects the therapeutic action of the drug.
	IsActive bool `json:"isActive"`
}

// StructureDefinition_Context is A definition of a FHIR structure. This resource is used to describe the underlying
// resources, data types defined in FHIR, and also for describing extensions and
// constraints on resources and data types.
type StructureDefinition_Context struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Defines how to interpret the expression that defines what the context of the
	// extension is.
	Type StructureDefinition_ContextType `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// An expression that defines where an extension can be used in resources.
	Expression string `json:"expression"`
	// Extensions for expression
	Expression_ext *Element `json:"_expression"`
}

type StructureDefinition_ContextType string

const (
	StructureDefinition_ContextTypeFhirpath  StructureDefinition_ContextType = "fhirpath"
	StructureDefinition_ContextTypeElement   StructureDefinition_ContextType = "element"
	StructureDefinition_ContextTypeExtension StructureDefinition_ContextType = "extension"
)

// Count is A measured amount (or an amount that can potentially be measured). Note that
// measured amounts include amounts that are not precisely quantified, including
// amounts involving arbitrary units and floating currencies.
type Count struct {
	// Extensions for unit
	Unit_ext *Element `json:"_unit"`
	// The identification of the system that provides the coded form of the unit.
	System string `json:"system"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The value of the measured amount. The value includes an implicit precision in the
	// presentation of the value.
	Value float64 `json:"value"`
	// A human-readable form of the unit.
	Unit string `json:"unit"`
	// Extensions for comparator
	Comparator_ext *Element `json:"_comparator"`
	// Extensions for system
	System_ext *Element `json:"_system"`
	// A computer processable form of the unit in some unit representation system.
	Code string `json:"code"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// How the value should be understood and represented - whether the actual value is
	// greater or less than the stated value due to measurement issues; e.g. if the
	// comparator is "<" , then the real value is < stated value.
	Comparator CountComparator `json:"comparator"`
}

type CountComparator string

const (
	CountComparatorLt   CountComparator = "<"
	CountComparatorLtEq CountComparator = "<="
	CountComparatorGtEq CountComparator = ">="
	CountComparatorGt   CountComparator = ">"
)

// ChargeItemDefinition_PropertyGroup is The ChargeItemDefinition resource provides the properties that apply to the
// (billing) codes necessary to calculate costs and prices. The properties may differ
// largely depending on type and realm, therefore this resource gives only a rough
// structure and requires profiling for each type of billing code system.
type ChargeItemDefinition_PropertyGroup struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Expressions that describe applicability criteria for the priceComponent.
	Applicability []*ChargeItemDefinition_Applicability `json:"applicability"`
	// The price for a ChargeItem may be calculated as a base price with
	// surcharges/deductions that apply in certain conditions. A ChargeItemDefinition
	// resource that defines the prices, factors and conditions that apply to a billing
	// code is currently under development. The priceComponent element can be used to offer
	// transparency to the recipient of the Invoice of how the prices have been calculated.
	PriceComponent []*ChargeItemDefinition_PriceComponent `json:"priceComponent"`
}

// Coverage_Exception is Financial instrument which may be used to reimburse or pay for health care products
// and services. Includes both insurance and self-payment.
type Coverage_Exception struct {
	// The timeframe during when the exception is in force.
	Period *Period `json:"period"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The code for the specific exception.
	Type *CodeableConcept `json:"type,omitempty"`
}

// CoverageEligibilityRequest_Insurance is The CoverageEligibilityRequest provides patient and insurance coverage information
// to an insurer for them to respond, in the form of an CoverageEligibilityResponse,
// with information regarding whether the stated coverage is valid and in-force and
// optionally to provide the insurance details of the policy.
type CoverageEligibilityRequest_Insurance struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A flag to indicate that this Coverage is to be used for evaluation of this request
	// when set to true.
	Focal bool `json:"focal"`
	// Extensions for focal
	Focal_ext *Element `json:"_focal"`
	// Reference to the insurance card level information contained in the Coverage
	// resource. The coverage issuing insurer will use these details to locate the
	// patient's actual coverage within the insurer's information system.
	Coverage *Reference `json:"coverage,omitempty"`
	// A business agreement number established between the provider and the insurer for
	// special business processing purposes.
	BusinessArrangement string `json:"businessArrangement"`
	// Extensions for businessArrangement
	BusinessArrangement_ext *Element `json:"_businessArrangement"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// CoverageEligibilityResponse_Benefit is This resource provides eligibility and plan details from the processing of an
// CoverageEligibilityRequest resource.
type CoverageEligibilityResponse_Benefit struct {
	// The quantity of the benefit which have been consumed to date.
	// pattern ^[ \r\n\t\S]+$
	UsedString string `json:"usedString"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Classification of benefit being provided.
	Type *CodeableConcept `json:"type,omitempty"`
	// Extensions for allowedUnsignedInt
	AllowedUnsignedInt_ext *Element `json:"_allowedUnsignedInt"`
	// Extensions for allowedString
	AllowedString_ext *Element `json:"_allowedString"`
	// The quantity of the benefit which is permitted under the coverage.
	// pattern ^[0]|([1-9][0-9]*)$
	AllowedUnsignedInt uint64 `json:"allowedUnsignedInt"`
	// The quantity of the benefit which is permitted under the coverage.
	AllowedMoney *Money `json:"allowedMoney"`
	// The quantity of the benefit which have been consumed to date.
	UsedMoney *Money `json:"usedMoney"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// The quantity of the benefit which is permitted under the coverage.
	// pattern ^[ \r\n\t\S]+$
	AllowedString string `json:"allowedString"`
	// Extensions for usedUnsignedInt
	UsedUnsignedInt_ext *Element `json:"_usedUnsignedInt"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The quantity of the benefit which have been consumed to date.
	// pattern ^[0]|([1-9][0-9]*)$
	UsedUnsignedInt uint64 `json:"usedUnsignedInt"`
	// Extensions for usedString
	UsedString_ext *Element `json:"_usedString"`
}

// TerminologyCapabilities_Filter is A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a
// FHIR Terminology Server that may be used as a statement of actual server
// functionality or a statement of required or desired server implementation.
type TerminologyCapabilities_Filter struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Code of the property supported.
	Code string `json:"code"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// Operations supported for the property.
	Op []string `json:"op"`
	// Extensions for op
	Op_ext []*Element `json:"_op"`
}

// MedicinalProduct_CountryLanguage is Detailed definition of a medicinal product, typically for uses other than direct
// patient care (e.g. regulatory use).
type MedicinalProduct_CountryLanguage struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Country code for where this name applies.
	Country *CodeableConcept `json:"country,omitempty"`
	// Jurisdiction code for where this name applies.
	Jurisdiction *CodeableConcept `json:"jurisdiction"`
	// Language code for this name.
	Language *CodeableConcept `json:"language,omitempty"`
}

// Dosage_DoseAndRate is Indicates how the medication is/was taken or should be taken by the patient.
type Dosage_DoseAndRate struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Amount of medication per dose.
	DoseQuantity *Quantity `json:"doseQuantity"`
	// Amount of medication per unit of time.
	RateRatio *Ratio `json:"rateRatio"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The kind of dose or rate specified, for example, ordered or calculated.
	Type *CodeableConcept `json:"type"`
	// Amount of medication per dose.
	DoseRange *Range `json:"doseRange"`
	// Amount of medication per unit of time.
	RateRange *Range `json:"rateRange"`
	// Amount of medication per unit of time.
	RateQuantity *Quantity `json:"rateQuantity"`
}

// CatalogEntry_RelatedEntry is Catalog entries are wrappers that contextualize items included in a catalog.
type CatalogEntry_RelatedEntry struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The type of relation to the related item: child, parent, packageContent,
	// containerPackage, usedIn, uses, requires, etc.
	Relationtype CatalogEntry_RelatedEntryRelationtype `json:"relationtype"`
	// Extensions for relationtype
	Relationtype_ext *Element `json:"_relationtype"`
	// The reference to the related item.
	Item *Reference `json:"item,omitempty"`
}

type CatalogEntry_RelatedEntryRelationtype string

const (
	CatalogEntry_RelatedEntryRelationtypeTriggers     CatalogEntry_RelatedEntryRelationtype = "triggers"
	CatalogEntry_RelatedEntryRelationtypeIsReplacedBy CatalogEntry_RelatedEntryRelationtype = "is-replaced-by"
)

// ClaimResponse_SubDetail1 is This resource provides the adjudication details from the processing of a Claim
// resource.
type ClaimResponse_SubDetail1 struct {
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []uint64 `json:"noteNumber"`
	// The adjudication results.
	Adjudication []*ClaimResponse_Adjudication `json:"adjudication,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *Money `json:"unitPrice"`
	// Extensions for factor
	Factor_ext *Element `json:"_factor"`
	// The quantity times the unit price for an additional service or product or charge.
	Net *Money `json:"net"`
	// Extensions for noteNumber
	NoteNumber_ext []*Element `json:"_noteNumber"`
	// When the value is a group code then this item collects a set of related claim
	// details, otherwise this contains the product, service, drug or other billing code
	// for the item.
	ProductOrService *CodeableConcept `json:"productOrService,omitempty"`
	// Item typification or modifiers codes to convey additional context for the product or
	// service.
	Modifier []*CodeableConcept `json:"modifier"`
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity"`
	// A real number that represents a multiplier used in determining the overall value of
	// services delivered and/or goods received. The concept of a Factor allows for a
	// discount or surcharge multiplier to be applied to a monetary amount.
	Factor float64 `json:"factor"`
}

// Contract_Friendly is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract_Friendly struct {
	// Human readable rendering of this Contract in a format and representation intended to
	// enhance comprehension and ensure understandability.
	ContentAttachment *Attachment `json:"contentAttachment"`
	// Human readable rendering of this Contract in a format and representation intended to
	// enhance comprehension and ensure understandability.
	ContentReference *Reference `json:"contentReference"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// Contract_Signer is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract_Signer struct {
	// Role of this Contract signer, e.g. notary, grantee.
	Type *Coding `json:"type,omitempty"`
	// Party which is a signator to this Contract.
	Party *Reference `json:"party,omitempty"`
	// Legally binding Contract DSIG signature contents in Base64.
	Signature []*Signature `json:"signature,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// DeviceRequest_Parameter is Represents a request for a patient to employ a medical device. The device may be an
// implantable device, or an external assistive device, such as a walker.
type DeviceRequest_Parameter struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A code or string that identifies the device detail being asserted.
	Code *CodeableConcept `json:"code"`
	// The value of the device detail.
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept"`
	// The value of the device detail.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The value of the device detail.
	ValueRange *Range `json:"valueRange"`
	// The value of the device detail.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
}

// ExplanationOfBenefit_Payment is This resource provides: the claim details; adjudication details from the processing
// of a Claim; and optionally account balance information, for informing the subscriber
// of the benefits provided.
type ExplanationOfBenefit_Payment struct {
	// Total amount of all adjustments to this payment included in this transaction which
	// are not related to this claim's adjudication.
	Adjustment *Money `json:"adjustment"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Benefits payable less any payment adjustment.
	Amount *Money `json:"amount"`
	// Issuer's unique identifier for the payment instrument.
	Identifier *Identifier `json:"identifier"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Reason for the payment adjustment.
	AdjustmentReason *CodeableConcept `json:"adjustmentReason"`
	// Estimated date the payment will be issued or the actual issue date of payment.
	Date string `json:"date"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Whether this represents partial or complete payment of the benefits payable.
	Type *CodeableConcept `json:"type"`
}

// StructureDefinition_Snapshot is A definition of a FHIR structure. This resource is used to describe the underlying
// resources, data types defined in FHIR, and also for describing extensions and
// constraints on resources and data types.
type StructureDefinition_Snapshot struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Captures constraints on each element within the resource.
	Element []*ElementDefinition `json:"element,omitempty"`
}

// OperationOutcome_Issue is A collection of error, warning, or information messages that result from a system
// action.
type OperationOutcome_Issue struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates whether the issue indicates a variation from successful processing.
	Severity OperationOutcome_IssueSeverity `json:"severity"`
	// Extensions for severity
	Severity_ext *Element `json:"_severity"`
	// Extensions for diagnostics
	Diagnostics_ext *Element `json:"_diagnostics"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Additional diagnostic information about the issue.
	Diagnostics string `json:"diagnostics"`
	// This element is deprecated because it is XML specific. It is replaced by
	// issue.expression, which is format independent, and simpler to parse.
	//
	// For resource issues, this will be a simple XPath limited to element names,
	// repetition indicators and the default child accessor that identifies one of the
	// elements in the resource that caused this issue to be raised.  For HTTP errors, will
	// be "http." + the parameter name.
	Location []string `json:"location"`
	// Extensions for location
	Location_ext []*Element `json:"_location"`
	// Extensions for expression
	Expression_ext []*Element `json:"_expression"`
	// Describes the type of the issue. The system that creates an OperationOutcome SHALL
	// choose the most applicable code from the IssueType value set, and may additional
	// provide its own code for the error in the details element.
	Code OperationOutcome_IssueCode `json:"code"`
	// Extensions for code
	Code_ext *Element `json:"_code"`
	// Additional details about the error. This may be a text description of the error or a
	// system code that identifies the error.
	Details *CodeableConcept `json:"details"`
	// A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names,
	// repetition indicators and the default child accessor that identifies one of the
	// elements in the resource that caused this issue to be raised.
	Expression []string `json:"expression"`
}

type OperationOutcome_IssueCode string
type OperationOutcome_IssueSeverity string

const (
	OperationOutcome_IssueCodeInvalid         OperationOutcome_IssueCode     = "invalid"
	OperationOutcome_IssueCodeStructure       OperationOutcome_IssueCode     = "structure"
	OperationOutcome_IssueCodeRequired        OperationOutcome_IssueCode     = "required"
	OperationOutcome_IssueCodeValue           OperationOutcome_IssueCode     = "value"
	OperationOutcome_IssueCodeInvariant       OperationOutcome_IssueCode     = "invariant"
	OperationOutcome_IssueCodeSecurity        OperationOutcome_IssueCode     = "security"
	OperationOutcome_IssueCodeLogin           OperationOutcome_IssueCode     = "login"
	OperationOutcome_IssueCodeUnknown         OperationOutcome_IssueCode     = "unknown"
	OperationOutcome_IssueCodeExpired         OperationOutcome_IssueCode     = "expired"
	OperationOutcome_IssueCodeForbidden       OperationOutcome_IssueCode     = "forbidden"
	OperationOutcome_IssueCodeSuppressed      OperationOutcome_IssueCode     = "suppressed"
	OperationOutcome_IssueCodeProcessing      OperationOutcome_IssueCode     = "processing"
	OperationOutcome_IssueCodeNotSupported    OperationOutcome_IssueCode     = "not-supported"
	OperationOutcome_IssueCodeDuplicate       OperationOutcome_IssueCode     = "duplicate"
	OperationOutcome_IssueCodeMultipleMatches OperationOutcome_IssueCode     = "multiple-matches"
	OperationOutcome_IssueCodeNotFound        OperationOutcome_IssueCode     = "not-found"
	OperationOutcome_IssueCodeDeleted         OperationOutcome_IssueCode     = "deleted"
	OperationOutcome_IssueCodeTooLong         OperationOutcome_IssueCode     = "too-long"
	OperationOutcome_IssueCodeCodeInvalid     OperationOutcome_IssueCode     = "code-invalid"
	OperationOutcome_IssueCodeExtension       OperationOutcome_IssueCode     = "extension"
	OperationOutcome_IssueCodeTooCostly       OperationOutcome_IssueCode     = "too-costly"
	OperationOutcome_IssueCodeBusinessRule    OperationOutcome_IssueCode     = "business-rule"
	OperationOutcome_IssueCodeConflict        OperationOutcome_IssueCode     = "conflict"
	OperationOutcome_IssueCodeTransient       OperationOutcome_IssueCode     = "transient"
	OperationOutcome_IssueCodeLockError       OperationOutcome_IssueCode     = "lock-error"
	OperationOutcome_IssueCodeNoStore         OperationOutcome_IssueCode     = "no-store"
	OperationOutcome_IssueCodeException       OperationOutcome_IssueCode     = "exception"
	OperationOutcome_IssueCodeTimeout         OperationOutcome_IssueCode     = "timeout"
	OperationOutcome_IssueCodeIncomplete      OperationOutcome_IssueCode     = "incomplete"
	OperationOutcome_IssueCodeThrottled       OperationOutcome_IssueCode     = "throttled"
	OperationOutcome_IssueCodeInformational   OperationOutcome_IssueCode     = "informational"
	OperationOutcome_IssueSeverityFatal       OperationOutcome_IssueSeverity = "fatal"
	OperationOutcome_IssueSeverityError       OperationOutcome_IssueSeverity = "error"
	OperationOutcome_IssueSeverityWarning     OperationOutcome_IssueSeverity = "warning"
	OperationOutcome_IssueSeverityInformation OperationOutcome_IssueSeverity = "information"
)

// StructureMap_Rule is A Map of relationships between 2 structures that can be used to transform data.
type StructureMap_Rule struct {
	// Source inputs to the mapping.
	Source []*StructureMap_Source `json:"source,omitempty"`
	// Rules contained in this rule.
	Rule []*StructureMap_Rule `json:"rule"`
	// Which other rules to apply in the context of this rule.
	Dependent []*StructureMap_Dependent `json:"dependent"`
	// Documentation for this instance of data.
	Documentation string `json:"documentation"`
	// Extensions for documentation
	Documentation_ext *Element `json:"_documentation"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Name of the rule for internal references.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Content to create because of this mapping rule.
	Target []*StructureMap_Target `json:"target"`
}

// Claim_Procedure is A provider issued list of professional services and products which have been
// provided, or are to be provided, to a patient which is sent to an insurer for
// reimbursement.
type Claim_Procedure struct {
	// A number to uniquely identify procedure entries.
	Sequence uint64 `json:"sequence"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// When the condition was observed or the relative ranking.
	Type []*CodeableConcept `json:"type"`
	// The code or reference to a Procedure resource which identifies the clinical
	// intervention performed.
	ProcedureCodeableConcept *CodeableConcept `json:"procedureCodeableConcept"`
	// The code or reference to a Procedure resource which identifies the clinical
	// intervention performed.
	ProcedureReference *Reference `json:"procedureReference"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Extensions for date
	Date_ext *Element `json:"_date"`
	// Unique Device Identifiers associated with this line item.
	Udi []*Reference `json:"udi"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Date and optionally time the procedure was performed.
	Date string `json:"date"`
}

// CodeSystem_Designation is The CodeSystem resource is used to declare the existence of and describe a code
// system or code system supplement and its key properties, and optionally define a
// part or all of its content.
type CodeSystem_Designation struct {
	// Extensions for language
	Language_ext *Element `json:"_language"`
	// A code that details how this designation would be used.
	Use *Coding `json:"use"`
	// The text value for this designation.
	Value string `json:"value"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The language this designation is defined for.
	Language string `json:"language"`
}

// DeviceDefinition_DeviceName is The characteristics, operational status and capabilities of a medical-related
// component of a medical device.
type DeviceDefinition_DeviceName struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The name of the device.
	Name string `json:"name"`
	// Extensions for name
	Name_ext *Element `json:"_name"`
	// The type of deviceName.
	// UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName |
	// ModelName.
	Type DeviceDefinition_DeviceNameType `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

type DeviceDefinition_DeviceNameType string

const (
	DeviceDefinition_DeviceNameTypeUdiLabelName        DeviceDefinition_DeviceNameType = "udi-label-name"
	DeviceDefinition_DeviceNameTypeUserFriendlyName    DeviceDefinition_DeviceNameType = "user-friendly-name"
	DeviceDefinition_DeviceNameTypePatientReportedName DeviceDefinition_DeviceNameType = "patient-reported-name"
	DeviceDefinition_DeviceNameTypeManufacturerName    DeviceDefinition_DeviceNameType = "manufacturer-name"
	DeviceDefinition_DeviceNameTypeModelName           DeviceDefinition_DeviceNameType = "model-name"
	DeviceDefinition_DeviceNameTypeOther               DeviceDefinition_DeviceNameType = "other"
)

// Measure_Population is The Measure resource provides the definition of a quality measure.
type Measure_Population struct {
	// The type of population criteria.
	Code *CodeableConcept `json:"code"`
	// The human readable description of this population criteria.
	Description string `json:"description"`
	// Extensions for description
	Description_ext *Element `json:"_description"`
	// An expression that specifies the criteria for the population, typically the name of
	// an expression in a library.
	Criteria *Expression `json:"criteria,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// NamingSystem_UniqueId is A curated namespace that issues unique symbols within that namespace for the
// identification of concepts, people, devices, etc.  Represents a "System" used within
// the Identifier and Coding data types.
type NamingSystem_UniqueId struct {
	// Extensions for comment
	Comment_ext *Element `json:"_comment"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// Identifies the unique identifier scheme used for this particular identifier.
	Type NamingSystem_UniqueIdType `json:"type"`
	// Extensions for type
	Type_ext *Element `json:"_type"`
	// The string that should be sent over the wire to identify the code system or
	// identifier system.
	Value string `json:"value"`
	// Extensions for value
	Value_ext *Element `json:"_value"`
	// Indicates whether this identifier is the "preferred" identifier of this type.
	Preferred bool `json:"preferred"`
	// Notes about the past or intended usage of this identifier.
	Comment string `json:"comment"`
	// Identifies the period of time over which this identifier is considered appropriate
	// to refer to the naming system.  Outside of this window, the identifier might be
	// non-deterministic.
	Period *Period `json:"period"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for preferred
	Preferred_ext *Element `json:"_preferred"`
}

type NamingSystem_UniqueIdType string

const (
	NamingSystem_UniqueIdTypeOid   NamingSystem_UniqueIdType = "oid"
	NamingSystem_UniqueIdTypeUuid  NamingSystem_UniqueIdType = "uuid"
	NamingSystem_UniqueIdTypeUri   NamingSystem_UniqueIdType = "uri"
	NamingSystem_UniqueIdTypeOther NamingSystem_UniqueIdType = "other"
)

// MedicinalProductPharmaceutical_Characteristics is A pharmaceutical product described in terms of its composition and dose form.
type MedicinalProductPharmaceutical_Characteristics struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A coded characteristic.
	Code *CodeableConcept `json:"code,omitempty"`
	// The status of characteristic e.g. assigned or pending.
	Status *CodeableConcept `json:"status"`
}

// CodeableConcept is A concept that may be defined by a formal reference to a terminology or ontology or
// may be provided by text.
type CodeableConcept struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A reference to a code defined by a terminology system.
	Coding []*Coding `json:"coding"`
	// A human language representation of the concept as seen/selected/uttered by the user
	// who entered the data and/or which represents the intended meaning of the user.
	Text string `json:"text"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
}

// Claim_SupportingInfo is A provider issued list of professional services and products which have been
// provided, or are to be provided, to a patient which is sent to an insurer for
// reimbursement.
type Claim_SupportingInfo struct {
	// The date when or period to which this information refers.
	// pattern ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$
	TimingDate string `json:"timingDate"`
	// Provides the reason in the situation where a reason code is required in addition to
	// the content.
	Reason *CodeableConcept `json:"reason"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// Additional data or information such as resources, documents, images etc. including
	// references to the data or the actual inclusion of the data.
	ValueAttachment *Attachment `json:"valueAttachment"`
	// Additional data or information such as resources, documents, images etc. including
	// references to the data or the actual inclusion of the data.
	ValueReference *Reference `json:"valueReference"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// System and code pertaining to the specific information regarding special conditions
	// relating to the setting, treatment or patient  for which care is sought.
	Code *CodeableConcept `json:"code"`
	// The date when or period to which this information refers.
	TimingPeriod *Period `json:"timingPeriod"`
	// Additional data or information such as resources, documents, images etc. including
	// references to the data or the actual inclusion of the data.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// Extensions for valueBoolean
	ValueBoolean_ext *Element `json:"_valueBoolean"`
	// Additional data or information such as resources, documents, images etc. including
	// references to the data or the actual inclusion of the data.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// A number to uniquely identify supporting information entries.
	Sequence uint64 `json:"sequence"`
	// The general class of the information supplied: information; exception; accident,
	// employment; onset, etc.
	Category *CodeableConcept `json:"category,omitempty"`
	// Extensions for timingDate
	TimingDate_ext *Element `json:"_timingDate"`
	// Additional data or information such as resources, documents, images etc. including
	// references to the data or the actual inclusion of the data.
	// pattern ^true|false$
	ValueBoolean bool `json:"valueBoolean"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Invoice_LineItem is Invoice containing collected ChargeItems from an Account with calculated individual
// and total price for Billing purpose.
type Invoice_LineItem struct {
	// Sequence in which the items appear on the invoice.
	Sequence uint64 `json:"sequence"`
	// Extensions for sequence
	Sequence_ext *Element `json:"_sequence"`
	// The ChargeItem contains information such as the billing code, date, amount etc. If
	// no further details are required for the lineItem, inline billing codes can be added
	// using the CodeableConcept data type instead of the Reference.
	ChargeItemReference *Reference `json:"chargeItemReference"`
	// The ChargeItem contains information such as the billing code, date, amount etc. If
	// no further details are required for the lineItem, inline billing codes can be added
	// using the CodeableConcept data type instead of the Reference.
	ChargeItemCodeableConcept *CodeableConcept `json:"chargeItemCodeableConcept"`
	// The price for a ChargeItem may be calculated as a base price with
	// surcharges/deductions that apply in certain conditions. A ChargeItemDefinition
	// resource that defines the prices, factors and conditions that apply to a billing
	// code is currently under development. The priceComponent element can be used to offer
	// transparency to the recipient of the Invoice as to how the prices have been
	// calculated.
	PriceComponent []*Invoice_PriceComponent `json:"priceComponent"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// MedicationKnowledge_DrugCharacteristic is Information about a medication that is used to support knowledge.
type MedicationKnowledge_DrugCharacteristic struct {
	// Description of the characteristic.
	ValueQuantity *Quantity `json:"valueQuantity"`
	// Extensions for valueBase64Binary
	ValueBase64Binary_ext *Element `json:"_valueBase64Binary"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Description of the characteristic.
	// pattern ^[ \r\n\t\S]+$
	ValueString string `json:"valueString"`
	// Extensions for valueString
	ValueString_ext *Element `json:"_valueString"`
	// Description of the characteristic.
	// pattern ^(\s*([0-9a-zA-Z\+/=]){4}\s*)+$
	ValueBase64Binary string `json:"valueBase64Binary"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// A code specifying which characteristic of the medicine is being described (for
	// example, colour, shape, imprint).
	Type *CodeableConcept `json:"type"`
	// Description of the characteristic.
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept"`
}

// VisionPrescription_Prism is An authorization for the provision of glasses and/or contact lenses to a patient.
type VisionPrescription_Prism struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Amount of prism to compensate for eye alignment in fractional units.
	Amount float64 `json:"amount"`
	// Extensions for amount
	Amount_ext *Element `json:"_amount"`
	// The relative base, or reference lens edge, for the prism.
	Base VisionPrescription_PrismBase `json:"base"`
	// Extensions for base
	Base_ext *Element `json:"_base"`
}

type VisionPrescription_PrismBase string

const (
	VisionPrescription_PrismBaseUp   VisionPrescription_PrismBase = "up"
	VisionPrescription_PrismBaseDown VisionPrescription_PrismBase = "down"
	VisionPrescription_PrismBaseIn   VisionPrescription_PrismBase = "in"
	VisionPrescription_PrismBaseOut  VisionPrescription_PrismBase = "out"
)

// RequestGroup_RelatedAction is A group of related requests that can be used to capture intended activities that
// have inter-dependencies such as "give this medication after that one".
type RequestGroup_RelatedAction struct {
	// Extensions for relationship
	Relationship_ext *Element `json:"_relationship"`
	// A duration or range of durations to apply to the relationship. For example, 30-60
	// minutes before.
	OffsetDuration *Duration `json:"offsetDuration"`
	// A duration or range of durations to apply to the relationship. For example, 30-60
	// minutes before.
	OffsetRange *Range `json:"offsetRange"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// The element id of the action this is related to.
	ActionId string `json:"actionId"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for actionId
	ActionId_ext *Element `json:"_actionId"`
	// The relationship of this action to the related action.
	Relationship string `json:"relationship"`
}

// Task_Restriction is A task to be performed.
type Task_Restriction struct {
	// For requests that are targeted to more than on potential recipient/target, for whom
	// is fulfillment sought?
	Recipient []*Reference `json:"recipient"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Indicates the number of times the requested action should occur.
	Repetitions uint64 `json:"repetitions"`
	// Extensions for repetitions
	Repetitions_ext *Element `json:"_repetitions"`
	// Over what time-period is fulfillment sought.
	Period *Period `json:"period"`
}

// Population is A populatioof people with some set of grouping criteria.
type Population struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The age of the specific population.
	AgeRange *Range `json:"ageRange"`
	// The age of the specific population.
	AgeCodeableConcept *CodeableConcept `json:"ageCodeableConcept"`
	// The gender of the specific population.
	Gender *CodeableConcept `json:"gender"`
	// Race of the specific population.
	Race *CodeableConcept `json:"race"`
	// The existing physiological conditions of the specific population to which this
	// applies.
	PhysiologicalCondition *CodeableConcept `json:"physiologicalCondition"`
}

// Account_Coverage is A financial tool for tracking value accrued for a particular purpose.  In the
// healthcare field, used to track charges for a patient, cost centers, etc.
type Account_Coverage struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// The party(s) that contribute to payment (or part of) of the charges applied to this
	// account (including self-pay).
	//
	// A coverage may only be responsible for specific types of charges, and the sequence
	// of the coverages in the account could be important when processing billing.
	Coverage *Reference `json:"coverage,omitempty"`
	// The priority of the coverage in the context of this account.
	Priority uint64 `json:"priority"`
	// Extensions for priority
	Priority_ext *Element `json:"_priority"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// Immunization_Education is Describes the event of a patient being administered a vaccine or a record of an
// immunization as reported by a patient, a clinician or another party.
type Immunization_Education struct {
	// Identifier of the material presented to the patient.
	DocumentType string `json:"documentType"`
	// Extensions for documentType
	DocumentType_ext *Element `json:"_documentType"`
	// Reference pointer to the educational material given to the patient if the
	// information was on line.
	Reference string `json:"reference"`
	// Date the educational material was given to the patient.
	PresentationDate string `json:"presentationDate"`
	// Extensions for presentationDate
	PresentationDate_ext *Element `json:"_presentationDate"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Extensions for reference
	Reference_ext *Element `json:"_reference"`
	// Date the educational material was published.
	PublicationDate string `json:"publicationDate"`
	// Extensions for publicationDate
	PublicationDate_ext *Element `json:"_publicationDate"`
}

// ImplementationGuide_Definition is A set of rules of how a particular interoperability or standards problem is solved -
// typically through the use of FHIR resources. This resource is used to gather all the
// parts of an implementation guide into a logical whole and to publish a computable
// definition of all the parts.
type ImplementationGuide_Definition struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A logical group of resources. Logical groups can be used when building pages.
	Grouping []*ImplementationGuide_Grouping `json:"grouping"`
	// A resource that is part of the implementation guide. Conformance resources (value
	// set, structure definition, capability statements etc.) are obvious candidates for
	// inclusion, but any kind of resource can be included as an example resource.
	Resource []*ImplementationGuide_Resource `json:"resource,omitempty"`
	// A page / section in the implementation guide. The root page is the implementation
	// guide home page.
	Page *ImplementationGuide_Page `json:"page"`
	// Defines how IG is built by tools.
	Parameter []*ImplementationGuide_Parameter `json:"parameter"`
	// A template for building resources.
	Template []*ImplementationGuide_Template `json:"template"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
}

// SubstanceSourceMaterial_FractionDescription is Source material shall capture information on the taxonomic and anatomical origins as
// well as the fraction of a material that can result in or can be modified to form a
// substance. This set of data elements shall be used to define polymer substances
// isolated from biological matrices. Taxonomic and anatomical origins shall be
// described using a controlled vocabulary as required. This information is captured
// for naturally derived polymers ( . starch) and structurally diverse substances. For
// Organisms belonging to the Kingdom Plantae the Substance level defines the fresh
// material of a single species or infraspecies, the Herbal Drug and the Herbal
// preparation. For Herbal preparations, the fraction information will be captured at
// the Substance information level and additional information for herbal extracts will
// be captured at the Specified Substance Group 1 information level. See for further
// explanation the Substance Class: Structurally Diverse and the herbal annex.
type SubstanceSourceMaterial_FractionDescription struct {
	// The specific type of the material constituting the component. For Herbal
	// preparations the particulars of the extracts (liquid/dry) is described in Specified
	// Substance Group 1.
	MaterialType *CodeableConcept `json:"materialType"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// This element is capturing information about the fraction of a plant part, or human
	// plasma for fractionation.
	Fraction string `json:"fraction"`
	// Extensions for fraction
	Fraction_ext *Element `json:"_fraction"`
}

// markdown is A string that may contain Github Flavored Markdown syntax for optional processing by
// a mark down presentation engine
type markdown string

var markdownPattern = regexp.MustCompile(`^[ \r\n\t\S]+$`)

func (t *markdown) Validate() bool {
	return markdownPattern.MatchString(string(*t))
}

// Bundle_Search is A container for a collection of resources.
type Bundle_Search struct {
	// When searching, the server's search ranking score for the entry.
	Score float64 `json:"score"`
	// Extensions for score
	Score_ext *Element `json:"_score"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Why this entry is in the result set - whether it's included as a match or because of
	// an _include requirement, or to convey information or warning information about the
	// search process.
	Mode Bundle_SearchMode `json:"mode"`
	// Extensions for mode
	Mode_ext *Element `json:"_mode"`
}

type Bundle_SearchMode string

const (
	Bundle_SearchModeMatch   Bundle_SearchMode = "match"
	Bundle_SearchModeInclude Bundle_SearchMode = "include"
	Bundle_SearchModeOutcome Bundle_SearchMode = "outcome"
)

// Contract_Party is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract_Party struct {
	// Participant in the offer.
	Reference []*Reference `json:"reference,omitempty"`
	// How the party participates in the offer.
	Role *CodeableConcept `json:"role,omitempty"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
}

// Contract_Context is Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
// policy or agreement.
type Contract_Context struct {
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Asset context reference may include the creator, custodian, or owning Person or
	// Organization (e.g., bank, repository),  location held, e.g., building,  jurisdiction.
	Reference *Reference `json:"reference"`
	// Coded representation of the context generally or of the Referenced entity, such as
	// the asset holder type or location.
	Code []*CodeableConcept `json:"code"`
	// Context description.
	Text string `json:"text"`
	// Extensions for text
	Text_ext *Element `json:"_text"`
}

// Encounter_Hospitalization is An interaction between a patient and healthcare provider(s) for the purpose of
// providing healthcare service(s) or assessing the health status of a patient.
type Encounter_Hospitalization struct {
	// From where patient was admitted (physician referral, transfer).
	AdmitSource *CodeableConcept `json:"admitSource"`
	// Whether this hospitalization is a readmission and why if known.
	ReAdmission *CodeableConcept `json:"reAdmission"`
	// Diet preferences reported by the patient.
	DietPreference []*CodeableConcept `json:"dietPreference"`
	// Special courtesies (VIP, board member).
	SpecialCourtesy []*CodeableConcept `json:"specialCourtesy"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Pre-admission identifier.
	PreAdmissionIdentifier *Identifier `json:"preAdmissionIdentifier"`
	// The location/organization from which the patient came before admission.
	Origin *Reference `json:"origin"`
	// Any special requests that have been made for this hospitalization encounter, such as
	// the provision of specific equipment or other things.
	SpecialArrangement []*CodeableConcept `json:"specialArrangement"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// Location/organization to which the patient is discharged.
	Destination *Reference `json:"destination"`
	// Category or kind of location after discharge.
	DischargeDisposition *CodeableConcept `json:"dischargeDisposition"`
}

// AdverseEvent_Causality is Actual or  potential/avoided event causing unintended physical injury resulting from
// or contributed to by medical care, a research study or other healthcare setting
// factors that requires additional monitoring, treatment, or hospitalization, or that
// results in death.
type AdverseEvent_Causality struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// Assessment of if the entity caused the event.
	Assessment *CodeableConcept `json:"assessment"`
	// AdverseEvent.suspectEntity.causalityProductRelatedness.
	ProductRelatedness string `json:"productRelatedness"`
	// Extensions for productRelatedness
	ProductRelatedness_ext *Element `json:"_productRelatedness"`
	// AdverseEvent.suspectEntity.causalityAuthor.
	Author *Reference `json:"author"`
	// ProbabilityScale | Bayesian | Checklist.
	Method *CodeableConcept `json:"method"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}

// DetectedIssue_Evidence is Indicates an actual or potential clinical issue with or between one or more active
// or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective
// treatment frequency, Procedure-condition conflict, etc.
type DetectedIssue_Evidence struct {
	// May be used to represent additional information that is not part of the basic
	// definition of the element and that modifies the understanding of the element in
	// which it is contained and/or the understanding of the containing element's
	// descendants. Usually modifier elements provide negation or qualification. To make
	// the use of extensions safe and manageable, there is a strict set of governance
	// applied to the definition and use of extensions. Though any implementer can define
	// an extension, there is a set of requirements that SHALL be met as part of the
	// definition of the extension. Applications processing a resource are required to
	// check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or
	// DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []*Extension `json:"modifierExtension"`
	// A manifestation that led to the recording of this detected issue.
	Code []*CodeableConcept `json:"code"`
	// Links to resources that constitute evidence for the detected issue such as a
	// GuidanceResponse or MeasureReport.
	Detail []*Reference `json:"detail"`
	// Unique id for the element within a resource (for internal references). This may be
	// any string value that does not contain spaces.
	Id string `json:"id"`
	// May be used to represent additional information that is not part of the basic
	// definition of the element. To make the use of extensions safe and manageable, there
	// is a strict set of governance  applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of requirements that
	// SHALL be met as part of the definition of the extension.
	Extension []*Extension `json:"extension"`
}
